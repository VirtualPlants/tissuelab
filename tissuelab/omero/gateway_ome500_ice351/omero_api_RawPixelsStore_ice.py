# **********************************************************************
#
# Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.5.1
#
# <auto-generated>
#
# Generated from file `RawPixelsStore.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy
import omero_ModelF_ice
import omero_Collections_ice
import omero_api_PyramidService_ice

# Included module omero
_M_omero = Ice.openModule('omero')

# Included module omero.model
_M_omero.model = Ice.openModule('omero.model')

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Included module omero.sys
_M_omero.sys = Ice.openModule('omero.sys')

# Included module omero.api
_M_omero.api = Ice.openModule('omero.api')

# Included module Glacier2
_M_Glacier2 = Ice.openModule('Glacier2')

# Included module omero.grid
_M_omero.grid = Ice.openModule('omero.grid')

# Start of module omero
__name__ = 'omero'

# Start of module omero.api
__name__ = 'omero.api'

if 'RawPixelsStore' not in _M_omero.api.__dict__:
    _M_omero.api.RawPixelsStore = Ice.createTempClass()
    class RawPixelsStore(_M_omero.api.PyramidService):
        '''Binary data provider. Initialized with the ID of a
omero.model.Pixels instance, this service can provide
various slices, stacks, regions of the 5-dimensional (X-Y planes with
multiple Z-sections and Channels over Time). The byte array returned
by the getter methods and passed to the setter methods can and will
be interpreted according to results of getByteWidth(),
isFloat(), and isSigned().

Read-only caveat:

Mutating methods (set*) are only available during the first access.
Once the Pixels data has been successfully saved (via the save or close
methods on this interface), then the data should be treated read-only.
If Pixels data writing fails and the service is inadvertently closed,
delete the Pixels object, and create a new one. Any partially written
data will be removed.'''
        def __init__(self):
            if Ice.getType(self) == _M_omero.api.RawPixelsStore:
                raise RuntimeError('omero.api.RawPixelsStore is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::omero::api::PyramidService', '::omero::api::RawPixelsStore', '::omero::api::ServiceInterface', '::omero::api::StatefulServiceInterface')

        def ice_id(self, current=None):
            return '::omero::api::RawPixelsStore'

        def ice_staticId():
            return '::omero::api::RawPixelsStore'
        ice_staticId = staticmethod(ice_staticId)

        def setPixelsId_async(self, _cb, pixelsId, bypassOriginalFile, current=None):
            '''Initializes the stateful service for a given Pixels set.
Arguments:
    pixelsId Pixels set identifier.
    bypassOriginalFile Whether or not to bypass checking for an
original file to back the pixel buffer used by this service. If requests
are predominantly write-only or involve the population of
a brand new pixel buffer using true here is a safe
optimization otherwise false is expected.

See "read-only caveat" under [RawPixelsStore]'''
            pass

        def getPixelsId_async(self, _cb, current=None):
            '''Returns the current Pixels set identifier.
Returns:
    See above.'''
            pass

        def getPixelsPath_async(self, _cb, current=None):
            '''Returns the current Pixels path.
Returns:
    See above.'''
            pass

        def prepare_async(self, _cb, pixelsIds, current=None):
            '''Prepares the stateful service with a cache of loaded Pixels objects.
This method is designed to combat query overhead, where many sets of
Pixels are to be read from or written to, by loading all the Pixels
sets at once. Multiple calls will result in the existing cache being
overwritten.
Arguments:
    pixelsIds Pixels IDs to cache.'''
            pass

        def getPlaneSize_async(self, _cb, current=None):
            '''Retrieves the in memory size of a 2D image plane in this pixel store.
Returns:
    2D image plane size in bytes (sizeX*sizeY*ByteWidth).'''
            pass

        def getRowSize_async(self, _cb, current=None):
            '''Retrieves the in memory size of a row or scanline of pixels in this
pixel store.
Returns:
    row or scanline size in bytes (sizeX*ByteWidth)'''
            pass

        def getStackSize_async(self, _cb, current=None):
            '''Retrieves the in memory size of the entire number of optical sections
for a single wavelength or channel at a particular timepoint in
this pixel store.
Returns:
    stack size in bytes (sizeX*sizeY*sizeZ*ByteWidth).'''
            pass

        def getTimepointSize_async(self, _cb, current=None):
            '''Retrieves the in memory size of the entire number of optical sections for
all wavelengths or channels at a particular timepoint in this
pixel store.
Returns:
    timepoint size in bytes (sizeX*sizeY*sizeZ*sizeC*ByteWidth).'''
            pass

        def getTotalSize_async(self, _cb, current=None):
            '''Retrieves the in memory size of the entire pixel store.
Returns:
    total size of the pixel size in bytes
(sizeX*sizeY*sizeZ*sizeC*sizeT*ByteWidth).'''
            pass

        def getRowOffset_async(self, _cb, y, z, c, t, current=None):
            '''Retrieves the offset for a particular row or scanline in this pixel
store.
Arguments:
    y offset across the Y-axis of the pixel buffer.
    z offset across the Z-axis of the pixel buffer.
    c offset across the C-axis of the pixel buffer.
    t offset across the T-axis of the pixel buffer.
Returns:
    offset of the row or scaline.'''
            pass

        def getPlaneOffset_async(self, _cb, z, c, t, current=None):
            '''Retrieves the offset for a particular 2D image plane in this pixel
store.
Arguments:
    z offset across the Z-axis of the pixel buffer.
    c offset across the C-axis of the pixel buffer.
    t offset across the T-axis of the pixel buffer.
Returns:
    offset of the 2D image plane.'''
            pass

        def getStackOffset_async(self, _cb, c, t, current=None):
            '''Retrieves the offset for the entire number of optical sections
for a single wavelength or channel at a particular timepoint in
this pixel store.
Arguments:
    c offset across the C-axis of the pixel buffer.
    t offset across the T-axis of the pixel buffer.
Returns:
    offset of the stack.'''
            pass

        def getTimepointOffset_async(self, _cb, t, current=None):
            '''Retrieves the in memory size of the entire number of optical sections for
all wavelengths or channels at a particular timepoint in this
pixel store.
Arguments:
    t offset across the T-axis of the pixel buffer.
Returns:
    offset of the timepoint.'''
            pass

        def getTile_async(self, _cb, z, c, t, x, y, w, h, current=None):
            '''Retrieves a tile from this pixel buffer.
Arguments:
    z offset across the Z-axis of the pixel buffer.
    c offset across the C-axis of the pixel buffer.
    t offset across the T-axis of the pixel buffer.
    x Top left corner of the tile, X offset.
    y Top left corner of the tile, Y offset.
    w Width of the tile.
    h Height of the tile.
Returns:
    buffer containing the data.'''
            pass

        def getHypercube_async(self, _cb, offset, size, step, current=None):
            '''Retrieves a n-dimensional block from this pixel store.
Arguments:
    start offset for each dimension within pixel store.
    size of each dimension (dependent on dimension).
    step needed of each dimension (dependent on dimension).
Returns:
    buffer containing the data.'''
            pass

        def getRegion_async(self, _cb, size, offset, current=None):
            '''Retrieves a region from this pixel store.
Arguments:
    size byte width of the region to retrieve.
    offset offset within the pixel store.
Returns:
    buffer containing the data.'''
            pass

        def getRow_async(self, _cb, y, z, c, t, current=None):
            '''Retrieves a particular row or scanline from this pixel store.
Arguments:
    y offset across the Y-axis of the pixel store.
    z offset across the Z-axis of the pixel store.
    c offset across the C-axis of the pixel store.
    t offset across the T-axis of the pixel store.
Returns:
    buffer containing the data which comprises this row or scanline.'''
            pass

        def getCol_async(self, _cb, x, z, c, t, current=None):
            '''Retrieves a particular column from this pixel store.
Arguments:
    x offset across the X-axis of the pixel store.
    z offset across the Z-axis of the pixel store.
    c offset across the C-axis of the pixel store.
    t offset across the T-axis of the pixel store.
Returns:
    buffer containing the data which comprises this column.'''
            pass

        def getPlane_async(self, _cb, z, c, t, current=None):
            '''Retrieves a particular 2D image plane from this pixel store.
Arguments:
    z offset across the Z-axis of the pixel store.
    c offset across the C-axis of the pixel store.
    t offset across the T-axis of the pixel store.
Returns:
    buffer containing the data which comprises this 2D image plane.'''
            pass

        def getPlaneRegion_async(self, _cb, z, c, t, size, offset, current=None):
            '''Retrieves a region from a given plane from this pixel store.
Arguments:
    z offset across the Z-axis of the pixel store.
    c offset across the C-axis of the pixel store.
    t offset across the T-axis of the pixel store.
    count the number of pixels to retrieve.
    offset the offset at which to retrieve count pixels.
Returns:
    buffer containing the data which comprises the region of the
given 2D image plane. It is guaranteed that this buffer will have been
byte swapped.'''
            pass

        def getStack_async(self, _cb, c, t, current=None):
            '''Retrieves the the entire number of optical sections for a single
wavelength or channel at a particular timepoint in this pixel store.
Arguments:
    c offset across the C-axis of the pixel store.
    t offset across the T-axis of the pixel store.
Returns:
    buffer containing the data which comprises this stack.'''
            pass

        def getTimepoint_async(self, _cb, t, current=None):
            '''Retrieves the entire number of optical sections for all
wavelengths or channels at a particular timepoint in this pixel store.
Arguments:
    t offset across the T-axis of the pixel store.'''
            pass

        def setTile_async(self, _cb, buf, z, c, t, x, y, w, h, current=None):
            '''Sets a tile in this pixel buffer.
Arguments:
    buf A byte array of the data.
    z offset across the Z-axis of the pixel buffer.
    c offset across the C-axis of the pixel buffer.
    t offset across the T-axis of the pixel buffer.
    x Top left corner of the tile, X offset.
    y Top left corner of the tile, Y offset.
    w Width of the tile.
    h Height of the tile.
Exceptions:
    IOException if there is a problem writing to the pixel buffer.
    BufferOverflowException if an attempt is made to write off the
end of the file.

See "read-only caveat" under [RawPixelsStore]'''
            pass

        def setRegion_async(self, _cb, size, offset, buf, current=None):
            '''Sets a region in this pixel buffer.
Arguments:
    size byte width of the region to set.
    offset offset within the pixel buffer.
    buf a byte array of the data.

See "read-only caveat" under [RawPixelsStore]'''
            pass

        def setRow_async(self, _cb, buf, y, z, c, t, current=None):
            '''Sets a particular row or scanline in this pixel store.
Arguments:
    buf a byte array of the data comprising this row or scanline.
    y offset across the Y-axis of the pixel store.
    z offset across the Z-axis of the pixel store.
    c offset across the C-axis of the pixel store.
    t offset across the T-axis of the pixel store.

See "read-only caveat" under [RawPixelsStore]'''
            pass

        def setPlane_async(self, _cb, buf, z, c, t, current=None):
            '''Sets a particular 2D image plane in this pixel store.
Arguments:
    buf a byte array of the data comprising this 2D image plane.
    z offset across the Z-axis of the pixel store.
    c offset across the C-axis of the pixel store.
    t offset across the T-axis of the pixel store.

See "read-only caveat" under [RawPixelsStore]'''
            pass

        def setStack_async(self, _cb, buf, z, c, t, current=None):
            '''Sets the entire number of optical sections for a single
wavelength or channel at a particular timepoint in this pixel store.
Arguments:
    buf a byte array of the data comprising this stack.
    c offset across the C-axis of the pixel store.
    t offset across the T-axis of the pixel store.

See "read-only caveat" under [RawPixelsStore]'''
            pass

        def setTimepoint_async(self, _cb, buf, t, current=None):
            '''Sets the entire number of optical sections for all
wavelengths or channels at a particular timepoint in this pixel store.
Arguments:
    buf a byte array of the data comprising this timepoint.
    t offset across the T-axis of the pixel buffer.

See "read-only caveat" under [RawPixelsStore]'''
            pass

        def getByteWidth_async(self, _cb, current=None):
            '''Returns the byte width for the pixel store.
Returns:
    See above.'''
            pass

        def isSigned_async(self, _cb, current=None):
            '''Returns whether or not the pixel store has signed pixels.
Returns:
    See above.'''
            pass

        def isFloat_async(self, _cb, current=None):
            '''Returns whether or not the pixel buffer has floating point pixels.
Returns:'''
            pass

        def calculateMessageDigest_async(self, _cb, current=None):
            '''Calculates a SHA-1 message digest for the entire pixel store.
Returns:
    byte array containing the message digest.'''
            pass

        def save_async(self, _cb, current=None):
            '''Save the current state of the pixels, updating the SHA1. This should
only be called AFTER all data is successfully set. Future invocations
of set methods may be disallowed. This read-only status will allow
background processing (generation of thumbnails, compression, etc)
to begin. More information under [RawPixelsStore].

A null instance will be returned if no save was performed.'''
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_omero.api._t_RawPixelsStore)

        __repr__ = __str__

    _M_omero.api.RawPixelsStorePrx = Ice.createTempClass()
    class RawPixelsStorePrx(_M_omero.api.PyramidServicePrx):

        '''Initializes the stateful service for a given Pixels set.
Arguments:
    pixelsId Pixels set identifier.
    bypassOriginalFile Whether or not to bypass checking for an
original file to back the pixel buffer used by this service. If requests
are predominantly write-only or involve the population of
a brand new pixel buffer using true here is a safe
optimization otherwise false is expected.

See "read-only caveat" under [RawPixelsStore]'''
        def setPixelsId(self, pixelsId, bypassOriginalFile, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_setPixelsId.invoke(self, ((pixelsId, bypassOriginalFile), _ctx))

        '''Initializes the stateful service for a given Pixels set.
Arguments:
    pixelsId Pixels set identifier.
    bypassOriginalFile Whether or not to bypass checking for an
original file to back the pixel buffer used by this service. If requests
are predominantly write-only or involve the population of
a brand new pixel buffer using true here is a safe
optimization otherwise false is expected.

See "read-only caveat" under [RawPixelsStore]'''
        def begin_setPixelsId(self, pixelsId, bypassOriginalFile, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_setPixelsId.begin(self, ((pixelsId, bypassOriginalFile), _response, _ex, _sent, _ctx))

        '''Initializes the stateful service for a given Pixels set.
Arguments:
    pixelsId Pixels set identifier.
    bypassOriginalFile Whether or not to bypass checking for an
original file to back the pixel buffer used by this service. If requests
are predominantly write-only or involve the population of
a brand new pixel buffer using true here is a safe
optimization otherwise false is expected.

See "read-only caveat" under [RawPixelsStore]'''
        def end_setPixelsId(self, _r):
            return _M_omero.api.RawPixelsStore._op_setPixelsId.end(self, _r)

        '''Initializes the stateful service for a given Pixels set.
Arguments:
    pixelsId Pixels set identifier.
    bypassOriginalFile Whether or not to bypass checking for an
original file to back the pixel buffer used by this service. If requests
are predominantly write-only or involve the population of
a brand new pixel buffer using true here is a safe
optimization otherwise false is expected.

See "read-only caveat" under [RawPixelsStore]'''
        def setPixelsId_async(self, _cb, pixelsId, bypassOriginalFile, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_setPixelsId.invokeAsync(self, (_cb, (pixelsId, bypassOriginalFile), _ctx))

        '''Returns the current Pixels set identifier.
Returns:
    See above.'''
        def getPixelsId(self, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getPixelsId.invoke(self, ((), _ctx))

        '''Returns the current Pixels set identifier.
Returns:
    See above.'''
        def begin_getPixelsId(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getPixelsId.begin(self, ((), _response, _ex, _sent, _ctx))

        '''Returns the current Pixels set identifier.
Returns:
    See above.'''
        def end_getPixelsId(self, _r):
            return _M_omero.api.RawPixelsStore._op_getPixelsId.end(self, _r)

        '''Returns the current Pixels set identifier.
Returns:
    See above.'''
        def getPixelsId_async(self, _cb, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getPixelsId.invokeAsync(self, (_cb, (), _ctx))

        '''Returns the current Pixels path.
Returns:
    See above.'''
        def getPixelsPath(self, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getPixelsPath.invoke(self, ((), _ctx))

        '''Returns the current Pixels path.
Returns:
    See above.'''
        def begin_getPixelsPath(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getPixelsPath.begin(self, ((), _response, _ex, _sent, _ctx))

        '''Returns the current Pixels path.
Returns:
    See above.'''
        def end_getPixelsPath(self, _r):
            return _M_omero.api.RawPixelsStore._op_getPixelsPath.end(self, _r)

        '''Returns the current Pixels path.
Returns:
    See above.'''
        def getPixelsPath_async(self, _cb, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getPixelsPath.invokeAsync(self, (_cb, (), _ctx))

        '''Prepares the stateful service with a cache of loaded Pixels objects.
This method is designed to combat query overhead, where many sets of
Pixels are to be read from or written to, by loading all the Pixels
sets at once. Multiple calls will result in the existing cache being
overwritten.
Arguments:
    pixelsIds Pixels IDs to cache.'''
        def prepare(self, pixelsIds, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_prepare.invoke(self, ((pixelsIds, ), _ctx))

        '''Prepares the stateful service with a cache of loaded Pixels objects.
This method is designed to combat query overhead, where many sets of
Pixels are to be read from or written to, by loading all the Pixels
sets at once. Multiple calls will result in the existing cache being
overwritten.
Arguments:
    pixelsIds Pixels IDs to cache.'''
        def begin_prepare(self, pixelsIds, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_prepare.begin(self, ((pixelsIds, ), _response, _ex, _sent, _ctx))

        '''Prepares the stateful service with a cache of loaded Pixels objects.
This method is designed to combat query overhead, where many sets of
Pixels are to be read from or written to, by loading all the Pixels
sets at once. Multiple calls will result in the existing cache being
overwritten.
Arguments:
    pixelsIds Pixels IDs to cache.'''
        def end_prepare(self, _r):
            return _M_omero.api.RawPixelsStore._op_prepare.end(self, _r)

        '''Prepares the stateful service with a cache of loaded Pixels objects.
This method is designed to combat query overhead, where many sets of
Pixels are to be read from or written to, by loading all the Pixels
sets at once. Multiple calls will result in the existing cache being
overwritten.
Arguments:
    pixelsIds Pixels IDs to cache.'''
        def prepare_async(self, _cb, pixelsIds, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_prepare.invokeAsync(self, (_cb, (pixelsIds, ), _ctx))

        '''Retrieves the in memory size of a 2D image plane in this pixel store.
Returns:
    2D image plane size in bytes (sizeX*sizeY*ByteWidth).'''
        def getPlaneSize(self, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getPlaneSize.invoke(self, ((), _ctx))

        '''Retrieves the in memory size of a 2D image plane in this pixel store.
Returns:
    2D image plane size in bytes (sizeX*sizeY*ByteWidth).'''
        def begin_getPlaneSize(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getPlaneSize.begin(self, ((), _response, _ex, _sent, _ctx))

        '''Retrieves the in memory size of a 2D image plane in this pixel store.
Returns:
    2D image plane size in bytes (sizeX*sizeY*ByteWidth).'''
        def end_getPlaneSize(self, _r):
            return _M_omero.api.RawPixelsStore._op_getPlaneSize.end(self, _r)

        '''Retrieves the in memory size of a 2D image plane in this pixel store.
Returns:
    2D image plane size in bytes (sizeX*sizeY*ByteWidth).'''
        def getPlaneSize_async(self, _cb, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getPlaneSize.invokeAsync(self, (_cb, (), _ctx))

        '''Retrieves the in memory size of a row or scanline of pixels in this
pixel store.
Returns:
    row or scanline size in bytes (sizeX*ByteWidth)'''
        def getRowSize(self, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getRowSize.invoke(self, ((), _ctx))

        '''Retrieves the in memory size of a row or scanline of pixels in this
pixel store.
Returns:
    row or scanline size in bytes (sizeX*ByteWidth)'''
        def begin_getRowSize(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getRowSize.begin(self, ((), _response, _ex, _sent, _ctx))

        '''Retrieves the in memory size of a row or scanline of pixels in this
pixel store.
Returns:
    row or scanline size in bytes (sizeX*ByteWidth)'''
        def end_getRowSize(self, _r):
            return _M_omero.api.RawPixelsStore._op_getRowSize.end(self, _r)

        '''Retrieves the in memory size of a row or scanline of pixels in this
pixel store.
Returns:
    row or scanline size in bytes (sizeX*ByteWidth)'''
        def getRowSize_async(self, _cb, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getRowSize.invokeAsync(self, (_cb, (), _ctx))

        '''Retrieves the in memory size of the entire number of optical sections
for a single wavelength or channel at a particular timepoint in
this pixel store.
Returns:
    stack size in bytes (sizeX*sizeY*sizeZ*ByteWidth).'''
        def getStackSize(self, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getStackSize.invoke(self, ((), _ctx))

        '''Retrieves the in memory size of the entire number of optical sections
for a single wavelength or channel at a particular timepoint in
this pixel store.
Returns:
    stack size in bytes (sizeX*sizeY*sizeZ*ByteWidth).'''
        def begin_getStackSize(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getStackSize.begin(self, ((), _response, _ex, _sent, _ctx))

        '''Retrieves the in memory size of the entire number of optical sections
for a single wavelength or channel at a particular timepoint in
this pixel store.
Returns:
    stack size in bytes (sizeX*sizeY*sizeZ*ByteWidth).'''
        def end_getStackSize(self, _r):
            return _M_omero.api.RawPixelsStore._op_getStackSize.end(self, _r)

        '''Retrieves the in memory size of the entire number of optical sections
for a single wavelength or channel at a particular timepoint in
this pixel store.
Returns:
    stack size in bytes (sizeX*sizeY*sizeZ*ByteWidth).'''
        def getStackSize_async(self, _cb, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getStackSize.invokeAsync(self, (_cb, (), _ctx))

        '''Retrieves the in memory size of the entire number of optical sections for
all wavelengths or channels at a particular timepoint in this
pixel store.
Returns:
    timepoint size in bytes (sizeX*sizeY*sizeZ*sizeC*ByteWidth).'''
        def getTimepointSize(self, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getTimepointSize.invoke(self, ((), _ctx))

        '''Retrieves the in memory size of the entire number of optical sections for
all wavelengths or channels at a particular timepoint in this
pixel store.
Returns:
    timepoint size in bytes (sizeX*sizeY*sizeZ*sizeC*ByteWidth).'''
        def begin_getTimepointSize(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getTimepointSize.begin(self, ((), _response, _ex, _sent, _ctx))

        '''Retrieves the in memory size of the entire number of optical sections for
all wavelengths or channels at a particular timepoint in this
pixel store.
Returns:
    timepoint size in bytes (sizeX*sizeY*sizeZ*sizeC*ByteWidth).'''
        def end_getTimepointSize(self, _r):
            return _M_omero.api.RawPixelsStore._op_getTimepointSize.end(self, _r)

        '''Retrieves the in memory size of the entire number of optical sections for
all wavelengths or channels at a particular timepoint in this
pixel store.
Returns:
    timepoint size in bytes (sizeX*sizeY*sizeZ*sizeC*ByteWidth).'''
        def getTimepointSize_async(self, _cb, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getTimepointSize.invokeAsync(self, (_cb, (), _ctx))

        '''Retrieves the in memory size of the entire pixel store.
Returns:
    total size of the pixel size in bytes
(sizeX*sizeY*sizeZ*sizeC*sizeT*ByteWidth).'''
        def getTotalSize(self, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getTotalSize.invoke(self, ((), _ctx))

        '''Retrieves the in memory size of the entire pixel store.
Returns:
    total size of the pixel size in bytes
(sizeX*sizeY*sizeZ*sizeC*sizeT*ByteWidth).'''
        def begin_getTotalSize(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getTotalSize.begin(self, ((), _response, _ex, _sent, _ctx))

        '''Retrieves the in memory size of the entire pixel store.
Returns:
    total size of the pixel size in bytes
(sizeX*sizeY*sizeZ*sizeC*sizeT*ByteWidth).'''
        def end_getTotalSize(self, _r):
            return _M_omero.api.RawPixelsStore._op_getTotalSize.end(self, _r)

        '''Retrieves the in memory size of the entire pixel store.
Returns:
    total size of the pixel size in bytes
(sizeX*sizeY*sizeZ*sizeC*sizeT*ByteWidth).'''
        def getTotalSize_async(self, _cb, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getTotalSize.invokeAsync(self, (_cb, (), _ctx))

        '''Retrieves the offset for a particular row or scanline in this pixel
store.
Arguments:
    y offset across the Y-axis of the pixel buffer.
    z offset across the Z-axis of the pixel buffer.
    c offset across the C-axis of the pixel buffer.
    t offset across the T-axis of the pixel buffer.
Returns:
    offset of the row or scaline.'''
        def getRowOffset(self, y, z, c, t, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getRowOffset.invoke(self, ((y, z, c, t), _ctx))

        '''Retrieves the offset for a particular row or scanline in this pixel
store.
Arguments:
    y offset across the Y-axis of the pixel buffer.
    z offset across the Z-axis of the pixel buffer.
    c offset across the C-axis of the pixel buffer.
    t offset across the T-axis of the pixel buffer.
Returns:
    offset of the row or scaline.'''
        def begin_getRowOffset(self, y, z, c, t, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getRowOffset.begin(self, ((y, z, c, t), _response, _ex, _sent, _ctx))

        '''Retrieves the offset for a particular row or scanline in this pixel
store.
Arguments:
    y offset across the Y-axis of the pixel buffer.
    z offset across the Z-axis of the pixel buffer.
    c offset across the C-axis of the pixel buffer.
    t offset across the T-axis of the pixel buffer.
Returns:
    offset of the row or scaline.'''
        def end_getRowOffset(self, _r):
            return _M_omero.api.RawPixelsStore._op_getRowOffset.end(self, _r)

        '''Retrieves the offset for a particular row or scanline in this pixel
store.
Arguments:
    y offset across the Y-axis of the pixel buffer.
    z offset across the Z-axis of the pixel buffer.
    c offset across the C-axis of the pixel buffer.
    t offset across the T-axis of the pixel buffer.
Returns:
    offset of the row or scaline.'''
        def getRowOffset_async(self, _cb, y, z, c, t, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getRowOffset.invokeAsync(self, (_cb, (y, z, c, t), _ctx))

        '''Retrieves the offset for a particular 2D image plane in this pixel
store.
Arguments:
    z offset across the Z-axis of the pixel buffer.
    c offset across the C-axis of the pixel buffer.
    t offset across the T-axis of the pixel buffer.
Returns:
    offset of the 2D image plane.'''
        def getPlaneOffset(self, z, c, t, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getPlaneOffset.invoke(self, ((z, c, t), _ctx))

        '''Retrieves the offset for a particular 2D image plane in this pixel
store.
Arguments:
    z offset across the Z-axis of the pixel buffer.
    c offset across the C-axis of the pixel buffer.
    t offset across the T-axis of the pixel buffer.
Returns:
    offset of the 2D image plane.'''
        def begin_getPlaneOffset(self, z, c, t, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getPlaneOffset.begin(self, ((z, c, t), _response, _ex, _sent, _ctx))

        '''Retrieves the offset for a particular 2D image plane in this pixel
store.
Arguments:
    z offset across the Z-axis of the pixel buffer.
    c offset across the C-axis of the pixel buffer.
    t offset across the T-axis of the pixel buffer.
Returns:
    offset of the 2D image plane.'''
        def end_getPlaneOffset(self, _r):
            return _M_omero.api.RawPixelsStore._op_getPlaneOffset.end(self, _r)

        '''Retrieves the offset for a particular 2D image plane in this pixel
store.
Arguments:
    z offset across the Z-axis of the pixel buffer.
    c offset across the C-axis of the pixel buffer.
    t offset across the T-axis of the pixel buffer.
Returns:
    offset of the 2D image plane.'''
        def getPlaneOffset_async(self, _cb, z, c, t, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getPlaneOffset.invokeAsync(self, (_cb, (z, c, t), _ctx))

        '''Retrieves the offset for the entire number of optical sections
for a single wavelength or channel at a particular timepoint in
this pixel store.
Arguments:
    c offset across the C-axis of the pixel buffer.
    t offset across the T-axis of the pixel buffer.
Returns:
    offset of the stack.'''
        def getStackOffset(self, c, t, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getStackOffset.invoke(self, ((c, t), _ctx))

        '''Retrieves the offset for the entire number of optical sections
for a single wavelength or channel at a particular timepoint in
this pixel store.
Arguments:
    c offset across the C-axis of the pixel buffer.
    t offset across the T-axis of the pixel buffer.
Returns:
    offset of the stack.'''
        def begin_getStackOffset(self, c, t, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getStackOffset.begin(self, ((c, t), _response, _ex, _sent, _ctx))

        '''Retrieves the offset for the entire number of optical sections
for a single wavelength or channel at a particular timepoint in
this pixel store.
Arguments:
    c offset across the C-axis of the pixel buffer.
    t offset across the T-axis of the pixel buffer.
Returns:
    offset of the stack.'''
        def end_getStackOffset(self, _r):
            return _M_omero.api.RawPixelsStore._op_getStackOffset.end(self, _r)

        '''Retrieves the offset for the entire number of optical sections
for a single wavelength or channel at a particular timepoint in
this pixel store.
Arguments:
    c offset across the C-axis of the pixel buffer.
    t offset across the T-axis of the pixel buffer.
Returns:
    offset of the stack.'''
        def getStackOffset_async(self, _cb, c, t, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getStackOffset.invokeAsync(self, (_cb, (c, t), _ctx))

        '''Retrieves the in memory size of the entire number of optical sections for
all wavelengths or channels at a particular timepoint in this
pixel store.
Arguments:
    t offset across the T-axis of the pixel buffer.
Returns:
    offset of the timepoint.'''
        def getTimepointOffset(self, t, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getTimepointOffset.invoke(self, ((t, ), _ctx))

        '''Retrieves the in memory size of the entire number of optical sections for
all wavelengths or channels at a particular timepoint in this
pixel store.
Arguments:
    t offset across the T-axis of the pixel buffer.
Returns:
    offset of the timepoint.'''
        def begin_getTimepointOffset(self, t, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getTimepointOffset.begin(self, ((t, ), _response, _ex, _sent, _ctx))

        '''Retrieves the in memory size of the entire number of optical sections for
all wavelengths or channels at a particular timepoint in this
pixel store.
Arguments:
    t offset across the T-axis of the pixel buffer.
Returns:
    offset of the timepoint.'''
        def end_getTimepointOffset(self, _r):
            return _M_omero.api.RawPixelsStore._op_getTimepointOffset.end(self, _r)

        '''Retrieves the in memory size of the entire number of optical sections for
all wavelengths or channels at a particular timepoint in this
pixel store.
Arguments:
    t offset across the T-axis of the pixel buffer.
Returns:
    offset of the timepoint.'''
        def getTimepointOffset_async(self, _cb, t, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getTimepointOffset.invokeAsync(self, (_cb, (t, ), _ctx))

        '''Retrieves a tile from this pixel buffer.
Arguments:
    z offset across the Z-axis of the pixel buffer.
    c offset across the C-axis of the pixel buffer.
    t offset across the T-axis of the pixel buffer.
    x Top left corner of the tile, X offset.
    y Top left corner of the tile, Y offset.
    w Width of the tile.
    h Height of the tile.
Returns:
    buffer containing the data.'''
        def getTile(self, z, c, t, x, y, w, h, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getTile.invoke(self, ((z, c, t, x, y, w, h), _ctx))

        '''Retrieves a tile from this pixel buffer.
Arguments:
    z offset across the Z-axis of the pixel buffer.
    c offset across the C-axis of the pixel buffer.
    t offset across the T-axis of the pixel buffer.
    x Top left corner of the tile, X offset.
    y Top left corner of the tile, Y offset.
    w Width of the tile.
    h Height of the tile.
Returns:
    buffer containing the data.'''
        def begin_getTile(self, z, c, t, x, y, w, h, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getTile.begin(self, ((z, c, t, x, y, w, h), _response, _ex, _sent, _ctx))

        '''Retrieves a tile from this pixel buffer.
Arguments:
    z offset across the Z-axis of the pixel buffer.
    c offset across the C-axis of the pixel buffer.
    t offset across the T-axis of the pixel buffer.
    x Top left corner of the tile, X offset.
    y Top left corner of the tile, Y offset.
    w Width of the tile.
    h Height of the tile.
Returns:
    buffer containing the data.'''
        def end_getTile(self, _r):
            return _M_omero.api.RawPixelsStore._op_getTile.end(self, _r)

        '''Retrieves a tile from this pixel buffer.
Arguments:
    z offset across the Z-axis of the pixel buffer.
    c offset across the C-axis of the pixel buffer.
    t offset across the T-axis of the pixel buffer.
    x Top left corner of the tile, X offset.
    y Top left corner of the tile, Y offset.
    w Width of the tile.
    h Height of the tile.
Returns:
    buffer containing the data.'''
        def getTile_async(self, _cb, z, c, t, x, y, w, h, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getTile.invokeAsync(self, (_cb, (z, c, t, x, y, w, h), _ctx))

        '''Retrieves a n-dimensional block from this pixel store.
Arguments:
    start offset for each dimension within pixel store.
    size of each dimension (dependent on dimension).
    step needed of each dimension (dependent on dimension).
Returns:
    buffer containing the data.'''
        def getHypercube(self, offset, size, step, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getHypercube.invoke(self, ((offset, size, step), _ctx))

        '''Retrieves a n-dimensional block from this pixel store.
Arguments:
    start offset for each dimension within pixel store.
    size of each dimension (dependent on dimension).
    step needed of each dimension (dependent on dimension).
Returns:
    buffer containing the data.'''
        def begin_getHypercube(self, offset, size, step, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getHypercube.begin(self, ((offset, size, step), _response, _ex, _sent, _ctx))

        '''Retrieves a n-dimensional block from this pixel store.
Arguments:
    start offset for each dimension within pixel store.
    size of each dimension (dependent on dimension).
    step needed of each dimension (dependent on dimension).
Returns:
    buffer containing the data.'''
        def end_getHypercube(self, _r):
            return _M_omero.api.RawPixelsStore._op_getHypercube.end(self, _r)

        '''Retrieves a n-dimensional block from this pixel store.
Arguments:
    start offset for each dimension within pixel store.
    size of each dimension (dependent on dimension).
    step needed of each dimension (dependent on dimension).
Returns:
    buffer containing the data.'''
        def getHypercube_async(self, _cb, offset, size, step, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getHypercube.invokeAsync(self, (_cb, (offset, size, step), _ctx))

        '''Retrieves a region from this pixel store.
Arguments:
    size byte width of the region to retrieve.
    offset offset within the pixel store.
Returns:
    buffer containing the data.'''
        def getRegion(self, size, offset, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getRegion.invoke(self, ((size, offset), _ctx))

        '''Retrieves a region from this pixel store.
Arguments:
    size byte width of the region to retrieve.
    offset offset within the pixel store.
Returns:
    buffer containing the data.'''
        def begin_getRegion(self, size, offset, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getRegion.begin(self, ((size, offset), _response, _ex, _sent, _ctx))

        '''Retrieves a region from this pixel store.
Arguments:
    size byte width of the region to retrieve.
    offset offset within the pixel store.
Returns:
    buffer containing the data.'''
        def end_getRegion(self, _r):
            return _M_omero.api.RawPixelsStore._op_getRegion.end(self, _r)

        '''Retrieves a region from this pixel store.
Arguments:
    size byte width of the region to retrieve.
    offset offset within the pixel store.
Returns:
    buffer containing the data.'''
        def getRegion_async(self, _cb, size, offset, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getRegion.invokeAsync(self, (_cb, (size, offset), _ctx))

        '''Retrieves a particular row or scanline from this pixel store.
Arguments:
    y offset across the Y-axis of the pixel store.
    z offset across the Z-axis of the pixel store.
    c offset across the C-axis of the pixel store.
    t offset across the T-axis of the pixel store.
Returns:
    buffer containing the data which comprises this row or scanline.'''
        def getRow(self, y, z, c, t, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getRow.invoke(self, ((y, z, c, t), _ctx))

        '''Retrieves a particular row or scanline from this pixel store.
Arguments:
    y offset across the Y-axis of the pixel store.
    z offset across the Z-axis of the pixel store.
    c offset across the C-axis of the pixel store.
    t offset across the T-axis of the pixel store.
Returns:
    buffer containing the data which comprises this row or scanline.'''
        def begin_getRow(self, y, z, c, t, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getRow.begin(self, ((y, z, c, t), _response, _ex, _sent, _ctx))

        '''Retrieves a particular row or scanline from this pixel store.
Arguments:
    y offset across the Y-axis of the pixel store.
    z offset across the Z-axis of the pixel store.
    c offset across the C-axis of the pixel store.
    t offset across the T-axis of the pixel store.
Returns:
    buffer containing the data which comprises this row or scanline.'''
        def end_getRow(self, _r):
            return _M_omero.api.RawPixelsStore._op_getRow.end(self, _r)

        '''Retrieves a particular row or scanline from this pixel store.
Arguments:
    y offset across the Y-axis of the pixel store.
    z offset across the Z-axis of the pixel store.
    c offset across the C-axis of the pixel store.
    t offset across the T-axis of the pixel store.
Returns:
    buffer containing the data which comprises this row or scanline.'''
        def getRow_async(self, _cb, y, z, c, t, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getRow.invokeAsync(self, (_cb, (y, z, c, t), _ctx))

        '''Retrieves a particular column from this pixel store.
Arguments:
    x offset across the X-axis of the pixel store.
    z offset across the Z-axis of the pixel store.
    c offset across the C-axis of the pixel store.
    t offset across the T-axis of the pixel store.
Returns:
    buffer containing the data which comprises this column.'''
        def getCol(self, x, z, c, t, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getCol.invoke(self, ((x, z, c, t), _ctx))

        '''Retrieves a particular column from this pixel store.
Arguments:
    x offset across the X-axis of the pixel store.
    z offset across the Z-axis of the pixel store.
    c offset across the C-axis of the pixel store.
    t offset across the T-axis of the pixel store.
Returns:
    buffer containing the data which comprises this column.'''
        def begin_getCol(self, x, z, c, t, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getCol.begin(self, ((x, z, c, t), _response, _ex, _sent, _ctx))

        '''Retrieves a particular column from this pixel store.
Arguments:
    x offset across the X-axis of the pixel store.
    z offset across the Z-axis of the pixel store.
    c offset across the C-axis of the pixel store.
    t offset across the T-axis of the pixel store.
Returns:
    buffer containing the data which comprises this column.'''
        def end_getCol(self, _r):
            return _M_omero.api.RawPixelsStore._op_getCol.end(self, _r)

        '''Retrieves a particular column from this pixel store.
Arguments:
    x offset across the X-axis of the pixel store.
    z offset across the Z-axis of the pixel store.
    c offset across the C-axis of the pixel store.
    t offset across the T-axis of the pixel store.
Returns:
    buffer containing the data which comprises this column.'''
        def getCol_async(self, _cb, x, z, c, t, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getCol.invokeAsync(self, (_cb, (x, z, c, t), _ctx))

        '''Retrieves a particular 2D image plane from this pixel store.
Arguments:
    z offset across the Z-axis of the pixel store.
    c offset across the C-axis of the pixel store.
    t offset across the T-axis of the pixel store.
Returns:
    buffer containing the data which comprises this 2D image plane.'''
        def getPlane(self, z, c, t, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getPlane.invoke(self, ((z, c, t), _ctx))

        '''Retrieves a particular 2D image plane from this pixel store.
Arguments:
    z offset across the Z-axis of the pixel store.
    c offset across the C-axis of the pixel store.
    t offset across the T-axis of the pixel store.
Returns:
    buffer containing the data which comprises this 2D image plane.'''
        def begin_getPlane(self, z, c, t, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getPlane.begin(self, ((z, c, t), _response, _ex, _sent, _ctx))

        '''Retrieves a particular 2D image plane from this pixel store.
Arguments:
    z offset across the Z-axis of the pixel store.
    c offset across the C-axis of the pixel store.
    t offset across the T-axis of the pixel store.
Returns:
    buffer containing the data which comprises this 2D image plane.'''
        def end_getPlane(self, _r):
            return _M_omero.api.RawPixelsStore._op_getPlane.end(self, _r)

        '''Retrieves a particular 2D image plane from this pixel store.
Arguments:
    z offset across the Z-axis of the pixel store.
    c offset across the C-axis of the pixel store.
    t offset across the T-axis of the pixel store.
Returns:
    buffer containing the data which comprises this 2D image plane.'''
        def getPlane_async(self, _cb, z, c, t, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getPlane.invokeAsync(self, (_cb, (z, c, t), _ctx))

        '''Retrieves a region from a given plane from this pixel store.
Arguments:
    z offset across the Z-axis of the pixel store.
    c offset across the C-axis of the pixel store.
    t offset across the T-axis of the pixel store.
    count the number of pixels to retrieve.
    offset the offset at which to retrieve count pixels.
Returns:
    buffer containing the data which comprises the region of the
given 2D image plane. It is guaranteed that this buffer will have been
byte swapped.'''
        def getPlaneRegion(self, z, c, t, size, offset, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getPlaneRegion.invoke(self, ((z, c, t, size, offset), _ctx))

        '''Retrieves a region from a given plane from this pixel store.
Arguments:
    z offset across the Z-axis of the pixel store.
    c offset across the C-axis of the pixel store.
    t offset across the T-axis of the pixel store.
    count the number of pixels to retrieve.
    offset the offset at which to retrieve count pixels.
Returns:
    buffer containing the data which comprises the region of the
given 2D image plane. It is guaranteed that this buffer will have been
byte swapped.'''
        def begin_getPlaneRegion(self, z, c, t, size, offset, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getPlaneRegion.begin(self, ((z, c, t, size, offset), _response, _ex, _sent, _ctx))

        '''Retrieves a region from a given plane from this pixel store.
Arguments:
    z offset across the Z-axis of the pixel store.
    c offset across the C-axis of the pixel store.
    t offset across the T-axis of the pixel store.
    count the number of pixels to retrieve.
    offset the offset at which to retrieve count pixels.
Returns:
    buffer containing the data which comprises the region of the
given 2D image plane. It is guaranteed that this buffer will have been
byte swapped.'''
        def end_getPlaneRegion(self, _r):
            return _M_omero.api.RawPixelsStore._op_getPlaneRegion.end(self, _r)

        '''Retrieves a region from a given plane from this pixel store.
Arguments:
    z offset across the Z-axis of the pixel store.
    c offset across the C-axis of the pixel store.
    t offset across the T-axis of the pixel store.
    count the number of pixels to retrieve.
    offset the offset at which to retrieve count pixels.
Returns:
    buffer containing the data which comprises the region of the
given 2D image plane. It is guaranteed that this buffer will have been
byte swapped.'''
        def getPlaneRegion_async(self, _cb, z, c, t, size, offset, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getPlaneRegion.invokeAsync(self, (_cb, (z, c, t, size, offset), _ctx))

        '''Retrieves the the entire number of optical sections for a single
wavelength or channel at a particular timepoint in this pixel store.
Arguments:
    c offset across the C-axis of the pixel store.
    t offset across the T-axis of the pixel store.
Returns:
    buffer containing the data which comprises this stack.'''
        def getStack(self, c, t, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getStack.invoke(self, ((c, t), _ctx))

        '''Retrieves the the entire number of optical sections for a single
wavelength or channel at a particular timepoint in this pixel store.
Arguments:
    c offset across the C-axis of the pixel store.
    t offset across the T-axis of the pixel store.
Returns:
    buffer containing the data which comprises this stack.'''
        def begin_getStack(self, c, t, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getStack.begin(self, ((c, t), _response, _ex, _sent, _ctx))

        '''Retrieves the the entire number of optical sections for a single
wavelength or channel at a particular timepoint in this pixel store.
Arguments:
    c offset across the C-axis of the pixel store.
    t offset across the T-axis of the pixel store.
Returns:
    buffer containing the data which comprises this stack.'''
        def end_getStack(self, _r):
            return _M_omero.api.RawPixelsStore._op_getStack.end(self, _r)

        '''Retrieves the the entire number of optical sections for a single
wavelength or channel at a particular timepoint in this pixel store.
Arguments:
    c offset across the C-axis of the pixel store.
    t offset across the T-axis of the pixel store.
Returns:
    buffer containing the data which comprises this stack.'''
        def getStack_async(self, _cb, c, t, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getStack.invokeAsync(self, (_cb, (c, t), _ctx))

        '''Retrieves the entire number of optical sections for all
wavelengths or channels at a particular timepoint in this pixel store.
Arguments:
    t offset across the T-axis of the pixel store.'''
        def getTimepoint(self, t, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getTimepoint.invoke(self, ((t, ), _ctx))

        '''Retrieves the entire number of optical sections for all
wavelengths or channels at a particular timepoint in this pixel store.
Arguments:
    t offset across the T-axis of the pixel store.'''
        def begin_getTimepoint(self, t, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getTimepoint.begin(self, ((t, ), _response, _ex, _sent, _ctx))

        '''Retrieves the entire number of optical sections for all
wavelengths or channels at a particular timepoint in this pixel store.
Arguments:
    t offset across the T-axis of the pixel store.'''
        def end_getTimepoint(self, _r):
            return _M_omero.api.RawPixelsStore._op_getTimepoint.end(self, _r)

        '''Retrieves the entire number of optical sections for all
wavelengths or channels at a particular timepoint in this pixel store.
Arguments:
    t offset across the T-axis of the pixel store.'''
        def getTimepoint_async(self, _cb, t, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getTimepoint.invokeAsync(self, (_cb, (t, ), _ctx))

        '''Sets a tile in this pixel buffer.
Arguments:
    buf A byte array of the data.
    z offset across the Z-axis of the pixel buffer.
    c offset across the C-axis of the pixel buffer.
    t offset across the T-axis of the pixel buffer.
    x Top left corner of the tile, X offset.
    y Top left corner of the tile, Y offset.
    w Width of the tile.
    h Height of the tile.
Exceptions:
    IOException if there is a problem writing to the pixel buffer.
    BufferOverflowException if an attempt is made to write off the
end of the file.

See "read-only caveat" under [RawPixelsStore]'''
        def setTile(self, buf, z, c, t, x, y, w, h, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_setTile.invoke(self, ((buf, z, c, t, x, y, w, h), _ctx))

        '''Sets a tile in this pixel buffer.
Arguments:
    buf A byte array of the data.
    z offset across the Z-axis of the pixel buffer.
    c offset across the C-axis of the pixel buffer.
    t offset across the T-axis of the pixel buffer.
    x Top left corner of the tile, X offset.
    y Top left corner of the tile, Y offset.
    w Width of the tile.
    h Height of the tile.
Exceptions:
    IOException if there is a problem writing to the pixel buffer.
    BufferOverflowException if an attempt is made to write off the
end of the file.

See "read-only caveat" under [RawPixelsStore]'''
        def begin_setTile(self, buf, z, c, t, x, y, w, h, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_setTile.begin(self, ((buf, z, c, t, x, y, w, h), _response, _ex, _sent, _ctx))

        '''Sets a tile in this pixel buffer.
Arguments:
    buf A byte array of the data.
    z offset across the Z-axis of the pixel buffer.
    c offset across the C-axis of the pixel buffer.
    t offset across the T-axis of the pixel buffer.
    x Top left corner of the tile, X offset.
    y Top left corner of the tile, Y offset.
    w Width of the tile.
    h Height of the tile.
Exceptions:
    IOException if there is a problem writing to the pixel buffer.
    BufferOverflowException if an attempt is made to write off the
end of the file.

See "read-only caveat" under [RawPixelsStore]'''
        def end_setTile(self, _r):
            return _M_omero.api.RawPixelsStore._op_setTile.end(self, _r)

        '''Sets a tile in this pixel buffer.
Arguments:
    buf A byte array of the data.
    z offset across the Z-axis of the pixel buffer.
    c offset across the C-axis of the pixel buffer.
    t offset across the T-axis of the pixel buffer.
    x Top left corner of the tile, X offset.
    y Top left corner of the tile, Y offset.
    w Width of the tile.
    h Height of the tile.
Exceptions:
    IOException if there is a problem writing to the pixel buffer.
    BufferOverflowException if an attempt is made to write off the
end of the file.

See "read-only caveat" under [RawPixelsStore]'''
        def setTile_async(self, _cb, buf, z, c, t, x, y, w, h, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_setTile.invokeAsync(self, (_cb, (buf, z, c, t, x, y, w, h), _ctx))

        '''Sets a region in this pixel buffer.
Arguments:
    size byte width of the region to set.
    offset offset within the pixel buffer.
    buf a byte array of the data.

See "read-only caveat" under [RawPixelsStore]'''
        def setRegion(self, size, offset, buf, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_setRegion.invoke(self, ((size, offset, buf), _ctx))

        '''Sets a region in this pixel buffer.
Arguments:
    size byte width of the region to set.
    offset offset within the pixel buffer.
    buf a byte array of the data.

See "read-only caveat" under [RawPixelsStore]'''
        def begin_setRegion(self, size, offset, buf, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_setRegion.begin(self, ((size, offset, buf), _response, _ex, _sent, _ctx))

        '''Sets a region in this pixel buffer.
Arguments:
    size byte width of the region to set.
    offset offset within the pixel buffer.
    buf a byte array of the data.

See "read-only caveat" under [RawPixelsStore]'''
        def end_setRegion(self, _r):
            return _M_omero.api.RawPixelsStore._op_setRegion.end(self, _r)

        '''Sets a region in this pixel buffer.
Arguments:
    size byte width of the region to set.
    offset offset within the pixel buffer.
    buf a byte array of the data.

See "read-only caveat" under [RawPixelsStore]'''
        def setRegion_async(self, _cb, size, offset, buf, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_setRegion.invokeAsync(self, (_cb, (size, offset, buf), _ctx))

        '''Sets a particular row or scanline in this pixel store.
Arguments:
    buf a byte array of the data comprising this row or scanline.
    y offset across the Y-axis of the pixel store.
    z offset across the Z-axis of the pixel store.
    c offset across the C-axis of the pixel store.
    t offset across the T-axis of the pixel store.

See "read-only caveat" under [RawPixelsStore]'''
        def setRow(self, buf, y, z, c, t, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_setRow.invoke(self, ((buf, y, z, c, t), _ctx))

        '''Sets a particular row or scanline in this pixel store.
Arguments:
    buf a byte array of the data comprising this row or scanline.
    y offset across the Y-axis of the pixel store.
    z offset across the Z-axis of the pixel store.
    c offset across the C-axis of the pixel store.
    t offset across the T-axis of the pixel store.

See "read-only caveat" under [RawPixelsStore]'''
        def begin_setRow(self, buf, y, z, c, t, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_setRow.begin(self, ((buf, y, z, c, t), _response, _ex, _sent, _ctx))

        '''Sets a particular row or scanline in this pixel store.
Arguments:
    buf a byte array of the data comprising this row or scanline.
    y offset across the Y-axis of the pixel store.
    z offset across the Z-axis of the pixel store.
    c offset across the C-axis of the pixel store.
    t offset across the T-axis of the pixel store.

See "read-only caveat" under [RawPixelsStore]'''
        def end_setRow(self, _r):
            return _M_omero.api.RawPixelsStore._op_setRow.end(self, _r)

        '''Sets a particular row or scanline in this pixel store.
Arguments:
    buf a byte array of the data comprising this row or scanline.
    y offset across the Y-axis of the pixel store.
    z offset across the Z-axis of the pixel store.
    c offset across the C-axis of the pixel store.
    t offset across the T-axis of the pixel store.

See "read-only caveat" under [RawPixelsStore]'''
        def setRow_async(self, _cb, buf, y, z, c, t, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_setRow.invokeAsync(self, (_cb, (buf, y, z, c, t), _ctx))

        '''Sets a particular 2D image plane in this pixel store.
Arguments:
    buf a byte array of the data comprising this 2D image plane.
    z offset across the Z-axis of the pixel store.
    c offset across the C-axis of the pixel store.
    t offset across the T-axis of the pixel store.

See "read-only caveat" under [RawPixelsStore]'''
        def setPlane(self, buf, z, c, t, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_setPlane.invoke(self, ((buf, z, c, t), _ctx))

        '''Sets a particular 2D image plane in this pixel store.
Arguments:
    buf a byte array of the data comprising this 2D image plane.
    z offset across the Z-axis of the pixel store.
    c offset across the C-axis of the pixel store.
    t offset across the T-axis of the pixel store.

See "read-only caveat" under [RawPixelsStore]'''
        def begin_setPlane(self, buf, z, c, t, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_setPlane.begin(self, ((buf, z, c, t), _response, _ex, _sent, _ctx))

        '''Sets a particular 2D image plane in this pixel store.
Arguments:
    buf a byte array of the data comprising this 2D image plane.
    z offset across the Z-axis of the pixel store.
    c offset across the C-axis of the pixel store.
    t offset across the T-axis of the pixel store.

See "read-only caveat" under [RawPixelsStore]'''
        def end_setPlane(self, _r):
            return _M_omero.api.RawPixelsStore._op_setPlane.end(self, _r)

        '''Sets a particular 2D image plane in this pixel store.
Arguments:
    buf a byte array of the data comprising this 2D image plane.
    z offset across the Z-axis of the pixel store.
    c offset across the C-axis of the pixel store.
    t offset across the T-axis of the pixel store.

See "read-only caveat" under [RawPixelsStore]'''
        def setPlane_async(self, _cb, buf, z, c, t, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_setPlane.invokeAsync(self, (_cb, (buf, z, c, t), _ctx))

        '''Sets the entire number of optical sections for a single
wavelength or channel at a particular timepoint in this pixel store.
Arguments:
    buf a byte array of the data comprising this stack.
    c offset across the C-axis of the pixel store.
    t offset across the T-axis of the pixel store.

See "read-only caveat" under [RawPixelsStore]'''
        def setStack(self, buf, z, c, t, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_setStack.invoke(self, ((buf, z, c, t), _ctx))

        '''Sets the entire number of optical sections for a single
wavelength or channel at a particular timepoint in this pixel store.
Arguments:
    buf a byte array of the data comprising this stack.
    c offset across the C-axis of the pixel store.
    t offset across the T-axis of the pixel store.

See "read-only caveat" under [RawPixelsStore]'''
        def begin_setStack(self, buf, z, c, t, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_setStack.begin(self, ((buf, z, c, t), _response, _ex, _sent, _ctx))

        '''Sets the entire number of optical sections for a single
wavelength or channel at a particular timepoint in this pixel store.
Arguments:
    buf a byte array of the data comprising this stack.
    c offset across the C-axis of the pixel store.
    t offset across the T-axis of the pixel store.

See "read-only caveat" under [RawPixelsStore]'''
        def end_setStack(self, _r):
            return _M_omero.api.RawPixelsStore._op_setStack.end(self, _r)

        '''Sets the entire number of optical sections for a single
wavelength or channel at a particular timepoint in this pixel store.
Arguments:
    buf a byte array of the data comprising this stack.
    c offset across the C-axis of the pixel store.
    t offset across the T-axis of the pixel store.

See "read-only caveat" under [RawPixelsStore]'''
        def setStack_async(self, _cb, buf, z, c, t, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_setStack.invokeAsync(self, (_cb, (buf, z, c, t), _ctx))

        '''Sets the entire number of optical sections for all
wavelengths or channels at a particular timepoint in this pixel store.
Arguments:
    buf a byte array of the data comprising this timepoint.
    t offset across the T-axis of the pixel buffer.

See "read-only caveat" under [RawPixelsStore]'''
        def setTimepoint(self, buf, t, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_setTimepoint.invoke(self, ((buf, t), _ctx))

        '''Sets the entire number of optical sections for all
wavelengths or channels at a particular timepoint in this pixel store.
Arguments:
    buf a byte array of the data comprising this timepoint.
    t offset across the T-axis of the pixel buffer.

See "read-only caveat" under [RawPixelsStore]'''
        def begin_setTimepoint(self, buf, t, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_setTimepoint.begin(self, ((buf, t), _response, _ex, _sent, _ctx))

        '''Sets the entire number of optical sections for all
wavelengths or channels at a particular timepoint in this pixel store.
Arguments:
    buf a byte array of the data comprising this timepoint.
    t offset across the T-axis of the pixel buffer.

See "read-only caveat" under [RawPixelsStore]'''
        def end_setTimepoint(self, _r):
            return _M_omero.api.RawPixelsStore._op_setTimepoint.end(self, _r)

        '''Sets the entire number of optical sections for all
wavelengths or channels at a particular timepoint in this pixel store.
Arguments:
    buf a byte array of the data comprising this timepoint.
    t offset across the T-axis of the pixel buffer.

See "read-only caveat" under [RawPixelsStore]'''
        def setTimepoint_async(self, _cb, buf, t, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_setTimepoint.invokeAsync(self, (_cb, (buf, t), _ctx))

        '''Returns the byte width for the pixel store.
Returns:
    See above.'''
        def getByteWidth(self, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getByteWidth.invoke(self, ((), _ctx))

        '''Returns the byte width for the pixel store.
Returns:
    See above.'''
        def begin_getByteWidth(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getByteWidth.begin(self, ((), _response, _ex, _sent, _ctx))

        '''Returns the byte width for the pixel store.
Returns:
    See above.'''
        def end_getByteWidth(self, _r):
            return _M_omero.api.RawPixelsStore._op_getByteWidth.end(self, _r)

        '''Returns the byte width for the pixel store.
Returns:
    See above.'''
        def getByteWidth_async(self, _cb, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_getByteWidth.invokeAsync(self, (_cb, (), _ctx))

        '''Returns whether or not the pixel store has signed pixels.
Returns:
    See above.'''
        def isSigned(self, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_isSigned.invoke(self, ((), _ctx))

        '''Returns whether or not the pixel store has signed pixels.
Returns:
    See above.'''
        def begin_isSigned(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_isSigned.begin(self, ((), _response, _ex, _sent, _ctx))

        '''Returns whether or not the pixel store has signed pixels.
Returns:
    See above.'''
        def end_isSigned(self, _r):
            return _M_omero.api.RawPixelsStore._op_isSigned.end(self, _r)

        '''Returns whether or not the pixel store has signed pixels.
Returns:
    See above.'''
        def isSigned_async(self, _cb, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_isSigned.invokeAsync(self, (_cb, (), _ctx))

        '''Returns whether or not the pixel buffer has floating point pixels.
Returns:'''
        def isFloat(self, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_isFloat.invoke(self, ((), _ctx))

        '''Returns whether or not the pixel buffer has floating point pixels.
Returns:'''
        def begin_isFloat(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_isFloat.begin(self, ((), _response, _ex, _sent, _ctx))

        '''Returns whether or not the pixel buffer has floating point pixels.
Returns:'''
        def end_isFloat(self, _r):
            return _M_omero.api.RawPixelsStore._op_isFloat.end(self, _r)

        '''Returns whether or not the pixel buffer has floating point pixels.
Returns:'''
        def isFloat_async(self, _cb, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_isFloat.invokeAsync(self, (_cb, (), _ctx))

        '''Calculates a SHA-1 message digest for the entire pixel store.
Returns:
    byte array containing the message digest.'''
        def calculateMessageDigest(self, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_calculateMessageDigest.invoke(self, ((), _ctx))

        '''Calculates a SHA-1 message digest for the entire pixel store.
Returns:
    byte array containing the message digest.'''
        def begin_calculateMessageDigest(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_calculateMessageDigest.begin(self, ((), _response, _ex, _sent, _ctx))

        '''Calculates a SHA-1 message digest for the entire pixel store.
Returns:
    byte array containing the message digest.'''
        def end_calculateMessageDigest(self, _r):
            return _M_omero.api.RawPixelsStore._op_calculateMessageDigest.end(self, _r)

        '''Calculates a SHA-1 message digest for the entire pixel store.
Returns:
    byte array containing the message digest.'''
        def calculateMessageDigest_async(self, _cb, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_calculateMessageDigest.invokeAsync(self, (_cb, (), _ctx))

        '''Save the current state of the pixels, updating the SHA1. This should
only be called AFTER all data is successfully set. Future invocations
of set methods may be disallowed. This read-only status will allow
background processing (generation of thumbnails, compression, etc)
to begin. More information under [RawPixelsStore].

A null instance will be returned if no save was performed.'''
        def save(self, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_save.invoke(self, ((), _ctx))

        '''Save the current state of the pixels, updating the SHA1. This should
only be called AFTER all data is successfully set. Future invocations
of set methods may be disallowed. This read-only status will allow
background processing (generation of thumbnails, compression, etc)
to begin. More information under [RawPixelsStore].

A null instance will be returned if no save was performed.'''
        def begin_save(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_save.begin(self, ((), _response, _ex, _sent, _ctx))

        '''Save the current state of the pixels, updating the SHA1. This should
only be called AFTER all data is successfully set. Future invocations
of set methods may be disallowed. This read-only status will allow
background processing (generation of thumbnails, compression, etc)
to begin. More information under [RawPixelsStore].

A null instance will be returned if no save was performed.'''
        def end_save(self, _r):
            return _M_omero.api.RawPixelsStore._op_save.end(self, _r)

        '''Save the current state of the pixels, updating the SHA1. This should
only be called AFTER all data is successfully set. Future invocations
of set methods may be disallowed. This read-only status will allow
background processing (generation of thumbnails, compression, etc)
to begin. More information under [RawPixelsStore].

A null instance will be returned if no save was performed.'''
        def save_async(self, _cb, _ctx=None):
            return _M_omero.api.RawPixelsStore._op_save.invokeAsync(self, (_cb, (), _ctx))

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_omero.api.RawPixelsStorePrx.ice_checkedCast(proxy, '::omero::api::RawPixelsStore', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_omero.api.RawPixelsStorePrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_omero.api._t_RawPixelsStorePrx = IcePy.defineProxy('::omero::api::RawPixelsStore', RawPixelsStorePrx)

    _M_omero.api._t_RawPixelsStore = IcePy.defineClass('::omero::api::RawPixelsStore', RawPixelsStore, -1, (), True, False, None, (_M_omero.api._t_PyramidService,), ())
    RawPixelsStore._ice_type = _M_omero.api._t_RawPixelsStore

    RawPixelsStore._op_setPixelsId = IcePy.Operation('setPixelsId', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), IcePy._t_long, False, 0), ((), IcePy._t_bool, False, 0)), (), None, (_M_omero._t_ServerError,))
    RawPixelsStore._op_getPixelsId = IcePy.Operation('getPixelsId', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, True, None, (), (), (), ((), IcePy._t_long, False, 0), (_M_omero._t_ServerError,))
    RawPixelsStore._op_getPixelsPath = IcePy.Operation('getPixelsPath', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, True, None, (), (), (), ((), IcePy._t_string, False, 0), (_M_omero._t_ServerError,))
    RawPixelsStore._op_prepare = IcePy.Operation('prepare', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, True, None, (), (((), _M_omero.sys._t_LongList, False, 0),), (), None, (_M_omero._t_ServerError,))
    RawPixelsStore._op_getPlaneSize = IcePy.Operation('getPlaneSize', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, True, None, (), (), (), ((), IcePy._t_long, False, 0), (_M_omero._t_ServerError,))
    RawPixelsStore._op_getRowSize = IcePy.Operation('getRowSize', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, True, None, (), (), (), ((), IcePy._t_int, False, 0), (_M_omero._t_ServerError,))
    RawPixelsStore._op_getStackSize = IcePy.Operation('getStackSize', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, True, None, (), (), (), ((), IcePy._t_long, False, 0), (_M_omero._t_ServerError,))
    RawPixelsStore._op_getTimepointSize = IcePy.Operation('getTimepointSize', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, True, None, (), (), (), ((), IcePy._t_long, False, 0), (_M_omero._t_ServerError,))
    RawPixelsStore._op_getTotalSize = IcePy.Operation('getTotalSize', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, True, None, (), (), (), ((), IcePy._t_long, False, 0), (_M_omero._t_ServerError,))
    RawPixelsStore._op_getRowOffset = IcePy.Operation('getRowOffset', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, True, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), IcePy._t_long, False, 0), (_M_omero._t_ServerError,))
    RawPixelsStore._op_getPlaneOffset = IcePy.Operation('getPlaneOffset', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, True, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), IcePy._t_long, False, 0), (_M_omero._t_ServerError,))
    RawPixelsStore._op_getStackOffset = IcePy.Operation('getStackOffset', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, True, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), IcePy._t_long, False, 0), (_M_omero._t_ServerError,))
    RawPixelsStore._op_getTimepointOffset = IcePy.Operation('getTimepointOffset', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, True, None, (), (((), IcePy._t_int, False, 0),), (), ((), IcePy._t_long, False, 0), (_M_omero._t_ServerError,))
    RawPixelsStore._op_getTile = IcePy.Operation('getTile', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, True, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_Ice._t_ByteSeq, False, 0), (_M_omero._t_ServerError,))
    RawPixelsStore._op_getHypercube = IcePy.Operation('getHypercube', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, True, None, (), (((), _M_omero.sys._t_IntList, False, 0), ((), _M_omero.sys._t_IntList, False, 0), ((), _M_omero.sys._t_IntList, False, 0)), (), ((), _M_Ice._t_ByteSeq, False, 0), (_M_omero._t_ServerError,))
    RawPixelsStore._op_getRegion = IcePy.Operation('getRegion', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, True, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_long, False, 0)), (), ((), _M_Ice._t_ByteSeq, False, 0), (_M_omero._t_ServerError,))
    RawPixelsStore._op_getRow = IcePy.Operation('getRow', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, True, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_Ice._t_ByteSeq, False, 0), (_M_omero._t_ServerError,))
    RawPixelsStore._op_getCol = IcePy.Operation('getCol', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, True, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_Ice._t_ByteSeq, False, 0), (_M_omero._t_ServerError,))
    RawPixelsStore._op_getPlane = IcePy.Operation('getPlane', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, True, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_Ice._t_ByteSeq, False, 0), (_M_omero._t_ServerError,))
    RawPixelsStore._op_getPlaneRegion = IcePy.Operation('getPlaneRegion', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, True, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_Ice._t_ByteSeq, False, 0), (_M_omero._t_ServerError,))
    RawPixelsStore._op_getStack = IcePy.Operation('getStack', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, True, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_Ice._t_ByteSeq, False, 0), (_M_omero._t_ServerError,))
    RawPixelsStore._op_getTimepoint = IcePy.Operation('getTimepoint', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, True, None, (), (((), IcePy._t_int, False, 0),), (), ((), _M_Ice._t_ByteSeq, False, 0), (_M_omero._t_ServerError,))
    RawPixelsStore._op_setTile = IcePy.Operation('setTile', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, True, None, (), (((), _M_Ice._t_ByteSeq, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), None, (_M_omero._t_ServerError,))
    RawPixelsStore._op_setRegion = IcePy.Operation('setRegion', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, True, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_long, False, 0), ((), _M_Ice._t_ByteSeq, False, 0)), (), None, (_M_omero._t_ServerError,))
    RawPixelsStore._op_setRow = IcePy.Operation('setRow', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, True, None, (), (((), _M_Ice._t_ByteSeq, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), None, (_M_omero._t_ServerError,))
    RawPixelsStore._op_setPlane = IcePy.Operation('setPlane', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, True, None, (), (((), _M_Ice._t_ByteSeq, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), None, (_M_omero._t_ServerError,))
    RawPixelsStore._op_setStack = IcePy.Operation('setStack', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, True, None, (), (((), _M_Ice._t_ByteSeq, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), None, (_M_omero._t_ServerError,))
    RawPixelsStore._op_setTimepoint = IcePy.Operation('setTimepoint', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, True, None, (), (((), _M_Ice._t_ByteSeq, False, 0), ((), IcePy._t_int, False, 0)), (), None, (_M_omero._t_ServerError,))
    RawPixelsStore._op_getByteWidth = IcePy.Operation('getByteWidth', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, True, None, (), (), (), ((), IcePy._t_int, False, 0), (_M_omero._t_ServerError,))
    RawPixelsStore._op_isSigned = IcePy.Operation('isSigned', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, True, None, (), (), (), ((), IcePy._t_bool, False, 0), (_M_omero._t_ServerError,))
    RawPixelsStore._op_isFloat = IcePy.Operation('isFloat', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, True, None, (), (), (), ((), IcePy._t_bool, False, 0), (_M_omero._t_ServerError,))
    RawPixelsStore._op_calculateMessageDigest = IcePy.Operation('calculateMessageDigest', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, True, None, (), (), (), ((), _M_Ice._t_ByteSeq, False, 0), (_M_omero._t_ServerError,))
    RawPixelsStore._op_save = IcePy.Operation('save', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, True, None, (), (), (), ((), _M_omero.model._t_Pixels, False, 0), (_M_omero._t_ServerError,))

    _M_omero.api.RawPixelsStore = RawPixelsStore
    del RawPixelsStore

    _M_omero.api.RawPixelsStorePrx = RawPixelsStorePrx
    del RawPixelsStorePrx

# End of module omero.api

__name__ = 'omero'

# End of module omero
