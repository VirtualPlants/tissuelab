# **********************************************************************
#
# Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.5.1
#
# <auto-generated>
#
# Generated from file `IShare.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy
import omero_ModelF_ice
import omero_ServicesF_ice
import omero_Collections_ice

# Included module omero
_M_omero = Ice.openModule('omero')

# Included module omero.model
_M_omero.model = Ice.openModule('omero.model')

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Included module Glacier2
_M_Glacier2 = Ice.openModule('Glacier2')

# Included module omero.sys
_M_omero.sys = Ice.openModule('omero.sys')

# Included module omero.api
_M_omero.api = Ice.openModule('omero.api')

# Included module omero.grid
_M_omero.grid = Ice.openModule('omero.grid')

# Start of module omero
__name__ = 'omero'

# Start of module omero.api
__name__ = 'omero.api'

if 'IShare' not in _M_omero.api.__dict__:
    _M_omero.api.IShare = Ice.createTempClass()
    class IShare(_M_omero.api.ServiceInterface):
        '''See IShare.html'''
        def __init__(self):
            if Ice.getType(self) == _M_omero.api.IShare:
                raise RuntimeError('omero.api.IShare is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::omero::api::IShare', '::omero::api::ServiceInterface')

        def ice_id(self, current=None):
            return '::omero::api::IShare'

        def ice_staticId():
            return '::omero::api::IShare'
        ice_staticId = staticmethod(ice_staticId)

        def activate_async(self, _cb, shareId, current=None):
            pass

        def deactivate_async(self, _cb, current=None):
            pass

        def getShare_async(self, _cb, shareId, current=None):
            pass

        def getMemberCount_async(self, _cb, shareIds, current=None):
            pass

        def getOwnShares_async(self, _cb, active, current=None):
            pass

        def getMemberShares_async(self, _cb, active, current=None):
            pass

        def getSharesOwnedBy_async(self, _cb, user, active, current=None):
            pass

        def getMemberSharesFor_async(self, _cb, user, active, current=None):
            pass

        def getContents_async(self, _cb, shareId, current=None):
            pass

        def getContentSubList_async(self, _cb, shareId, start, finish, current=None):
            pass

        def getContentSize_async(self, _cb, shareId, current=None):
            pass

        def getContentMap_async(self, _cb, shareId, current=None):
            pass

        def createShare_async(self, _cb, description, expiration, items, exps, guests, enabled, current=None):
            pass

        def setDescription_async(self, _cb, shareId, description, current=None):
            pass

        def setExpiration_async(self, _cb, shareId, expiration, current=None):
            pass

        def setActive_async(self, _cb, shareId, active, current=None):
            pass

        def closeShare_async(self, _cb, shareId, current=None):
            pass

        def addObjects_async(self, _cb, shareId, iobjects, current=None):
            pass

        def addObject_async(self, _cb, shareId, iobject, current=None):
            pass

        def removeObjects_async(self, _cb, shareId, iobjects, current=None):
            pass

        def removeObject_async(self, _cb, shareId, iobject, current=None):
            pass

        def getCommentCount_async(self, _cb, shareIds, current=None):
            pass

        def getComments_async(self, _cb, shareId, current=None):
            pass

        def addComment_async(self, _cb, shareId, comment, current=None):
            pass

        def addReply_async(self, _cb, shareId, comment, replyTo, current=None):
            pass

        def deleteComment_async(self, _cb, comment, current=None):
            pass

        def getAllMembers_async(self, _cb, shareId, current=None):
            pass

        def getAllGuests_async(self, _cb, shareId, current=None):
            pass

        def getAllUsers_async(self, _cb, shareId, current=None):
            pass

        def addUsers_async(self, _cb, shareId, exps, current=None):
            pass

        def addGuests_async(self, _cb, shareId, emailAddresses, current=None):
            pass

        def removeUsers_async(self, _cb, shareId, exps, current=None):
            pass

        def removeGuests_async(self, _cb, shareId, emailAddresses, current=None):
            pass

        def addUser_async(self, _cb, shareId, exp, current=None):
            pass

        def addGuest_async(self, _cb, shareId, emailAddress, current=None):
            pass

        def removeUser_async(self, _cb, shareId, exp, current=None):
            pass

        def removeGuest_async(self, _cb, shareId, emailAddress, current=None):
            pass

        def getActiveConnections_async(self, _cb, shareId, current=None):
            pass

        def getPastConnections_async(self, _cb, shareId, current=None):
            pass

        def invalidateConnection_async(self, _cb, shareId, exp, current=None):
            pass

        def getEvents_async(self, _cb, shareId, exp, _from, to, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_omero.api._t_IShare)

        __repr__ = __str__

    _M_omero.api.ISharePrx = Ice.createTempClass()
    class ISharePrx(_M_omero.api.ServiceInterfacePrx):

        def activate(self, shareId, _ctx=None):
            return _M_omero.api.IShare._op_activate.invoke(self, ((shareId, ), _ctx))

        def begin_activate(self, shareId, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.IShare._op_activate.begin(self, ((shareId, ), _response, _ex, _sent, _ctx))

        def end_activate(self, _r):
            return _M_omero.api.IShare._op_activate.end(self, _r)

        def activate_async(self, _cb, shareId, _ctx=None):
            return _M_omero.api.IShare._op_activate.invokeAsync(self, (_cb, (shareId, ), _ctx))

        def deactivate(self, _ctx=None):
            return _M_omero.api.IShare._op_deactivate.invoke(self, ((), _ctx))

        def begin_deactivate(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.IShare._op_deactivate.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_deactivate(self, _r):
            return _M_omero.api.IShare._op_deactivate.end(self, _r)

        def deactivate_async(self, _cb, _ctx=None):
            return _M_omero.api.IShare._op_deactivate.invokeAsync(self, (_cb, (), _ctx))

        def getShare(self, shareId, _ctx=None):
            return _M_omero.api.IShare._op_getShare.invoke(self, ((shareId, ), _ctx))

        def begin_getShare(self, shareId, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.IShare._op_getShare.begin(self, ((shareId, ), _response, _ex, _sent, _ctx))

        def end_getShare(self, _r):
            return _M_omero.api.IShare._op_getShare.end(self, _r)

        def getShare_async(self, _cb, shareId, _ctx=None):
            return _M_omero.api.IShare._op_getShare.invokeAsync(self, (_cb, (shareId, ), _ctx))

        def getMemberCount(self, shareIds, _ctx=None):
            return _M_omero.api.IShare._op_getMemberCount.invoke(self, ((shareIds, ), _ctx))

        def begin_getMemberCount(self, shareIds, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.IShare._op_getMemberCount.begin(self, ((shareIds, ), _response, _ex, _sent, _ctx))

        def end_getMemberCount(self, _r):
            return _M_omero.api.IShare._op_getMemberCount.end(self, _r)

        def getMemberCount_async(self, _cb, shareIds, _ctx=None):
            return _M_omero.api.IShare._op_getMemberCount.invokeAsync(self, (_cb, (shareIds, ), _ctx))

        def getOwnShares(self, active, _ctx=None):
            return _M_omero.api.IShare._op_getOwnShares.invoke(self, ((active, ), _ctx))

        def begin_getOwnShares(self, active, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.IShare._op_getOwnShares.begin(self, ((active, ), _response, _ex, _sent, _ctx))

        def end_getOwnShares(self, _r):
            return _M_omero.api.IShare._op_getOwnShares.end(self, _r)

        def getOwnShares_async(self, _cb, active, _ctx=None):
            return _M_omero.api.IShare._op_getOwnShares.invokeAsync(self, (_cb, (active, ), _ctx))

        def getMemberShares(self, active, _ctx=None):
            return _M_omero.api.IShare._op_getMemberShares.invoke(self, ((active, ), _ctx))

        def begin_getMemberShares(self, active, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.IShare._op_getMemberShares.begin(self, ((active, ), _response, _ex, _sent, _ctx))

        def end_getMemberShares(self, _r):
            return _M_omero.api.IShare._op_getMemberShares.end(self, _r)

        def getMemberShares_async(self, _cb, active, _ctx=None):
            return _M_omero.api.IShare._op_getMemberShares.invokeAsync(self, (_cb, (active, ), _ctx))

        def getSharesOwnedBy(self, user, active, _ctx=None):
            return _M_omero.api.IShare._op_getSharesOwnedBy.invoke(self, ((user, active), _ctx))

        def begin_getSharesOwnedBy(self, user, active, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.IShare._op_getSharesOwnedBy.begin(self, ((user, active), _response, _ex, _sent, _ctx))

        def end_getSharesOwnedBy(self, _r):
            return _M_omero.api.IShare._op_getSharesOwnedBy.end(self, _r)

        def getSharesOwnedBy_async(self, _cb, user, active, _ctx=None):
            return _M_omero.api.IShare._op_getSharesOwnedBy.invokeAsync(self, (_cb, (user, active), _ctx))

        def getMemberSharesFor(self, user, active, _ctx=None):
            return _M_omero.api.IShare._op_getMemberSharesFor.invoke(self, ((user, active), _ctx))

        def begin_getMemberSharesFor(self, user, active, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.IShare._op_getMemberSharesFor.begin(self, ((user, active), _response, _ex, _sent, _ctx))

        def end_getMemberSharesFor(self, _r):
            return _M_omero.api.IShare._op_getMemberSharesFor.end(self, _r)

        def getMemberSharesFor_async(self, _cb, user, active, _ctx=None):
            return _M_omero.api.IShare._op_getMemberSharesFor.invokeAsync(self, (_cb, (user, active), _ctx))

        def getContents(self, shareId, _ctx=None):
            return _M_omero.api.IShare._op_getContents.invoke(self, ((shareId, ), _ctx))

        def begin_getContents(self, shareId, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.IShare._op_getContents.begin(self, ((shareId, ), _response, _ex, _sent, _ctx))

        def end_getContents(self, _r):
            return _M_omero.api.IShare._op_getContents.end(self, _r)

        def getContents_async(self, _cb, shareId, _ctx=None):
            return _M_omero.api.IShare._op_getContents.invokeAsync(self, (_cb, (shareId, ), _ctx))

        def getContentSubList(self, shareId, start, finish, _ctx=None):
            return _M_omero.api.IShare._op_getContentSubList.invoke(self, ((shareId, start, finish), _ctx))

        def begin_getContentSubList(self, shareId, start, finish, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.IShare._op_getContentSubList.begin(self, ((shareId, start, finish), _response, _ex, _sent, _ctx))

        def end_getContentSubList(self, _r):
            return _M_omero.api.IShare._op_getContentSubList.end(self, _r)

        def getContentSubList_async(self, _cb, shareId, start, finish, _ctx=None):
            return _M_omero.api.IShare._op_getContentSubList.invokeAsync(self, (_cb, (shareId, start, finish), _ctx))

        def getContentSize(self, shareId, _ctx=None):
            return _M_omero.api.IShare._op_getContentSize.invoke(self, ((shareId, ), _ctx))

        def begin_getContentSize(self, shareId, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.IShare._op_getContentSize.begin(self, ((shareId, ), _response, _ex, _sent, _ctx))

        def end_getContentSize(self, _r):
            return _M_omero.api.IShare._op_getContentSize.end(self, _r)

        def getContentSize_async(self, _cb, shareId, _ctx=None):
            return _M_omero.api.IShare._op_getContentSize.invokeAsync(self, (_cb, (shareId, ), _ctx))

        def getContentMap(self, shareId, _ctx=None):
            return _M_omero.api.IShare._op_getContentMap.invoke(self, ((shareId, ), _ctx))

        def begin_getContentMap(self, shareId, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.IShare._op_getContentMap.begin(self, ((shareId, ), _response, _ex, _sent, _ctx))

        def end_getContentMap(self, _r):
            return _M_omero.api.IShare._op_getContentMap.end(self, _r)

        def getContentMap_async(self, _cb, shareId, _ctx=None):
            return _M_omero.api.IShare._op_getContentMap.invokeAsync(self, (_cb, (shareId, ), _ctx))

        def createShare(self, description, expiration, items, exps, guests, enabled, _ctx=None):
            return _M_omero.api.IShare._op_createShare.invoke(self, ((description, expiration, items, exps, guests, enabled), _ctx))

        def begin_createShare(self, description, expiration, items, exps, guests, enabled, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.IShare._op_createShare.begin(self, ((description, expiration, items, exps, guests, enabled), _response, _ex, _sent, _ctx))

        def end_createShare(self, _r):
            return _M_omero.api.IShare._op_createShare.end(self, _r)

        def createShare_async(self, _cb, description, expiration, items, exps, guests, enabled, _ctx=None):
            return _M_omero.api.IShare._op_createShare.invokeAsync(self, (_cb, (description, expiration, items, exps, guests, enabled), _ctx))

        def setDescription(self, shareId, description, _ctx=None):
            return _M_omero.api.IShare._op_setDescription.invoke(self, ((shareId, description), _ctx))

        def begin_setDescription(self, shareId, description, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.IShare._op_setDescription.begin(self, ((shareId, description), _response, _ex, _sent, _ctx))

        def end_setDescription(self, _r):
            return _M_omero.api.IShare._op_setDescription.end(self, _r)

        def setDescription_async(self, _cb, shareId, description, _ctx=None):
            return _M_omero.api.IShare._op_setDescription.invokeAsync(self, (_cb, (shareId, description), _ctx))

        def setExpiration(self, shareId, expiration, _ctx=None):
            return _M_omero.api.IShare._op_setExpiration.invoke(self, ((shareId, expiration), _ctx))

        def begin_setExpiration(self, shareId, expiration, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.IShare._op_setExpiration.begin(self, ((shareId, expiration), _response, _ex, _sent, _ctx))

        def end_setExpiration(self, _r):
            return _M_omero.api.IShare._op_setExpiration.end(self, _r)

        def setExpiration_async(self, _cb, shareId, expiration, _ctx=None):
            return _M_omero.api.IShare._op_setExpiration.invokeAsync(self, (_cb, (shareId, expiration), _ctx))

        def setActive(self, shareId, active, _ctx=None):
            return _M_omero.api.IShare._op_setActive.invoke(self, ((shareId, active), _ctx))

        def begin_setActive(self, shareId, active, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.IShare._op_setActive.begin(self, ((shareId, active), _response, _ex, _sent, _ctx))

        def end_setActive(self, _r):
            return _M_omero.api.IShare._op_setActive.end(self, _r)

        def setActive_async(self, _cb, shareId, active, _ctx=None):
            return _M_omero.api.IShare._op_setActive.invokeAsync(self, (_cb, (shareId, active), _ctx))

        def closeShare(self, shareId, _ctx=None):
            return _M_omero.api.IShare._op_closeShare.invoke(self, ((shareId, ), _ctx))

        def begin_closeShare(self, shareId, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.IShare._op_closeShare.begin(self, ((shareId, ), _response, _ex, _sent, _ctx))

        def end_closeShare(self, _r):
            return _M_omero.api.IShare._op_closeShare.end(self, _r)

        def closeShare_async(self, _cb, shareId, _ctx=None):
            return _M_omero.api.IShare._op_closeShare.invokeAsync(self, (_cb, (shareId, ), _ctx))

        def addObjects(self, shareId, iobjects, _ctx=None):
            return _M_omero.api.IShare._op_addObjects.invoke(self, ((shareId, iobjects), _ctx))

        def begin_addObjects(self, shareId, iobjects, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.IShare._op_addObjects.begin(self, ((shareId, iobjects), _response, _ex, _sent, _ctx))

        def end_addObjects(self, _r):
            return _M_omero.api.IShare._op_addObjects.end(self, _r)

        def addObjects_async(self, _cb, shareId, iobjects, _ctx=None):
            return _M_omero.api.IShare._op_addObjects.invokeAsync(self, (_cb, (shareId, iobjects), _ctx))

        def addObject(self, shareId, iobject, _ctx=None):
            return _M_omero.api.IShare._op_addObject.invoke(self, ((shareId, iobject), _ctx))

        def begin_addObject(self, shareId, iobject, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.IShare._op_addObject.begin(self, ((shareId, iobject), _response, _ex, _sent, _ctx))

        def end_addObject(self, _r):
            return _M_omero.api.IShare._op_addObject.end(self, _r)

        def addObject_async(self, _cb, shareId, iobject, _ctx=None):
            return _M_omero.api.IShare._op_addObject.invokeAsync(self, (_cb, (shareId, iobject), _ctx))

        def removeObjects(self, shareId, iobjects, _ctx=None):
            return _M_omero.api.IShare._op_removeObjects.invoke(self, ((shareId, iobjects), _ctx))

        def begin_removeObjects(self, shareId, iobjects, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.IShare._op_removeObjects.begin(self, ((shareId, iobjects), _response, _ex, _sent, _ctx))

        def end_removeObjects(self, _r):
            return _M_omero.api.IShare._op_removeObjects.end(self, _r)

        def removeObjects_async(self, _cb, shareId, iobjects, _ctx=None):
            return _M_omero.api.IShare._op_removeObjects.invokeAsync(self, (_cb, (shareId, iobjects), _ctx))

        def removeObject(self, shareId, iobject, _ctx=None):
            return _M_omero.api.IShare._op_removeObject.invoke(self, ((shareId, iobject), _ctx))

        def begin_removeObject(self, shareId, iobject, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.IShare._op_removeObject.begin(self, ((shareId, iobject), _response, _ex, _sent, _ctx))

        def end_removeObject(self, _r):
            return _M_omero.api.IShare._op_removeObject.end(self, _r)

        def removeObject_async(self, _cb, shareId, iobject, _ctx=None):
            return _M_omero.api.IShare._op_removeObject.invokeAsync(self, (_cb, (shareId, iobject), _ctx))

        def getCommentCount(self, shareIds, _ctx=None):
            return _M_omero.api.IShare._op_getCommentCount.invoke(self, ((shareIds, ), _ctx))

        def begin_getCommentCount(self, shareIds, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.IShare._op_getCommentCount.begin(self, ((shareIds, ), _response, _ex, _sent, _ctx))

        def end_getCommentCount(self, _r):
            return _M_omero.api.IShare._op_getCommentCount.end(self, _r)

        def getCommentCount_async(self, _cb, shareIds, _ctx=None):
            return _M_omero.api.IShare._op_getCommentCount.invokeAsync(self, (_cb, (shareIds, ), _ctx))

        def getComments(self, shareId, _ctx=None):
            return _M_omero.api.IShare._op_getComments.invoke(self, ((shareId, ), _ctx))

        def begin_getComments(self, shareId, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.IShare._op_getComments.begin(self, ((shareId, ), _response, _ex, _sent, _ctx))

        def end_getComments(self, _r):
            return _M_omero.api.IShare._op_getComments.end(self, _r)

        def getComments_async(self, _cb, shareId, _ctx=None):
            return _M_omero.api.IShare._op_getComments.invokeAsync(self, (_cb, (shareId, ), _ctx))

        def addComment(self, shareId, comment, _ctx=None):
            return _M_omero.api.IShare._op_addComment.invoke(self, ((shareId, comment), _ctx))

        def begin_addComment(self, shareId, comment, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.IShare._op_addComment.begin(self, ((shareId, comment), _response, _ex, _sent, _ctx))

        def end_addComment(self, _r):
            return _M_omero.api.IShare._op_addComment.end(self, _r)

        def addComment_async(self, _cb, shareId, comment, _ctx=None):
            return _M_omero.api.IShare._op_addComment.invokeAsync(self, (_cb, (shareId, comment), _ctx))

        def addReply(self, shareId, comment, replyTo, _ctx=None):
            return _M_omero.api.IShare._op_addReply.invoke(self, ((shareId, comment, replyTo), _ctx))

        def begin_addReply(self, shareId, comment, replyTo, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.IShare._op_addReply.begin(self, ((shareId, comment, replyTo), _response, _ex, _sent, _ctx))

        def end_addReply(self, _r):
            return _M_omero.api.IShare._op_addReply.end(self, _r)

        def addReply_async(self, _cb, shareId, comment, replyTo, _ctx=None):
            return _M_omero.api.IShare._op_addReply.invokeAsync(self, (_cb, (shareId, comment, replyTo), _ctx))

        def deleteComment(self, comment, _ctx=None):
            return _M_omero.api.IShare._op_deleteComment.invoke(self, ((comment, ), _ctx))

        def begin_deleteComment(self, comment, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.IShare._op_deleteComment.begin(self, ((comment, ), _response, _ex, _sent, _ctx))

        def end_deleteComment(self, _r):
            return _M_omero.api.IShare._op_deleteComment.end(self, _r)

        def deleteComment_async(self, _cb, comment, _ctx=None):
            return _M_omero.api.IShare._op_deleteComment.invokeAsync(self, (_cb, (comment, ), _ctx))

        def getAllMembers(self, shareId, _ctx=None):
            return _M_omero.api.IShare._op_getAllMembers.invoke(self, ((shareId, ), _ctx))

        def begin_getAllMembers(self, shareId, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.IShare._op_getAllMembers.begin(self, ((shareId, ), _response, _ex, _sent, _ctx))

        def end_getAllMembers(self, _r):
            return _M_omero.api.IShare._op_getAllMembers.end(self, _r)

        def getAllMembers_async(self, _cb, shareId, _ctx=None):
            return _M_omero.api.IShare._op_getAllMembers.invokeAsync(self, (_cb, (shareId, ), _ctx))

        def getAllGuests(self, shareId, _ctx=None):
            return _M_omero.api.IShare._op_getAllGuests.invoke(self, ((shareId, ), _ctx))

        def begin_getAllGuests(self, shareId, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.IShare._op_getAllGuests.begin(self, ((shareId, ), _response, _ex, _sent, _ctx))

        def end_getAllGuests(self, _r):
            return _M_omero.api.IShare._op_getAllGuests.end(self, _r)

        def getAllGuests_async(self, _cb, shareId, _ctx=None):
            return _M_omero.api.IShare._op_getAllGuests.invokeAsync(self, (_cb, (shareId, ), _ctx))

        def getAllUsers(self, shareId, _ctx=None):
            return _M_omero.api.IShare._op_getAllUsers.invoke(self, ((shareId, ), _ctx))

        def begin_getAllUsers(self, shareId, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.IShare._op_getAllUsers.begin(self, ((shareId, ), _response, _ex, _sent, _ctx))

        def end_getAllUsers(self, _r):
            return _M_omero.api.IShare._op_getAllUsers.end(self, _r)

        def getAllUsers_async(self, _cb, shareId, _ctx=None):
            return _M_omero.api.IShare._op_getAllUsers.invokeAsync(self, (_cb, (shareId, ), _ctx))

        def addUsers(self, shareId, exps, _ctx=None):
            return _M_omero.api.IShare._op_addUsers.invoke(self, ((shareId, exps), _ctx))

        def begin_addUsers(self, shareId, exps, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.IShare._op_addUsers.begin(self, ((shareId, exps), _response, _ex, _sent, _ctx))

        def end_addUsers(self, _r):
            return _M_omero.api.IShare._op_addUsers.end(self, _r)

        def addUsers_async(self, _cb, shareId, exps, _ctx=None):
            return _M_omero.api.IShare._op_addUsers.invokeAsync(self, (_cb, (shareId, exps), _ctx))

        def addGuests(self, shareId, emailAddresses, _ctx=None):
            return _M_omero.api.IShare._op_addGuests.invoke(self, ((shareId, emailAddresses), _ctx))

        def begin_addGuests(self, shareId, emailAddresses, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.IShare._op_addGuests.begin(self, ((shareId, emailAddresses), _response, _ex, _sent, _ctx))

        def end_addGuests(self, _r):
            return _M_omero.api.IShare._op_addGuests.end(self, _r)

        def addGuests_async(self, _cb, shareId, emailAddresses, _ctx=None):
            return _M_omero.api.IShare._op_addGuests.invokeAsync(self, (_cb, (shareId, emailAddresses), _ctx))

        def removeUsers(self, shareId, exps, _ctx=None):
            return _M_omero.api.IShare._op_removeUsers.invoke(self, ((shareId, exps), _ctx))

        def begin_removeUsers(self, shareId, exps, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.IShare._op_removeUsers.begin(self, ((shareId, exps), _response, _ex, _sent, _ctx))

        def end_removeUsers(self, _r):
            return _M_omero.api.IShare._op_removeUsers.end(self, _r)

        def removeUsers_async(self, _cb, shareId, exps, _ctx=None):
            return _M_omero.api.IShare._op_removeUsers.invokeAsync(self, (_cb, (shareId, exps), _ctx))

        def removeGuests(self, shareId, emailAddresses, _ctx=None):
            return _M_omero.api.IShare._op_removeGuests.invoke(self, ((shareId, emailAddresses), _ctx))

        def begin_removeGuests(self, shareId, emailAddresses, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.IShare._op_removeGuests.begin(self, ((shareId, emailAddresses), _response, _ex, _sent, _ctx))

        def end_removeGuests(self, _r):
            return _M_omero.api.IShare._op_removeGuests.end(self, _r)

        def removeGuests_async(self, _cb, shareId, emailAddresses, _ctx=None):
            return _M_omero.api.IShare._op_removeGuests.invokeAsync(self, (_cb, (shareId, emailAddresses), _ctx))

        def addUser(self, shareId, exp, _ctx=None):
            return _M_omero.api.IShare._op_addUser.invoke(self, ((shareId, exp), _ctx))

        def begin_addUser(self, shareId, exp, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.IShare._op_addUser.begin(self, ((shareId, exp), _response, _ex, _sent, _ctx))

        def end_addUser(self, _r):
            return _M_omero.api.IShare._op_addUser.end(self, _r)

        def addUser_async(self, _cb, shareId, exp, _ctx=None):
            return _M_omero.api.IShare._op_addUser.invokeAsync(self, (_cb, (shareId, exp), _ctx))

        def addGuest(self, shareId, emailAddress, _ctx=None):
            return _M_omero.api.IShare._op_addGuest.invoke(self, ((shareId, emailAddress), _ctx))

        def begin_addGuest(self, shareId, emailAddress, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.IShare._op_addGuest.begin(self, ((shareId, emailAddress), _response, _ex, _sent, _ctx))

        def end_addGuest(self, _r):
            return _M_omero.api.IShare._op_addGuest.end(self, _r)

        def addGuest_async(self, _cb, shareId, emailAddress, _ctx=None):
            return _M_omero.api.IShare._op_addGuest.invokeAsync(self, (_cb, (shareId, emailAddress), _ctx))

        def removeUser(self, shareId, exp, _ctx=None):
            return _M_omero.api.IShare._op_removeUser.invoke(self, ((shareId, exp), _ctx))

        def begin_removeUser(self, shareId, exp, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.IShare._op_removeUser.begin(self, ((shareId, exp), _response, _ex, _sent, _ctx))

        def end_removeUser(self, _r):
            return _M_omero.api.IShare._op_removeUser.end(self, _r)

        def removeUser_async(self, _cb, shareId, exp, _ctx=None):
            return _M_omero.api.IShare._op_removeUser.invokeAsync(self, (_cb, (shareId, exp), _ctx))

        def removeGuest(self, shareId, emailAddress, _ctx=None):
            return _M_omero.api.IShare._op_removeGuest.invoke(self, ((shareId, emailAddress), _ctx))

        def begin_removeGuest(self, shareId, emailAddress, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.IShare._op_removeGuest.begin(self, ((shareId, emailAddress), _response, _ex, _sent, _ctx))

        def end_removeGuest(self, _r):
            return _M_omero.api.IShare._op_removeGuest.end(self, _r)

        def removeGuest_async(self, _cb, shareId, emailAddress, _ctx=None):
            return _M_omero.api.IShare._op_removeGuest.invokeAsync(self, (_cb, (shareId, emailAddress), _ctx))

        def getActiveConnections(self, shareId, _ctx=None):
            return _M_omero.api.IShare._op_getActiveConnections.invoke(self, ((shareId, ), _ctx))

        def begin_getActiveConnections(self, shareId, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.IShare._op_getActiveConnections.begin(self, ((shareId, ), _response, _ex, _sent, _ctx))

        def end_getActiveConnections(self, _r):
            return _M_omero.api.IShare._op_getActiveConnections.end(self, _r)

        def getActiveConnections_async(self, _cb, shareId, _ctx=None):
            return _M_omero.api.IShare._op_getActiveConnections.invokeAsync(self, (_cb, (shareId, ), _ctx))

        def getPastConnections(self, shareId, _ctx=None):
            return _M_omero.api.IShare._op_getPastConnections.invoke(self, ((shareId, ), _ctx))

        def begin_getPastConnections(self, shareId, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.IShare._op_getPastConnections.begin(self, ((shareId, ), _response, _ex, _sent, _ctx))

        def end_getPastConnections(self, _r):
            return _M_omero.api.IShare._op_getPastConnections.end(self, _r)

        def getPastConnections_async(self, _cb, shareId, _ctx=None):
            return _M_omero.api.IShare._op_getPastConnections.invokeAsync(self, (_cb, (shareId, ), _ctx))

        def invalidateConnection(self, shareId, exp, _ctx=None):
            return _M_omero.api.IShare._op_invalidateConnection.invoke(self, ((shareId, exp), _ctx))

        def begin_invalidateConnection(self, shareId, exp, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.IShare._op_invalidateConnection.begin(self, ((shareId, exp), _response, _ex, _sent, _ctx))

        def end_invalidateConnection(self, _r):
            return _M_omero.api.IShare._op_invalidateConnection.end(self, _r)

        def invalidateConnection_async(self, _cb, shareId, exp, _ctx=None):
            return _M_omero.api.IShare._op_invalidateConnection.invokeAsync(self, (_cb, (shareId, exp), _ctx))

        def getEvents(self, shareId, exp, _from, to, _ctx=None):
            return _M_omero.api.IShare._op_getEvents.invoke(self, ((shareId, exp, _from, to), _ctx))

        def begin_getEvents(self, shareId, exp, _from, to, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.IShare._op_getEvents.begin(self, ((shareId, exp, _from, to), _response, _ex, _sent, _ctx))

        def end_getEvents(self, _r):
            return _M_omero.api.IShare._op_getEvents.end(self, _r)

        def getEvents_async(self, _cb, shareId, exp, _from, to, _ctx=None):
            return _M_omero.api.IShare._op_getEvents.invokeAsync(self, (_cb, (shareId, exp, _from, to), _ctx))

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_omero.api.ISharePrx.ice_checkedCast(proxy, '::omero::api::IShare', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_omero.api.ISharePrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_omero.api._t_ISharePrx = IcePy.defineProxy('::omero::api::IShare', ISharePrx)

    _M_omero.api._t_IShare = IcePy.defineClass('::omero::api::IShare', IShare, -1, (), True, False, None, (_M_omero.api._t_ServiceInterface,), ())
    IShare._ice_type = _M_omero.api._t_IShare

    IShare._op_activate = IcePy.Operation('activate', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), IcePy._t_long, False, 0),), (), None, (_M_omero._t_ServerError,))
    IShare._op_deactivate = IcePy.Operation('deactivate', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (), (), None, (_M_omero._t_ServerError,))
    IShare._op_getShare = IcePy.Operation('getShare', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), IcePy._t_long, False, 0),), (), ((), _M_omero.model._t_Share, False, 0), (_M_omero._t_ServerError,))
    IShare._op_getMemberCount = IcePy.Operation('getMemberCount', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), _M_omero.sys._t_LongList, False, 0),), (), ((), _M_omero.sys._t_CountMap, False, 0), (_M_omero._t_ServerError,))
    IShare._op_getOwnShares = IcePy.Operation('getOwnShares', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), IcePy._t_bool, False, 0),), (), ((), _M_omero.api._t_SessionList, False, 0), (_M_omero._t_ServerError,))
    IShare._op_getMemberShares = IcePy.Operation('getMemberShares', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), IcePy._t_bool, False, 0),), (), ((), _M_omero.api._t_SessionList, False, 0), (_M_omero._t_ServerError,))
    IShare._op_getSharesOwnedBy = IcePy.Operation('getSharesOwnedBy', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), _M_omero.model._t_Experimenter, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), _M_omero.api._t_SessionList, False, 0), (_M_omero._t_ServerError,))
    IShare._op_getMemberSharesFor = IcePy.Operation('getMemberSharesFor', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), _M_omero.model._t_Experimenter, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), _M_omero.api._t_SessionList, False, 0), (_M_omero._t_ServerError,))
    IShare._op_getContents = IcePy.Operation('getContents', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), IcePy._t_long, False, 0),), (), ((), _M_omero.api._t_IObjectList, False, 0), (_M_omero._t_ServerError,))
    IShare._op_getContentSubList = IcePy.Operation('getContentSubList', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), IcePy._t_long, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_omero.api._t_IObjectList, False, 0), (_M_omero._t_ServerError,))
    IShare._op_getContentSize = IcePy.Operation('getContentSize', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), IcePy._t_long, False, 0),), (), ((), IcePy._t_int, False, 0), (_M_omero._t_ServerError,))
    IShare._op_getContentMap = IcePy.Operation('getContentMap', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), IcePy._t_long, False, 0),), (), ((), _M_omero.api._t_IdListMap, False, 0), (_M_omero._t_ServerError,))
    IShare._op_createShare = IcePy.Operation('createShare', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), IcePy._t_string, False, 0), ((), _M_omero._t_RTime, False, 0), ((), _M_omero.api._t_IObjectList, False, 0), ((), _M_omero.api._t_ExperimenterList, False, 0), ((), _M_omero.api._t_StringSet, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), IcePy._t_long, False, 0), (_M_omero._t_ServerError,))
    IShare._op_setDescription = IcePy.Operation('setDescription', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), IcePy._t_long, False, 0), ((), IcePy._t_string, False, 0)), (), None, (_M_omero._t_ServerError,))
    IShare._op_setExpiration = IcePy.Operation('setExpiration', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), IcePy._t_long, False, 0), ((), _M_omero._t_RTime, False, 0)), (), None, (_M_omero._t_ServerError,))
    IShare._op_setActive = IcePy.Operation('setActive', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), IcePy._t_long, False, 0), ((), IcePy._t_bool, False, 0)), (), None, (_M_omero._t_ServerError,))
    IShare._op_closeShare = IcePy.Operation('closeShare', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), IcePy._t_long, False, 0),), (), None, (_M_omero._t_ServerError,))
    IShare._op_addObjects = IcePy.Operation('addObjects', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), IcePy._t_long, False, 0), ((), _M_omero.api._t_IObjectList, False, 0)), (), None, (_M_omero._t_ServerError,))
    IShare._op_addObject = IcePy.Operation('addObject', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), IcePy._t_long, False, 0), ((), _M_omero.model._t_IObject, False, 0)), (), None, (_M_omero._t_ServerError,))
    IShare._op_removeObjects = IcePy.Operation('removeObjects', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), IcePy._t_long, False, 0), ((), _M_omero.api._t_IObjectList, False, 0)), (), None, (_M_omero._t_ServerError,))
    IShare._op_removeObject = IcePy.Operation('removeObject', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), IcePy._t_long, False, 0), ((), _M_omero.model._t_IObject, False, 0)), (), None, (_M_omero._t_ServerError,))
    IShare._op_getCommentCount = IcePy.Operation('getCommentCount', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), _M_omero.sys._t_LongList, False, 0),), (), ((), _M_omero.sys._t_CountMap, False, 0), (_M_omero._t_ServerError,))
    IShare._op_getComments = IcePy.Operation('getComments', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), IcePy._t_long, False, 0),), (), ((), _M_omero.api._t_AnnotationList, False, 0), (_M_omero._t_ServerError,))
    IShare._op_addComment = IcePy.Operation('addComment', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), IcePy._t_long, False, 0), ((), IcePy._t_string, False, 0)), (), ((), _M_omero.model._t_TextAnnotation, False, 0), (_M_omero._t_ServerError,))
    IShare._op_addReply = IcePy.Operation('addReply', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), IcePy._t_long, False, 0), ((), IcePy._t_string, False, 0), ((), _M_omero.model._t_TextAnnotation, False, 0)), (), ((), _M_omero.model._t_TextAnnotation, False, 0), (_M_omero._t_ServerError,))
    IShare._op_deleteComment = IcePy.Operation('deleteComment', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), _M_omero.model._t_Annotation, False, 0),), (), None, (_M_omero._t_ServerError,))
    IShare._op_getAllMembers = IcePy.Operation('getAllMembers', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), IcePy._t_long, False, 0),), (), ((), _M_omero.api._t_ExperimenterList, False, 0), (_M_omero._t_ServerError,))
    IShare._op_getAllGuests = IcePy.Operation('getAllGuests', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), IcePy._t_long, False, 0),), (), ((), _M_omero.api._t_StringSet, False, 0), (_M_omero._t_ServerError,))
    IShare._op_getAllUsers = IcePy.Operation('getAllUsers', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), IcePy._t_long, False, 0),), (), ((), _M_omero.api._t_StringSet, False, 0), (_M_omero._t_ValidationException, _M_omero._t_ServerError))
    IShare._op_addUsers = IcePy.Operation('addUsers', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), IcePy._t_long, False, 0), ((), _M_omero.api._t_ExperimenterList, False, 0)), (), None, (_M_omero._t_ServerError,))
    IShare._op_addGuests = IcePy.Operation('addGuests', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), IcePy._t_long, False, 0), ((), _M_omero.api._t_StringSet, False, 0)), (), None, (_M_omero._t_ServerError,))
    IShare._op_removeUsers = IcePy.Operation('removeUsers', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), IcePy._t_long, False, 0), ((), _M_omero.api._t_ExperimenterList, False, 0)), (), None, (_M_omero._t_ServerError,))
    IShare._op_removeGuests = IcePy.Operation('removeGuests', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), IcePy._t_long, False, 0), ((), _M_omero.api._t_StringSet, False, 0)), (), None, (_M_omero._t_ServerError,))
    IShare._op_addUser = IcePy.Operation('addUser', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), IcePy._t_long, False, 0), ((), _M_omero.model._t_Experimenter, False, 0)), (), None, (_M_omero._t_ServerError,))
    IShare._op_addGuest = IcePy.Operation('addGuest', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), IcePy._t_long, False, 0), ((), IcePy._t_string, False, 0)), (), None, (_M_omero._t_ServerError,))
    IShare._op_removeUser = IcePy.Operation('removeUser', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), IcePy._t_long, False, 0), ((), _M_omero.model._t_Experimenter, False, 0)), (), None, (_M_omero._t_ServerError,))
    IShare._op_removeGuest = IcePy.Operation('removeGuest', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), IcePy._t_long, False, 0), ((), IcePy._t_string, False, 0)), (), None, (_M_omero._t_ServerError,))
    IShare._op_getActiveConnections = IcePy.Operation('getActiveConnections', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), IcePy._t_long, False, 0),), (), ((), _M_omero.api._t_UserMap, False, 0), (_M_omero._t_ServerError,))
    IShare._op_getPastConnections = IcePy.Operation('getPastConnections', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), IcePy._t_long, False, 0),), (), ((), _M_omero.api._t_UserMap, False, 0), (_M_omero._t_ServerError,))
    IShare._op_invalidateConnection = IcePy.Operation('invalidateConnection', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), IcePy._t_long, False, 0), ((), _M_omero.model._t_Experimenter, False, 0)), (), None, (_M_omero._t_ServerError,))
    IShare._op_getEvents = IcePy.Operation('getEvents', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), IcePy._t_long, False, 0), ((), _M_omero.model._t_Experimenter, False, 0), ((), _M_omero._t_RTime, False, 0), ((), _M_omero._t_RTime, False, 0)), (), ((), _M_omero.api._t_IObjectList, False, 0), (_M_omero._t_ServerError,))

    _M_omero.api.IShare = IShare
    del IShare

    _M_omero.api.ISharePrx = ISharePrx
    del ISharePrx

# End of module omero.api

__name__ = 'omero'

# End of module omero
