# **********************************************************************
#
# Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.5.1
#
# <auto-generated>
#
# Generated from file `WellSample.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy
import omero_model_IObject_ice
import omero_RTypes_ice
import omero_System_ice
import omero_Collections_ice

# Included module omero
_M_omero = Ice.openModule('omero')

# Included module omero.model
_M_omero.model = Ice.openModule('omero.model')

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Included module omero.sys
_M_omero.sys = Ice.openModule('omero.sys')

# Included module omero.api
_M_omero.api = Ice.openModule('omero.api')

# Start of module omero
__name__ = 'omero'

# Start of module omero.model
__name__ = 'omero.model'

if 'PlateAcquisition' not in _M_omero.model.__dict__:
    _M_omero.model._t_PlateAcquisition = IcePy.declareClass('::omero::model::PlateAcquisition')
    _M_omero.model._t_PlateAcquisitionPrx = IcePy.declareProxy('::omero::model::PlateAcquisition')

if 'Well' not in _M_omero.model.__dict__:
    _M_omero.model._t_Well = IcePy.declareClass('::omero::model::Well')
    _M_omero.model._t_WellPrx = IcePy.declareProxy('::omero::model::Well')

if 'Image' not in _M_omero.model.__dict__:
    _M_omero.model._t_Image = IcePy.declareClass('::omero::model::Image')
    _M_omero.model._t_ImagePrx = IcePy.declareProxy('::omero::model::Image')

if 'WellSampleAnnotationLink' not in _M_omero.model.__dict__:
    _M_omero.model._t_WellSampleAnnotationLink = IcePy.declareClass('::omero::model::WellSampleAnnotationLink')
    _M_omero.model._t_WellSampleAnnotationLinkPrx = IcePy.declareProxy('::omero::model::WellSampleAnnotationLink')

if 'Annotation' not in _M_omero.model.__dict__:
    _M_omero.model._t_Annotation = IcePy.declareClass('::omero::model::Annotation')
    _M_omero.model._t_AnnotationPrx = IcePy.declareProxy('::omero::model::Annotation')

if 'Details' not in _M_omero.model.__dict__:
    _M_omero.model._t_Details = IcePy.declareClass('::omero::model::Details')
    _M_omero.model._t_DetailsPrx = IcePy.declareProxy('::omero::model::Details')

if '_t_WellSampleAnnotationLinksSeq' not in _M_omero.model.__dict__:
    _M_omero.model._t_WellSampleAnnotationLinksSeq = IcePy.defineSequence('::omero::model::WellSampleAnnotationLinksSeq', (), _M_omero.model._t_WellSampleAnnotationLink)

if '_t_WellSampleLinkedAnnotationSeq' not in _M_omero.model.__dict__:
    _M_omero.model._t_WellSampleLinkedAnnotationSeq = IcePy.defineSequence('::omero::model::WellSampleLinkedAnnotationSeq', (), _M_omero.model._t_Annotation)

if 'WellSample' not in _M_omero.model.__dict__:
    _M_omero.model.WellSample = Ice.createTempClass()
    class WellSample(_M_omero.model.IObject):
        def __init__(self, _id=None, _details=None, _loaded=False, _version=None, _posX=None, _posY=None, _timepoint=None, _plateAcquisition=None, _well=None, _image=None, _annotationLinksSeq=None, _annotationLinksLoaded=False, _annotationLinksCountPerOwner=None):
            if Ice.getType(self) == _M_omero.model.WellSample:
                raise RuntimeError('omero.model.WellSample is an abstract class')
            _M_omero.model.IObject.__init__(self, _id, _details, _loaded)
            self._version = _version
            self._posX = _posX
            self._posY = _posY
            self._timepoint = _timepoint
            self._plateAcquisition = _plateAcquisition
            self._well = _well
            self._image = _image
            self._annotationLinksSeq = _annotationLinksSeq
            self._annotationLinksLoaded = _annotationLinksLoaded
            self._annotationLinksCountPerOwner = _annotationLinksCountPerOwner

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::omero::model::IObject', '::omero::model::WellSample')

        def ice_id(self, current=None):
            return '::omero::model::WellSample'

        def ice_staticId():
            return '::omero::model::WellSample'
        ice_staticId = staticmethod(ice_staticId)

        def getVersion(self, current=None):
            pass

        def setVersion(self, theVersion, current=None):
            pass

        def getPosX(self, current=None):
            pass

        def setPosX(self, thePosX, current=None):
            pass

        def getPosY(self, current=None):
            pass

        def setPosY(self, thePosY, current=None):
            pass

        def getTimepoint(self, current=None):
            pass

        def setTimepoint(self, theTimepoint, current=None):
            pass

        def getPlateAcquisition(self, current=None):
            pass

        def setPlateAcquisition(self, thePlateAcquisition, current=None):
            pass

        def getWell(self, current=None):
            pass

        def setWell(self, theWell, current=None):
            pass

        def getImage(self, current=None):
            pass

        def setImage(self, theImage, current=None):
            pass

        def unloadAnnotationLinks(self, current=None):
            pass

        def sizeOfAnnotationLinks(self, current=None):
            pass

        def copyAnnotationLinks(self, current=None):
            pass

        def addWellSampleAnnotationLink(self, target, current=None):
            pass

        def addAllWellSampleAnnotationLinkSet(self, targets, current=None):
            pass

        def removeWellSampleAnnotationLink(self, theTarget, current=None):
            pass

        def removeAllWellSampleAnnotationLinkSet(self, targets, current=None):
            pass

        def clearAnnotationLinks(self, current=None):
            pass

        def reloadAnnotationLinks(self, toCopy, current=None):
            pass

        def getAnnotationLinksCountPerOwner(self, current=None):
            pass

        def linkAnnotation(self, addition, current=None):
            pass

        def addWellSampleAnnotationLinkToBoth(self, link, bothSides, current=None):
            pass

        def findWellSampleAnnotationLink(self, removal, current=None):
            pass

        def unlinkAnnotation(self, removal, current=None):
            pass

        def removeWellSampleAnnotationLinkFromBoth(self, link, bothSides, current=None):
            pass

        def linkedAnnotationList(self, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_omero.model._t_WellSample)

        __repr__ = __str__

    _M_omero.model.WellSamplePrx = Ice.createTempClass()
    class WellSamplePrx(_M_omero.model.IObjectPrx):

        def getVersion(self, _ctx=None):
            return _M_omero.model.WellSample._op_getVersion.invoke(self, ((), _ctx))

        def begin_getVersion(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.WellSample._op_getVersion.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getVersion(self, _r):
            return _M_omero.model.WellSample._op_getVersion.end(self, _r)

        def setVersion(self, theVersion, _ctx=None):
            return _M_omero.model.WellSample._op_setVersion.invoke(self, ((theVersion, ), _ctx))

        def begin_setVersion(self, theVersion, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.WellSample._op_setVersion.begin(self, ((theVersion, ), _response, _ex, _sent, _ctx))

        def end_setVersion(self, _r):
            return _M_omero.model.WellSample._op_setVersion.end(self, _r)

        def getPosX(self, _ctx=None):
            return _M_omero.model.WellSample._op_getPosX.invoke(self, ((), _ctx))

        def begin_getPosX(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.WellSample._op_getPosX.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getPosX(self, _r):
            return _M_omero.model.WellSample._op_getPosX.end(self, _r)

        def setPosX(self, thePosX, _ctx=None):
            return _M_omero.model.WellSample._op_setPosX.invoke(self, ((thePosX, ), _ctx))

        def begin_setPosX(self, thePosX, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.WellSample._op_setPosX.begin(self, ((thePosX, ), _response, _ex, _sent, _ctx))

        def end_setPosX(self, _r):
            return _M_omero.model.WellSample._op_setPosX.end(self, _r)

        def getPosY(self, _ctx=None):
            return _M_omero.model.WellSample._op_getPosY.invoke(self, ((), _ctx))

        def begin_getPosY(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.WellSample._op_getPosY.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getPosY(self, _r):
            return _M_omero.model.WellSample._op_getPosY.end(self, _r)

        def setPosY(self, thePosY, _ctx=None):
            return _M_omero.model.WellSample._op_setPosY.invoke(self, ((thePosY, ), _ctx))

        def begin_setPosY(self, thePosY, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.WellSample._op_setPosY.begin(self, ((thePosY, ), _response, _ex, _sent, _ctx))

        def end_setPosY(self, _r):
            return _M_omero.model.WellSample._op_setPosY.end(self, _r)

        def getTimepoint(self, _ctx=None):
            return _M_omero.model.WellSample._op_getTimepoint.invoke(self, ((), _ctx))

        def begin_getTimepoint(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.WellSample._op_getTimepoint.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getTimepoint(self, _r):
            return _M_omero.model.WellSample._op_getTimepoint.end(self, _r)

        def setTimepoint(self, theTimepoint, _ctx=None):
            return _M_omero.model.WellSample._op_setTimepoint.invoke(self, ((theTimepoint, ), _ctx))

        def begin_setTimepoint(self, theTimepoint, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.WellSample._op_setTimepoint.begin(self, ((theTimepoint, ), _response, _ex, _sent, _ctx))

        def end_setTimepoint(self, _r):
            return _M_omero.model.WellSample._op_setTimepoint.end(self, _r)

        def getPlateAcquisition(self, _ctx=None):
            return _M_omero.model.WellSample._op_getPlateAcquisition.invoke(self, ((), _ctx))

        def begin_getPlateAcquisition(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.WellSample._op_getPlateAcquisition.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getPlateAcquisition(self, _r):
            return _M_omero.model.WellSample._op_getPlateAcquisition.end(self, _r)

        def setPlateAcquisition(self, thePlateAcquisition, _ctx=None):
            return _M_omero.model.WellSample._op_setPlateAcquisition.invoke(self, ((thePlateAcquisition, ), _ctx))

        def begin_setPlateAcquisition(self, thePlateAcquisition, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.WellSample._op_setPlateAcquisition.begin(self, ((thePlateAcquisition, ), _response, _ex, _sent, _ctx))

        def end_setPlateAcquisition(self, _r):
            return _M_omero.model.WellSample._op_setPlateAcquisition.end(self, _r)

        def getWell(self, _ctx=None):
            return _M_omero.model.WellSample._op_getWell.invoke(self, ((), _ctx))

        def begin_getWell(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.WellSample._op_getWell.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getWell(self, _r):
            return _M_omero.model.WellSample._op_getWell.end(self, _r)

        def setWell(self, theWell, _ctx=None):
            return _M_omero.model.WellSample._op_setWell.invoke(self, ((theWell, ), _ctx))

        def begin_setWell(self, theWell, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.WellSample._op_setWell.begin(self, ((theWell, ), _response, _ex, _sent, _ctx))

        def end_setWell(self, _r):
            return _M_omero.model.WellSample._op_setWell.end(self, _r)

        def getImage(self, _ctx=None):
            return _M_omero.model.WellSample._op_getImage.invoke(self, ((), _ctx))

        def begin_getImage(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.WellSample._op_getImage.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getImage(self, _r):
            return _M_omero.model.WellSample._op_getImage.end(self, _r)

        def setImage(self, theImage, _ctx=None):
            return _M_omero.model.WellSample._op_setImage.invoke(self, ((theImage, ), _ctx))

        def begin_setImage(self, theImage, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.WellSample._op_setImage.begin(self, ((theImage, ), _response, _ex, _sent, _ctx))

        def end_setImage(self, _r):
            return _M_omero.model.WellSample._op_setImage.end(self, _r)

        def unloadAnnotationLinks(self, _ctx=None):
            return _M_omero.model.WellSample._op_unloadAnnotationLinks.invoke(self, ((), _ctx))

        def begin_unloadAnnotationLinks(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.WellSample._op_unloadAnnotationLinks.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_unloadAnnotationLinks(self, _r):
            return _M_omero.model.WellSample._op_unloadAnnotationLinks.end(self, _r)

        def sizeOfAnnotationLinks(self, _ctx=None):
            return _M_omero.model.WellSample._op_sizeOfAnnotationLinks.invoke(self, ((), _ctx))

        def begin_sizeOfAnnotationLinks(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.WellSample._op_sizeOfAnnotationLinks.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_sizeOfAnnotationLinks(self, _r):
            return _M_omero.model.WellSample._op_sizeOfAnnotationLinks.end(self, _r)

        def copyAnnotationLinks(self, _ctx=None):
            return _M_omero.model.WellSample._op_copyAnnotationLinks.invoke(self, ((), _ctx))

        def begin_copyAnnotationLinks(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.WellSample._op_copyAnnotationLinks.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_copyAnnotationLinks(self, _r):
            return _M_omero.model.WellSample._op_copyAnnotationLinks.end(self, _r)

        def addWellSampleAnnotationLink(self, target, _ctx=None):
            return _M_omero.model.WellSample._op_addWellSampleAnnotationLink.invoke(self, ((target, ), _ctx))

        def begin_addWellSampleAnnotationLink(self, target, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.WellSample._op_addWellSampleAnnotationLink.begin(self, ((target, ), _response, _ex, _sent, _ctx))

        def end_addWellSampleAnnotationLink(self, _r):
            return _M_omero.model.WellSample._op_addWellSampleAnnotationLink.end(self, _r)

        def addAllWellSampleAnnotationLinkSet(self, targets, _ctx=None):
            return _M_omero.model.WellSample._op_addAllWellSampleAnnotationLinkSet.invoke(self, ((targets, ), _ctx))

        def begin_addAllWellSampleAnnotationLinkSet(self, targets, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.WellSample._op_addAllWellSampleAnnotationLinkSet.begin(self, ((targets, ), _response, _ex, _sent, _ctx))

        def end_addAllWellSampleAnnotationLinkSet(self, _r):
            return _M_omero.model.WellSample._op_addAllWellSampleAnnotationLinkSet.end(self, _r)

        def removeWellSampleAnnotationLink(self, theTarget, _ctx=None):
            return _M_omero.model.WellSample._op_removeWellSampleAnnotationLink.invoke(self, ((theTarget, ), _ctx))

        def begin_removeWellSampleAnnotationLink(self, theTarget, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.WellSample._op_removeWellSampleAnnotationLink.begin(self, ((theTarget, ), _response, _ex, _sent, _ctx))

        def end_removeWellSampleAnnotationLink(self, _r):
            return _M_omero.model.WellSample._op_removeWellSampleAnnotationLink.end(self, _r)

        def removeAllWellSampleAnnotationLinkSet(self, targets, _ctx=None):
            return _M_omero.model.WellSample._op_removeAllWellSampleAnnotationLinkSet.invoke(self, ((targets, ), _ctx))

        def begin_removeAllWellSampleAnnotationLinkSet(self, targets, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.WellSample._op_removeAllWellSampleAnnotationLinkSet.begin(self, ((targets, ), _response, _ex, _sent, _ctx))

        def end_removeAllWellSampleAnnotationLinkSet(self, _r):
            return _M_omero.model.WellSample._op_removeAllWellSampleAnnotationLinkSet.end(self, _r)

        def clearAnnotationLinks(self, _ctx=None):
            return _M_omero.model.WellSample._op_clearAnnotationLinks.invoke(self, ((), _ctx))

        def begin_clearAnnotationLinks(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.WellSample._op_clearAnnotationLinks.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_clearAnnotationLinks(self, _r):
            return _M_omero.model.WellSample._op_clearAnnotationLinks.end(self, _r)

        def reloadAnnotationLinks(self, toCopy, _ctx=None):
            return _M_omero.model.WellSample._op_reloadAnnotationLinks.invoke(self, ((toCopy, ), _ctx))

        def begin_reloadAnnotationLinks(self, toCopy, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.WellSample._op_reloadAnnotationLinks.begin(self, ((toCopy, ), _response, _ex, _sent, _ctx))

        def end_reloadAnnotationLinks(self, _r):
            return _M_omero.model.WellSample._op_reloadAnnotationLinks.end(self, _r)

        def getAnnotationLinksCountPerOwner(self, _ctx=None):
            return _M_omero.model.WellSample._op_getAnnotationLinksCountPerOwner.invoke(self, ((), _ctx))

        def begin_getAnnotationLinksCountPerOwner(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.WellSample._op_getAnnotationLinksCountPerOwner.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getAnnotationLinksCountPerOwner(self, _r):
            return _M_omero.model.WellSample._op_getAnnotationLinksCountPerOwner.end(self, _r)

        def linkAnnotation(self, addition, _ctx=None):
            return _M_omero.model.WellSample._op_linkAnnotation.invoke(self, ((addition, ), _ctx))

        def begin_linkAnnotation(self, addition, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.WellSample._op_linkAnnotation.begin(self, ((addition, ), _response, _ex, _sent, _ctx))

        def end_linkAnnotation(self, _r):
            return _M_omero.model.WellSample._op_linkAnnotation.end(self, _r)

        def addWellSampleAnnotationLinkToBoth(self, link, bothSides, _ctx=None):
            return _M_omero.model.WellSample._op_addWellSampleAnnotationLinkToBoth.invoke(self, ((link, bothSides), _ctx))

        def begin_addWellSampleAnnotationLinkToBoth(self, link, bothSides, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.WellSample._op_addWellSampleAnnotationLinkToBoth.begin(self, ((link, bothSides), _response, _ex, _sent, _ctx))

        def end_addWellSampleAnnotationLinkToBoth(self, _r):
            return _M_omero.model.WellSample._op_addWellSampleAnnotationLinkToBoth.end(self, _r)

        def findWellSampleAnnotationLink(self, removal, _ctx=None):
            return _M_omero.model.WellSample._op_findWellSampleAnnotationLink.invoke(self, ((removal, ), _ctx))

        def begin_findWellSampleAnnotationLink(self, removal, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.WellSample._op_findWellSampleAnnotationLink.begin(self, ((removal, ), _response, _ex, _sent, _ctx))

        def end_findWellSampleAnnotationLink(self, _r):
            return _M_omero.model.WellSample._op_findWellSampleAnnotationLink.end(self, _r)

        def unlinkAnnotation(self, removal, _ctx=None):
            return _M_omero.model.WellSample._op_unlinkAnnotation.invoke(self, ((removal, ), _ctx))

        def begin_unlinkAnnotation(self, removal, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.WellSample._op_unlinkAnnotation.begin(self, ((removal, ), _response, _ex, _sent, _ctx))

        def end_unlinkAnnotation(self, _r):
            return _M_omero.model.WellSample._op_unlinkAnnotation.end(self, _r)

        def removeWellSampleAnnotationLinkFromBoth(self, link, bothSides, _ctx=None):
            return _M_omero.model.WellSample._op_removeWellSampleAnnotationLinkFromBoth.invoke(self, ((link, bothSides), _ctx))

        def begin_removeWellSampleAnnotationLinkFromBoth(self, link, bothSides, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.WellSample._op_removeWellSampleAnnotationLinkFromBoth.begin(self, ((link, bothSides), _response, _ex, _sent, _ctx))

        def end_removeWellSampleAnnotationLinkFromBoth(self, _r):
            return _M_omero.model.WellSample._op_removeWellSampleAnnotationLinkFromBoth.end(self, _r)

        def linkedAnnotationList(self, _ctx=None):
            return _M_omero.model.WellSample._op_linkedAnnotationList.invoke(self, ((), _ctx))

        def begin_linkedAnnotationList(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.WellSample._op_linkedAnnotationList.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_linkedAnnotationList(self, _r):
            return _M_omero.model.WellSample._op_linkedAnnotationList.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_omero.model.WellSamplePrx.ice_checkedCast(proxy, '::omero::model::WellSample', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_omero.model.WellSamplePrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_omero.model._t_WellSamplePrx = IcePy.defineProxy('::omero::model::WellSample', WellSamplePrx)

    _M_omero.model._t_WellSample = IcePy.declareClass('::omero::model::WellSample')

    _M_omero.model._t_WellSample = IcePy.defineClass('::omero::model::WellSample', WellSample, -1, (), True, False, _M_omero.model._t_IObject, (), (
        ('_version', (), _M_omero._t_RInt, False, 0),
        ('_posX', (), _M_omero._t_RDouble, False, 0),
        ('_posY', (), _M_omero._t_RDouble, False, 0),
        ('_timepoint', (), _M_omero._t_RTime, False, 0),
        ('_plateAcquisition', (), _M_omero.model._t_PlateAcquisition, False, 0),
        ('_well', (), _M_omero.model._t_Well, False, 0),
        ('_image', (), _M_omero.model._t_Image, False, 0),
        ('_annotationLinksSeq', (), _M_omero.model._t_WellSampleAnnotationLinksSeq, False, 0),
        ('_annotationLinksLoaded', (), IcePy._t_bool, False, 0),
        ('_annotationLinksCountPerOwner', (), _M_omero.sys._t_CountMap, False, 0)
    ))
    WellSample._ice_type = _M_omero.model._t_WellSample

    WellSample._op_getVersion = IcePy.Operation('getVersion', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_omero._t_RInt, False, 0), ())
    WellSample._op_setVersion = IcePy.Operation('setVersion', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_omero._t_RInt, False, 0),), (), None, ())
    WellSample._op_getPosX = IcePy.Operation('getPosX', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_omero._t_RDouble, False, 0), ())
    WellSample._op_setPosX = IcePy.Operation('setPosX', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_omero._t_RDouble, False, 0),), (), None, ())
    WellSample._op_getPosY = IcePy.Operation('getPosY', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_omero._t_RDouble, False, 0), ())
    WellSample._op_setPosY = IcePy.Operation('setPosY', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_omero._t_RDouble, False, 0),), (), None, ())
    WellSample._op_getTimepoint = IcePy.Operation('getTimepoint', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_omero._t_RTime, False, 0), ())
    WellSample._op_setTimepoint = IcePy.Operation('setTimepoint', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_omero._t_RTime, False, 0),), (), None, ())
    WellSample._op_getPlateAcquisition = IcePy.Operation('getPlateAcquisition', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_omero.model._t_PlateAcquisition, False, 0), ())
    WellSample._op_setPlateAcquisition = IcePy.Operation('setPlateAcquisition', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_omero.model._t_PlateAcquisition, False, 0),), (), None, ())
    WellSample._op_getWell = IcePy.Operation('getWell', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_omero.model._t_Well, False, 0), ())
    WellSample._op_setWell = IcePy.Operation('setWell', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_omero.model._t_Well, False, 0),), (), None, ())
    WellSample._op_getImage = IcePy.Operation('getImage', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_omero.model._t_Image, False, 0), ())
    WellSample._op_setImage = IcePy.Operation('setImage', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_omero.model._t_Image, False, 0),), (), None, ())
    WellSample._op_unloadAnnotationLinks = IcePy.Operation('unloadAnnotationLinks', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    WellSample._op_sizeOfAnnotationLinks = IcePy.Operation('sizeOfAnnotationLinks', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())
    WellSample._op_copyAnnotationLinks = IcePy.Operation('copyAnnotationLinks', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_omero.model._t_WellSampleAnnotationLinksSeq, False, 0), ())
    WellSample._op_addWellSampleAnnotationLink = IcePy.Operation('addWellSampleAnnotationLink', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_omero.model._t_WellSampleAnnotationLink, False, 0),), (), None, ())
    WellSample._op_addAllWellSampleAnnotationLinkSet = IcePy.Operation('addAllWellSampleAnnotationLinkSet', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_omero.model._t_WellSampleAnnotationLinksSeq, False, 0),), (), None, ())
    WellSample._op_removeWellSampleAnnotationLink = IcePy.Operation('removeWellSampleAnnotationLink', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_omero.model._t_WellSampleAnnotationLink, False, 0),), (), None, ())
    WellSample._op_removeAllWellSampleAnnotationLinkSet = IcePy.Operation('removeAllWellSampleAnnotationLinkSet', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_omero.model._t_WellSampleAnnotationLinksSeq, False, 0),), (), None, ())
    WellSample._op_clearAnnotationLinks = IcePy.Operation('clearAnnotationLinks', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    WellSample._op_reloadAnnotationLinks = IcePy.Operation('reloadAnnotationLinks', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_omero.model._t_WellSample, False, 0),), (), None, ())
    WellSample._op_getAnnotationLinksCountPerOwner = IcePy.Operation('getAnnotationLinksCountPerOwner', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_omero.sys._t_CountMap, False, 0), ())
    WellSample._op_linkAnnotation = IcePy.Operation('linkAnnotation', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_omero.model._t_Annotation, False, 0),), (), ((), _M_omero.model._t_WellSampleAnnotationLink, False, 0), ())
    WellSample._op_addWellSampleAnnotationLinkToBoth = IcePy.Operation('addWellSampleAnnotationLinkToBoth', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_omero.model._t_WellSampleAnnotationLink, False, 0), ((), IcePy._t_bool, False, 0)), (), None, ())
    WellSample._op_findWellSampleAnnotationLink = IcePy.Operation('findWellSampleAnnotationLink', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_omero.model._t_Annotation, False, 0),), (), ((), _M_omero.model._t_WellSampleAnnotationLinksSeq, False, 0), ())
    WellSample._op_unlinkAnnotation = IcePy.Operation('unlinkAnnotation', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_omero.model._t_Annotation, False, 0),), (), None, ())
    WellSample._op_removeWellSampleAnnotationLinkFromBoth = IcePy.Operation('removeWellSampleAnnotationLinkFromBoth', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_omero.model._t_WellSampleAnnotationLink, False, 0), ((), IcePy._t_bool, False, 0)), (), None, ())
    WellSample._op_linkedAnnotationList = IcePy.Operation('linkedAnnotationList', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_omero.model._t_WellSampleLinkedAnnotationSeq, False, 0), ())

    _M_omero.model.WellSample = WellSample
    del WellSample

    _M_omero.model.WellSamplePrx = WellSamplePrx
    del WellSamplePrx

# End of module omero.model

__name__ = 'omero'

# End of module omero
