"""
   /*
   **   Generated by blitz/templates/resouces/combined.vm
   **
   **   Copyright 2007, 2008 Glencoe Software, Inc. All rights reserved.
   **   Use is subject to license terms supplied in LICENSE.txt
   **
   */
"""
import Ice
import IceImport
import omero
IceImport.load("omero_model_DetailsI")
IceImport.load("omero_model_LightPath_ice")
from omero.rtypes import rlong
_omero = Ice.openModule("omero")
_omero_model = Ice.openModule("omero.model")
__name__ = "omero.model"
class LightPathI(_omero_model.LightPath):

      EXCITATIONFILTERLINK =  "ome.model.acquisition.LightPath_excitationFilterLink"
      DICHROIC =  "ome.model.acquisition.LightPath_dichroic"
      EMISSIONFILTERLINK =  "ome.model.acquisition.LightPath_emissionFilterLink"
      DETAILS =  "ome.model.acquisition.LightPath_details"
      def errorIfUnloaded(self):
          if not self._loaded:
              raise _omero.UnloadedEntityException("Object unloaded:"+str(self))

      def throwNullCollectionException(self,propertyName):
          raise _omero.UnloadedEntityException(""+
          "Error updating collection:" + propertyName +"\n"+
          "Collection is currently null. This can be seen\n" +
          "by testing \""+ propertyName +"Loaded\". This implies\n"+
          "that this collection was unloaded. Please refresh this object\n"+
          "in order to update this collection.\n")

      def _toggleCollectionsLoaded(self,load):
          if load:
              self._excitationFilterLinkSeq = []
              self._excitationFilterLinkLoaded = True;
          else:
              self._excitationFilterLinkSeq = []
              self._excitationFilterLinkLoaded = False;

          if load:
              self._emissionFilterLinkSeq = []
              self._emissionFilterLinkLoaded = True;
          else:
              self._emissionFilterLinkSeq = []
              self._emissionFilterLinkLoaded = False;

          pass

      def __init__(self, id = None, loaded = True):
          super(LightPathI, self).__init__()
          # Relying on omero.rtypes.rlong's error-handling
          self._id = rlong(id)
          self._loaded = loaded
          if self._loaded:
             self._details = _omero_model.DetailsI()
             self._toggleCollectionsLoaded(True)

      def unload(self, current = None):
          self._loaded = False
          self.unloadExcitationFilterLink( )
          self.unloadDichroic( )
          self.unloadEmissionFilterLink( )
          self.unloadDetails( )

      def isLoaded(self, current = None):
          return self._loaded
      def unloadCollections(self, current = None):
          self._toggleCollectionsLoaded( False )
      def isGlobal(self, current = None):
          return  False ;
      def isMutable(self, current = None):
          return  True ;
      def isAnnotated(self, current = None):
          return  False ;
      def isLink(self, current = None):
          return  False ;
      def shallowCopy(self, current = None):
            if not self._loaded: return self.proxy()
            copy = LightPathI()
            copy._id = self._id;
            copy._version = self._version;
            copy._details = None  # Unloading for the moment.
            raise omero.ClientError("NYI")
      def proxy(self, current = None):
          if self._id is None: raise omero.ClientError("Proxies require an id")
          return LightPathI( self._id.getValue(), False )

      def getDetails(self, current = None):
          self.errorIfUnloaded()
          return self._details

      def unloadDetails(self, current = None):
          self._details = None

      def getId(self, current = None):
          return self._id

      def setId(self, _id, current = None):
          self._id = _id

      def checkUnloadedProperty(self, value, loadedField):
          if value == None:
              self.__dict__[loadedField] = False
          else:
              self.__dict__[loadedField] = True

      def getVersion(self, current = None):
          self.errorIfUnloaded()
          return self._version

      def setVersion(self, version, current = None):
          self.errorIfUnloaded()
          self._version = version

      def unloadExcitationFilterLink(self, current = None):
          self._excitationFilterLinkLoaded = False
          self._excitationFilterLinkSeq = None;

      def _getExcitationFilterLink(self, current = None):
          self.errorIfUnloaded()
          return self._excitationFilterLinkSeq

      def _setExcitationFilterLink(self, _excitationFilterLink, current = None):
          self.errorIfUnloaded()
          self._excitationFilterLinkSeq = _excitationFilterLink
          self.checkUnloadedProperty(_excitationFilterLink,'excitationFilterLinkLoaded')

      def isExcitationFilterLinkLoaded(self):
          return self._excitationFilterLinkLoaded

      def sizeOfExcitationFilterLink(self, current = None):
          self.errorIfUnloaded()
          if not self._excitationFilterLinkLoaded: return -1
          return len(self._excitationFilterLinkSeq)

      def copyExcitationFilterLink(self, current = None):
          self.errorIfUnloaded()
          if not self._excitationFilterLinkLoaded: self.throwNullCollectionException("excitationFilterLinkSeq")
          return list(self._excitationFilterLinkSeq)

      def iterateExcitationFilterLink(self):
          self.errorIfUnloaded()
          if not self._excitationFilterLinkLoaded: self.throwNullCollectionException("excitationFilterLinkSeq")
          return iter(self._excitationFilterLinkSeq)

      def addLightPathExcitationFilterLink(self, target, current = None):
          self.errorIfUnloaded()
          if not self._excitationFilterLinkLoaded: self.throwNullCollectionException("excitationFilterLinkSeq")
          self._excitationFilterLinkSeq.append( target );
          target.setParent( self )

      def addAllLightPathExcitationFilterLinkSet(self, targets, current = None):
          self.errorIfUnloaded()
          if  not self._excitationFilterLinkLoaded: self.throwNullCollectionException("excitationFilterLinkSeq")
          self._excitationFilterLinkSeq.extend( targets )
          for target in targets:
              target.setParent( self )

      def removeLightPathExcitationFilterLink(self, target, current = None):
          self.errorIfUnloaded()
          if not self._excitationFilterLinkLoaded: self.throwNullCollectionException("excitationFilterLinkSeq")
          self._excitationFilterLinkSeq.remove( target )
          target.setParent( None )

      def removeAllLightPathExcitationFilterLinkSet(self, targets, current = None):
          self.errorIfUnloaded()
          if not self._excitationFilterLinkLoaded: self.throwNullCollectionException("excitationFilterLinkSeq")
          for elt in targets:
              elt.setParent( None )
              self._excitationFilterLinkSeq.remove( elt )

      def clearExcitationFilterLink(self, current = None):
          self.errorIfUnloaded()
          if not self._excitationFilterLinkLoaded: self.throwNullCollectionException("excitationFilterLinkSeq")
          for elt in self._excitationFilterLinkSeq:
              elt.setParent( None )
          self._excitationFilterLinkSeq = list()

      def reloadExcitationFilterLink(self, toCopy, current = None):
          self.errorIfUnloaded()
          if self._excitationFilterLinkLoaded:
              raise omero.ClientError("Cannot reload active collection: excitationFilterLinkSeq")
          if not toCopy:
              raise omero.ClientError("Argument cannot be null")
          if toCopy.getId().getValue() != self.getId().getValue():
             raise omero.ClientError("Argument must have the same id as this instance")
          if toCopy.getDetails().getUpdateEvent().getId().getValue() < self.getDetails().getUpdateEvent().getId().getValue():
             raise omero.ClientError("Argument may not be older than this instance")
          copy = toCopy.copyExcitationFilterLink() # May also throw
          for elt in copy:
              elt.setParent( self )
          self._excitationFilterLinkSeq = copy
          toCopy.unloadExcitationFilterLink()
          self._excitationFilterLinkLoaded = True

      def getLightPathExcitationFilterLink(self, index, current = None):
          self.errorIfUnloaded()
          if not self._excitationFilterLinkLoaded: self.throwNullCollectionException("excitationFilterLinkSeq")
          return self._excitationFilterLinkSeq[index]

      def setLightPathExcitationFilterLink(self, index, element, current = None):
          self.errorIfUnloaded()
          if not self._excitationFilterLinkLoaded: self.throwNullCollectionException("excitationFilterLinkSeq")
          old = self._excitationFilterLinkSeq[index]
          self._excitationFilterLinkSeq[index] =  element
          if element is not None and element.isLoaded():
              element.setParent( self )
          return old

      def getPrimaryLightPathExcitationFilterLink(self, current = None):
          self.errorIfUnloaded()
          if not self._excitationFilterLinkLoaded: self.throwNullCollectionException("excitationFilterLinkSeq")
          return self._excitationFilterLinkSeq[0]

      def setPrimaryLightPathExcitationFilterLink(self, element, current = None):
          self.errorIfUnloaded()
          if not self._excitationFilterLinkLoaded: self.throwNullCollectionException("excitationFilterLinkSeq")
          index = self._excitationFilterLinkSeq.index(element)
          old = self._excitationFilterLinkSeq[0]
          self._excitationFilterLinkSeq[index] = old
          self._excitationFilterLinkSeq[0] = element
          return old

      def getExcitationFilterLinkCountPerOwner(self, current = None):
          return self._excitationFilterLinkCountPerOwner

      def linkExcitationFilter(self, addition, current = None):
          self.errorIfUnloaded()
          if not self._excitationFilterLinkLoaded: self.throwNullCollectionException("excitationFilterLinkSeq")
          link = _omero_model.LightPathExcitationFilterLinkI()
          link.link( self, addition );
          self.addLightPathExcitationFilterLinkToBoth( link, True )
          return link

      def addLightPathExcitationFilterLinkToBoth(self, link, bothSides):
          self.errorIfUnloaded()
          if not self._excitationFilterLinkLoaded: self.throwNullCollectionException("excitationFilterLinkSeq")
          self._excitationFilterLinkSeq.append( link )

      def findLightPathExcitationFilterLink(self, removal, current = None):
          self.errorIfUnloaded()
          if not self._excitationFilterLinkLoaded: self.throwNullCollectionException("excitationFilterLinkSeq")
          result = list()
          for link in self._excitationFilterLinkSeq:
              if link.getChild() == removal: result.append(link)
          return result

      def unlinkExcitationFilter(self, removal, current = None):
          self.errorIfUnloaded()
          if not self._excitationFilterLinkLoaded: self.throwNullCollectionException("excitationFilterLinkSeq")
          toRemove = self.findLightPathExcitationFilterLink(removal)
          for next in toRemove:
              self.removeLightPathExcitationFilterLinkFromBoth( next, True )

      def removeLightPathExcitationFilterLinkFromBoth(self, link, bothSides, current = None):
          self.errorIfUnloaded()
          if not self._excitationFilterLinkLoaded: self.throwNullCollectionException("excitationFilterLinkSeq")
          self._excitationFilterLinkSeq.remove( link )

      def linkedExcitationFilterList(self, current = None):
          self.errorIfUnloaded()
          if not self.excitationFilterLinkLoaded: self.throwNullCollectionException("ExcitationFilterLink")
          linked = []
          for link in self._excitationFilterLinkSeq:
              linked.append( link.getChild() )
          return linked

      def unloadDichroic(self, ):
          self._dichroicLoaded = False
          self._dichroic = None;

      def getDichroic(self, current = None):
          self.errorIfUnloaded()
          return self._dichroic

      def setDichroic(self, _dichroic, current = None):
          self.errorIfUnloaded()
          self._dichroic = _dichroic
          pass

      def unloadEmissionFilterLink(self, current = None):
          self._emissionFilterLinkLoaded = False
          self._emissionFilterLinkSeq = None;

      def _getEmissionFilterLink(self, current = None):
          self.errorIfUnloaded()
          return self._emissionFilterLinkSeq

      def _setEmissionFilterLink(self, _emissionFilterLink, current = None):
          self.errorIfUnloaded()
          self._emissionFilterLinkSeq = _emissionFilterLink
          self.checkUnloadedProperty(_emissionFilterLink,'emissionFilterLinkLoaded')

      def isEmissionFilterLinkLoaded(self):
          return self._emissionFilterLinkLoaded

      def sizeOfEmissionFilterLink(self, current = None):
          self.errorIfUnloaded()
          if not self._emissionFilterLinkLoaded: return -1
          return len(self._emissionFilterLinkSeq)

      def copyEmissionFilterLink(self, current = None):
          self.errorIfUnloaded()
          if not self._emissionFilterLinkLoaded: self.throwNullCollectionException("emissionFilterLinkSeq")
          return list(self._emissionFilterLinkSeq)

      def iterateEmissionFilterLink(self):
          self.errorIfUnloaded()
          if not self._emissionFilterLinkLoaded: self.throwNullCollectionException("emissionFilterLinkSeq")
          return iter(self._emissionFilterLinkSeq)

      def addLightPathEmissionFilterLink(self, target, current = None):
          self.errorIfUnloaded()
          if not self._emissionFilterLinkLoaded: self.throwNullCollectionException("emissionFilterLinkSeq")
          self._emissionFilterLinkSeq.append( target );
          target.setParent( self )

      def addAllLightPathEmissionFilterLinkSet(self, targets, current = None):
          self.errorIfUnloaded()
          if  not self._emissionFilterLinkLoaded: self.throwNullCollectionException("emissionFilterLinkSeq")
          self._emissionFilterLinkSeq.extend( targets )
          for target in targets:
              target.setParent( self )

      def removeLightPathEmissionFilterLink(self, target, current = None):
          self.errorIfUnloaded()
          if not self._emissionFilterLinkLoaded: self.throwNullCollectionException("emissionFilterLinkSeq")
          self._emissionFilterLinkSeq.remove( target )
          target.setParent( None )

      def removeAllLightPathEmissionFilterLinkSet(self, targets, current = None):
          self.errorIfUnloaded()
          if not self._emissionFilterLinkLoaded: self.throwNullCollectionException("emissionFilterLinkSeq")
          for elt in targets:
              elt.setParent( None )
              self._emissionFilterLinkSeq.remove( elt )

      def clearEmissionFilterLink(self, current = None):
          self.errorIfUnloaded()
          if not self._emissionFilterLinkLoaded: self.throwNullCollectionException("emissionFilterLinkSeq")
          for elt in self._emissionFilterLinkSeq:
              elt.setParent( None )
          self._emissionFilterLinkSeq = list()

      def reloadEmissionFilterLink(self, toCopy, current = None):
          self.errorIfUnloaded()
          if self._emissionFilterLinkLoaded:
              raise omero.ClientError("Cannot reload active collection: emissionFilterLinkSeq")
          if not toCopy:
              raise omero.ClientError("Argument cannot be null")
          if toCopy.getId().getValue() != self.getId().getValue():
             raise omero.ClientError("Argument must have the same id as this instance")
          if toCopy.getDetails().getUpdateEvent().getId().getValue() < self.getDetails().getUpdateEvent().getId().getValue():
             raise omero.ClientError("Argument may not be older than this instance")
          copy = toCopy.copyEmissionFilterLink() # May also throw
          for elt in copy:
              elt.setParent( self )
          self._emissionFilterLinkSeq = copy
          toCopy.unloadEmissionFilterLink()
          self._emissionFilterLinkLoaded = True

      def getEmissionFilterLinkCountPerOwner(self, current = None):
          return self._emissionFilterLinkCountPerOwner

      def linkEmissionFilter(self, addition, current = None):
          self.errorIfUnloaded()
          if not self._emissionFilterLinkLoaded: self.throwNullCollectionException("emissionFilterLinkSeq")
          link = _omero_model.LightPathEmissionFilterLinkI()
          link.link( self, addition );
          self.addLightPathEmissionFilterLinkToBoth( link, True )
          return link

      def addLightPathEmissionFilterLinkToBoth(self, link, bothSides):
          self.errorIfUnloaded()
          if not self._emissionFilterLinkLoaded: self.throwNullCollectionException("emissionFilterLinkSeq")
          self._emissionFilterLinkSeq.append( link )

      def findLightPathEmissionFilterLink(self, removal, current = None):
          self.errorIfUnloaded()
          if not self._emissionFilterLinkLoaded: self.throwNullCollectionException("emissionFilterLinkSeq")
          result = list()
          for link in self._emissionFilterLinkSeq:
              if link.getChild() == removal: result.append(link)
          return result

      def unlinkEmissionFilter(self, removal, current = None):
          self.errorIfUnloaded()
          if not self._emissionFilterLinkLoaded: self.throwNullCollectionException("emissionFilterLinkSeq")
          toRemove = self.findLightPathEmissionFilterLink(removal)
          for next in toRemove:
              self.removeLightPathEmissionFilterLinkFromBoth( next, True )

      def removeLightPathEmissionFilterLinkFromBoth(self, link, bothSides, current = None):
          self.errorIfUnloaded()
          if not self._emissionFilterLinkLoaded: self.throwNullCollectionException("emissionFilterLinkSeq")
          self._emissionFilterLinkSeq.remove( link )

      def linkedEmissionFilterList(self, current = None):
          self.errorIfUnloaded()
          if not self.emissionFilterLinkLoaded: self.throwNullCollectionException("EmissionFilterLink")
          linked = []
          for link in self._emissionFilterLinkSeq:
              linked.append( link.getChild() )
          return linked


      def ice_postUnmarshal(self):
          """
          Provides additional initialization once all data loaded
          """
          pass # Currently unused


      def ice_preMarshal(self):
          """
          Provides additional validation before data is sent
          """
          pass # Currently unused

      def __getattr__(self, name):
          import __builtin__
          """
          Reroutes all access to object.field through object.getField() or object.isField()
          """
          field  = "_" + name
          capitalized = name[0].capitalize() + name[1:]
          getter = "get" + capitalized
          questn = "is" + capitalized
          try:
              self.__dict__[field]
              if hasattr(self, getter):
                  method = getattr(self, getter)
                  return method()
              elif hasattr(self, questn):
                  method = getattr(self, questn)
                  return method()
          except:
              pass
          raise AttributeError("'%s' object has no attribute '%s' or '%s'" % (self.__class__.__name__, getter, questn))

      def __setattr__(self, name, value):
          """
          Reroutes all access to object.field through object.getField(), with the caveat
          that all sets on variables starting with "_" are permitted directly.
          """
          if name.startswith("_"):
              self.__dict__[name] = value
              return
          else:
              field  = "_" + name
              setter = "set" + name[0].capitalize() + name[1:]
              if hasattr(self, field) and hasattr(self, setter):
                  method = getattr(self, setter)
                  return method(value)
          raise AttributeError("'%s' object has no attribute '%s'" % (self.__class__.__name__, setter))

_omero_model.LightPathI = LightPathI
