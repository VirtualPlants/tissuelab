"""
   /*
   **   Generated by blitz/templates/resouces/combined.vm
   **
   **   Copyright 2007, 2008 Glencoe Software, Inc. All rights reserved.
   **   Use is subject to license terms supplied in LICENSE.txt
   **
   */
"""
import Ice
import IceImport
import omero
IceImport.load("omero_model_DetailsI")
IceImport.load("omero_model_LogicalChannel_ice")
from omero.rtypes import rlong
_omero = Ice.openModule("omero")
_omero_model = Ice.openModule("omero.model")
__name__ = "omero.model"
class LogicalChannelI(_omero_model.LogicalChannel):

      NAME =  "ome.model.core.LogicalChannel_name"
      PINHOLESIZE =  "ome.model.core.LogicalChannel_pinHoleSize"
      ILLUMINATION =  "ome.model.core.LogicalChannel_illumination"
      CONTRASTMETHOD =  "ome.model.core.LogicalChannel_contrastMethod"
      EXCITATIONWAVE =  "ome.model.core.LogicalChannel_excitationWave"
      EMISSIONWAVE =  "ome.model.core.LogicalChannel_emissionWave"
      FLUOR =  "ome.model.core.LogicalChannel_fluor"
      NDFILTER =  "ome.model.core.LogicalChannel_ndFilter"
      OTF =  "ome.model.core.LogicalChannel_otf"
      DETECTORSETTINGS =  "ome.model.core.LogicalChannel_detectorSettings"
      LIGHTSOURCESETTINGS =  "ome.model.core.LogicalChannel_lightSourceSettings"
      FILTERSET =  "ome.model.core.LogicalChannel_filterSet"
      SAMPLESPERPIXEL =  "ome.model.core.LogicalChannel_samplesPerPixel"
      PHOTOMETRICINTERPRETATION =  "ome.model.core.LogicalChannel_photometricInterpretation"
      MODE =  "ome.model.core.LogicalChannel_mode"
      POCKELCELLSETTING =  "ome.model.core.LogicalChannel_pockelCellSetting"
      CHANNELS =  "ome.model.core.LogicalChannel_channels"
      LIGHTPATH =  "ome.model.core.LogicalChannel_lightPath"
      DETAILS =  "ome.model.core.LogicalChannel_details"
      def errorIfUnloaded(self):
          if not self._loaded:
              raise _omero.UnloadedEntityException("Object unloaded:"+str(self))

      def throwNullCollectionException(self,propertyName):
          raise _omero.UnloadedEntityException(""+
          "Error updating collection:" + propertyName +"\n"+
          "Collection is currently null. This can be seen\n" +
          "by testing \""+ propertyName +"Loaded\". This implies\n"+
          "that this collection was unloaded. Please refresh this object\n"+
          "in order to update this collection.\n")

      def _toggleCollectionsLoaded(self,load):
          if load:
              self._channelsSeq = []
              self._channelsLoaded = True;
          else:
              self._channelsSeq = []
              self._channelsLoaded = False;

          pass

      def __init__(self, id = None, loaded = True):
          super(LogicalChannelI, self).__init__()
          # Relying on omero.rtypes.rlong's error-handling
          self._id = rlong(id)
          self._loaded = loaded
          if self._loaded:
             self._details = _omero_model.DetailsI()
             self._toggleCollectionsLoaded(True)

      def unload(self, current = None):
          self._loaded = False
          self.unloadName( )
          self.unloadPinHoleSize( )
          self.unloadIllumination( )
          self.unloadContrastMethod( )
          self.unloadExcitationWave( )
          self.unloadEmissionWave( )
          self.unloadFluor( )
          self.unloadNdFilter( )
          self.unloadOtf( )
          self.unloadDetectorSettings( )
          self.unloadLightSourceSettings( )
          self.unloadFilterSet( )
          self.unloadSamplesPerPixel( )
          self.unloadPhotometricInterpretation( )
          self.unloadMode( )
          self.unloadPockelCellSetting( )
          self.unloadChannels( )
          self.unloadLightPath( )
          self.unloadDetails( )

      def isLoaded(self, current = None):
          return self._loaded
      def unloadCollections(self, current = None):
          self._toggleCollectionsLoaded( False )
      def isGlobal(self, current = None):
          return  False ;
      def isMutable(self, current = None):
          return  True ;
      def isAnnotated(self, current = None):
          return  False ;
      def isLink(self, current = None):
          return  False ;
      def shallowCopy(self, current = None):
            if not self._loaded: return self.proxy()
            copy = LogicalChannelI()
            copy._id = self._id;
            copy._version = self._version;
            copy._details = None  # Unloading for the moment.
            raise omero.ClientError("NYI")
      def proxy(self, current = None):
          if self._id is None: raise omero.ClientError("Proxies require an id")
          return LogicalChannelI( self._id.getValue(), False )

      def getDetails(self, current = None):
          self.errorIfUnloaded()
          return self._details

      def unloadDetails(self, current = None):
          self._details = None

      def getId(self, current = None):
          return self._id

      def setId(self, _id, current = None):
          self._id = _id

      def checkUnloadedProperty(self, value, loadedField):
          if value == None:
              self.__dict__[loadedField] = False
          else:
              self.__dict__[loadedField] = True

      def getVersion(self, current = None):
          self.errorIfUnloaded()
          return self._version

      def setVersion(self, version, current = None):
          self.errorIfUnloaded()
          self._version = version

      def unloadName(self, ):
          self._nameLoaded = False
          self._name = None;

      def getName(self, current = None):
          self.errorIfUnloaded()
          return self._name

      def setName(self, _name, current = None):
          self.errorIfUnloaded()
          self._name = _name
          pass

      def unloadPinHoleSize(self, ):
          self._pinHoleSizeLoaded = False
          self._pinHoleSize = None;

      def getPinHoleSize(self, current = None):
          self.errorIfUnloaded()
          return self._pinHoleSize

      def setPinHoleSize(self, _pinHoleSize, current = None):
          self.errorIfUnloaded()
          self._pinHoleSize = _pinHoleSize
          pass

      def unloadIllumination(self, ):
          self._illuminationLoaded = False
          self._illumination = None;

      def getIllumination(self, current = None):
          self.errorIfUnloaded()
          return self._illumination

      def setIllumination(self, _illumination, current = None):
          self.errorIfUnloaded()
          self._illumination = _illumination
          pass

      def unloadContrastMethod(self, ):
          self._contrastMethodLoaded = False
          self._contrastMethod = None;

      def getContrastMethod(self, current = None):
          self.errorIfUnloaded()
          return self._contrastMethod

      def setContrastMethod(self, _contrastMethod, current = None):
          self.errorIfUnloaded()
          self._contrastMethod = _contrastMethod
          pass

      def unloadExcitationWave(self, ):
          self._excitationWaveLoaded = False
          self._excitationWave = None;

      def getExcitationWave(self, current = None):
          self.errorIfUnloaded()
          return self._excitationWave

      def setExcitationWave(self, _excitationWave, current = None):
          self.errorIfUnloaded()
          self._excitationWave = _excitationWave
          pass

      def unloadEmissionWave(self, ):
          self._emissionWaveLoaded = False
          self._emissionWave = None;

      def getEmissionWave(self, current = None):
          self.errorIfUnloaded()
          return self._emissionWave

      def setEmissionWave(self, _emissionWave, current = None):
          self.errorIfUnloaded()
          self._emissionWave = _emissionWave
          pass

      def unloadFluor(self, ):
          self._fluorLoaded = False
          self._fluor = None;

      def getFluor(self, current = None):
          self.errorIfUnloaded()
          return self._fluor

      def setFluor(self, _fluor, current = None):
          self.errorIfUnloaded()
          self._fluor = _fluor
          pass

      def unloadNdFilter(self, ):
          self._ndFilterLoaded = False
          self._ndFilter = None;

      def getNdFilter(self, current = None):
          self.errorIfUnloaded()
          return self._ndFilter

      def setNdFilter(self, _ndFilter, current = None):
          self.errorIfUnloaded()
          self._ndFilter = _ndFilter
          pass

      def unloadOtf(self, ):
          self._otfLoaded = False
          self._otf = None;

      def getOtf(self, current = None):
          self.errorIfUnloaded()
          return self._otf

      def setOtf(self, _otf, current = None):
          self.errorIfUnloaded()
          self._otf = _otf
          pass

      def unloadDetectorSettings(self, ):
          self._detectorSettingsLoaded = False
          self._detectorSettings = None;

      def getDetectorSettings(self, current = None):
          self.errorIfUnloaded()
          return self._detectorSettings

      def setDetectorSettings(self, _detectorSettings, current = None):
          self.errorIfUnloaded()
          self._detectorSettings = _detectorSettings
          pass

      def unloadLightSourceSettings(self, ):
          self._lightSourceSettingsLoaded = False
          self._lightSourceSettings = None;

      def getLightSourceSettings(self, current = None):
          self.errorIfUnloaded()
          return self._lightSourceSettings

      def setLightSourceSettings(self, _lightSourceSettings, current = None):
          self.errorIfUnloaded()
          self._lightSourceSettings = _lightSourceSettings
          pass

      def unloadFilterSet(self, ):
          self._filterSetLoaded = False
          self._filterSet = None;

      def getFilterSet(self, current = None):
          self.errorIfUnloaded()
          return self._filterSet

      def setFilterSet(self, _filterSet, current = None):
          self.errorIfUnloaded()
          self._filterSet = _filterSet
          pass

      def unloadSamplesPerPixel(self, ):
          self._samplesPerPixelLoaded = False
          self._samplesPerPixel = None;

      def getSamplesPerPixel(self, current = None):
          self.errorIfUnloaded()
          return self._samplesPerPixel

      def setSamplesPerPixel(self, _samplesPerPixel, current = None):
          self.errorIfUnloaded()
          self._samplesPerPixel = _samplesPerPixel
          pass

      def unloadPhotometricInterpretation(self, ):
          self._photometricInterpretationLoaded = False
          self._photometricInterpretation = None;

      def getPhotometricInterpretation(self, current = None):
          self.errorIfUnloaded()
          return self._photometricInterpretation

      def setPhotometricInterpretation(self, _photometricInterpretation, current = None):
          self.errorIfUnloaded()
          self._photometricInterpretation = _photometricInterpretation
          pass

      def unloadMode(self, ):
          self._modeLoaded = False
          self._mode = None;

      def getMode(self, current = None):
          self.errorIfUnloaded()
          return self._mode

      def setMode(self, _mode, current = None):
          self.errorIfUnloaded()
          self._mode = _mode
          pass

      def unloadPockelCellSetting(self, ):
          self._pockelCellSettingLoaded = False
          self._pockelCellSetting = None;

      def getPockelCellSetting(self, current = None):
          self.errorIfUnloaded()
          return self._pockelCellSetting

      def setPockelCellSetting(self, _pockelCellSetting, current = None):
          self.errorIfUnloaded()
          self._pockelCellSetting = _pockelCellSetting
          pass

      def unloadChannels(self, current = None):
          self._channelsLoaded = False
          self._channelsSeq = None;

      def _getChannels(self, current = None):
          self.errorIfUnloaded()
          return self._channelsSeq

      def _setChannels(self, _channels, current = None):
          self.errorIfUnloaded()
          self._channelsSeq = _channels
          self.checkUnloadedProperty(_channels,'channelsLoaded')

      def isChannelsLoaded(self):
          return self._channelsLoaded

      def sizeOfChannels(self, current = None):
          self.errorIfUnloaded()
          if not self._channelsLoaded: return -1
          return len(self._channelsSeq)

      def copyChannels(self, current = None):
          self.errorIfUnloaded()
          if not self._channelsLoaded: self.throwNullCollectionException("channelsSeq")
          return list(self._channelsSeq)

      def iterateChannels(self):
          self.errorIfUnloaded()
          if not self._channelsLoaded: self.throwNullCollectionException("channelsSeq")
          return iter(self._channelsSeq)

      def addChannel(self, target, current = None):
          self.errorIfUnloaded()
          if not self._channelsLoaded: self.throwNullCollectionException("channelsSeq")
          self._channelsSeq.append( target );
          target.setLogicalChannel( self )

      def addAllChannelSet(self, targets, current = None):
          self.errorIfUnloaded()
          if  not self._channelsLoaded: self.throwNullCollectionException("channelsSeq")
          self._channelsSeq.extend( targets )
          for target in targets:
              target.setLogicalChannel( self )

      def removeChannel(self, target, current = None):
          self.errorIfUnloaded()
          if not self._channelsLoaded: self.throwNullCollectionException("channelsSeq")
          self._channelsSeq.remove( target )
          target.setLogicalChannel( None )

      def removeAllChannelSet(self, targets, current = None):
          self.errorIfUnloaded()
          if not self._channelsLoaded: self.throwNullCollectionException("channelsSeq")
          for elt in targets:
              elt.setLogicalChannel( None )
              self._channelsSeq.remove( elt )

      def clearChannels(self, current = None):
          self.errorIfUnloaded()
          if not self._channelsLoaded: self.throwNullCollectionException("channelsSeq")
          for elt in self._channelsSeq:
              elt.setLogicalChannel( None )
          self._channelsSeq = list()

      def reloadChannels(self, toCopy, current = None):
          self.errorIfUnloaded()
          if self._channelsLoaded:
              raise omero.ClientError("Cannot reload active collection: channelsSeq")
          if not toCopy:
              raise omero.ClientError("Argument cannot be null")
          if toCopy.getId().getValue() != self.getId().getValue():
             raise omero.ClientError("Argument must have the same id as this instance")
          if toCopy.getDetails().getUpdateEvent().getId().getValue() < self.getDetails().getUpdateEvent().getId().getValue():
             raise omero.ClientError("Argument may not be older than this instance")
          copy = toCopy.copyChannels() # May also throw
          for elt in copy:
              elt.setLogicalChannel( self )
          self._channelsSeq = copy
          toCopy.unloadChannels()
          self._channelsLoaded = True

      def unloadLightPath(self, ):
          self._lightPathLoaded = False
          self._lightPath = None;

      def getLightPath(self, current = None):
          self.errorIfUnloaded()
          return self._lightPath

      def setLightPath(self, _lightPath, current = None):
          self.errorIfUnloaded()
          self._lightPath = _lightPath
          pass


      def ice_postUnmarshal(self):
          """
          Provides additional initialization once all data loaded
          """
          pass # Currently unused


      def ice_preMarshal(self):
          """
          Provides additional validation before data is sent
          """
          pass # Currently unused

      def __getattr__(self, name):
          import __builtin__
          """
          Reroutes all access to object.field through object.getField() or object.isField()
          """
          field  = "_" + name
          capitalized = name[0].capitalize() + name[1:]
          getter = "get" + capitalized
          questn = "is" + capitalized
          try:
              self.__dict__[field]
              if hasattr(self, getter):
                  method = getattr(self, getter)
                  return method()
              elif hasattr(self, questn):
                  method = getattr(self, questn)
                  return method()
          except:
              pass
          raise AttributeError("'%s' object has no attribute '%s' or '%s'" % (self.__class__.__name__, getter, questn))

      def __setattr__(self, name, value):
          """
          Reroutes all access to object.field through object.getField(), with the caveat
          that all sets on variables starting with "_" are permitted directly.
          """
          if name.startswith("_"):
              self.__dict__[name] = value
              return
          else:
              field  = "_" + name
              setter = "set" + name[0].capitalize() + name[1:]
              if hasattr(self, field) and hasattr(self, setter):
                  method = getattr(self, setter)
                  return method(value)
          raise AttributeError("'%s' object has no attribute '%s'" % (self.__class__.__name__, setter))

_omero_model.LogicalChannelI = LogicalChannelI
