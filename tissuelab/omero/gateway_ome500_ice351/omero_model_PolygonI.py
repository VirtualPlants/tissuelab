"""
   /*
   **   Generated by blitz/templates/resouces/combined.vm
   **
   **   Copyright 2007, 2008 Glencoe Software, Inc. All rights reserved.
   **   Use is subject to license terms supplied in LICENSE.txt
   **
   */
"""
import Ice
import IceImport
import omero
IceImport.load("omero_model_DetailsI")
IceImport.load("omero_model_Polygon_ice")
from omero.rtypes import rlong
_omero = Ice.openModule("omero")
_omero_model = Ice.openModule("omero.model")
__name__ = "omero.model"
class PolygonI(_omero_model.Polygon):

      POINTS =  "ome.model.roi.Polygon_points"
      TEXTVALUE =  "ome.model.roi.Polygon_textValue"
      THEZ =  "ome.model.roi.Polygon_theZ"
      THET =  "ome.model.roi.Polygon_theT"
      THEC =  "ome.model.roi.Polygon_theC"
      ROI =  "ome.model.roi.Polygon_roi"
      LOCKED =  "ome.model.roi.Polygon_locked"
      G =  "ome.model.roi.Polygon_g"
      TRANSFORM =  "ome.model.roi.Polygon_transform"
      VECTOREFFECT =  "ome.model.roi.Polygon_vectorEffect"
      VISIBILITY =  "ome.model.roi.Polygon_visibility"
      FILLCOLOR =  "ome.model.roi.Polygon_fillColor"
      FILLRULE =  "ome.model.roi.Polygon_fillRule"
      STROKECOLOR =  "ome.model.roi.Polygon_strokeColor"
      STROKEDASHARRAY =  "ome.model.roi.Polygon_strokeDashArray"
      STROKEDASHOFFSET =  "ome.model.roi.Polygon_strokeDashOffset"
      STROKELINECAP =  "ome.model.roi.Polygon_strokeLineCap"
      STROKELINEJOIN =  "ome.model.roi.Polygon_strokeLineJoin"
      STROKEMITERLIMIT =  "ome.model.roi.Polygon_strokeMiterLimit"
      STROKEWIDTH =  "ome.model.roi.Polygon_strokeWidth"
      FONTFAMILY =  "ome.model.roi.Polygon_fontFamily"
      FONTSIZE =  "ome.model.roi.Polygon_fontSize"
      FONTSTRETCH =  "ome.model.roi.Polygon_fontStretch"
      FONTSTYLE =  "ome.model.roi.Polygon_fontStyle"
      FONTVARIANT =  "ome.model.roi.Polygon_fontVariant"
      FONTWEIGHT =  "ome.model.roi.Polygon_fontWeight"
      DETAILS =  "ome.model.roi.Polygon_details"
      def errorIfUnloaded(self):
          if not self._loaded:
              raise _omero.UnloadedEntityException("Object unloaded:"+str(self))

      def throwNullCollectionException(self,propertyName):
          raise _omero.UnloadedEntityException(""+
          "Error updating collection:" + propertyName +"\n"+
          "Collection is currently null. This can be seen\n" +
          "by testing \""+ propertyName +"Loaded\". This implies\n"+
          "that this collection was unloaded. Please refresh this object\n"+
          "in order to update this collection.\n")

      def _toggleCollectionsLoaded(self,load):
          pass

      def __init__(self, id = None, loaded = True):
          super(PolygonI, self).__init__()
          # Relying on omero.rtypes.rlong's error-handling
          self._id = rlong(id)
          self._loaded = loaded
          if self._loaded:
             self._details = _omero_model.DetailsI()
             self._toggleCollectionsLoaded(True)

      def unload(self, current = None):
          self._loaded = False
          self.unloadPoints( )
          self.unloadTextValue( )
          self.unloadTheZ( )
          self.unloadTheT( )
          self.unloadTheC( )
          self.unloadRoi( )
          self.unloadLocked( )
          self.unloadG( )
          self.unloadTransform( )
          self.unloadVectorEffect( )
          self.unloadVisibility( )
          self.unloadFillColor( )
          self.unloadFillRule( )
          self.unloadStrokeColor( )
          self.unloadStrokeDashArray( )
          self.unloadStrokeDashOffset( )
          self.unloadStrokeLineCap( )
          self.unloadStrokeLineJoin( )
          self.unloadStrokeMiterLimit( )
          self.unloadStrokeWidth( )
          self.unloadFontFamily( )
          self.unloadFontSize( )
          self.unloadFontStretch( )
          self.unloadFontStyle( )
          self.unloadFontVariant( )
          self.unloadFontWeight( )
          self.unloadDetails( )

      def isLoaded(self, current = None):
          return self._loaded
      def unloadCollections(self, current = None):
          self._toggleCollectionsLoaded( False )
      def isGlobal(self, current = None):
          return  False ;
      def isMutable(self, current = None):
          return  True ;
      def isAnnotated(self, current = None):
          return  False ;
      def isLink(self, current = None):
          return  False ;
      def shallowCopy(self, current = None):
            if not self._loaded: return self.proxy()
            copy = PolygonI()
            copy._id = self._id;
            copy._version = self._version;
            copy._details = None  # Unloading for the moment.
            raise omero.ClientError("NYI")
      def proxy(self, current = None):
          if self._id is None: raise omero.ClientError("Proxies require an id")
          return PolygonI( self._id.getValue(), False )

      def getDetails(self, current = None):
          self.errorIfUnloaded()
          return self._details

      def unloadDetails(self, current = None):
          self._details = None

      def getId(self, current = None):
          return self._id

      def setId(self, _id, current = None):
          self._id = _id

      def checkUnloadedProperty(self, value, loadedField):
          if value == None:
              self.__dict__[loadedField] = False
          else:
              self.__dict__[loadedField] = True

      def getVersion(self, current = None):
          self.errorIfUnloaded()
          return self._version

      def setVersion(self, version, current = None):
          self.errorIfUnloaded()
          self._version = version

      def unloadPoints(self, ):
          self._pointsLoaded = False
          self._points = None;

      def getPoints(self, current = None):
          self.errorIfUnloaded()
          return self._points

      def setPoints(self, _points, current = None):
          self.errorIfUnloaded()
          self._points = _points
          pass

      def unloadTextValue(self, ):
          self._textValueLoaded = False
          self._textValue = None;

      def getTextValue(self, current = None):
          self.errorIfUnloaded()
          return self._textValue

      def setTextValue(self, _textValue, current = None):
          self.errorIfUnloaded()
          self._textValue = _textValue
          pass

      def unloadTheZ(self, ):
          self._theZLoaded = False
          self._theZ = None;

      def getTheZ(self, current = None):
          self.errorIfUnloaded()
          return self._theZ

      def setTheZ(self, _theZ, current = None):
          self.errorIfUnloaded()
          self._theZ = _theZ
          pass

      def unloadTheT(self, ):
          self._theTLoaded = False
          self._theT = None;

      def getTheT(self, current = None):
          self.errorIfUnloaded()
          return self._theT

      def setTheT(self, _theT, current = None):
          self.errorIfUnloaded()
          self._theT = _theT
          pass

      def unloadTheC(self, ):
          self._theCLoaded = False
          self._theC = None;

      def getTheC(self, current = None):
          self.errorIfUnloaded()
          return self._theC

      def setTheC(self, _theC, current = None):
          self.errorIfUnloaded()
          self._theC = _theC
          pass

      def unloadRoi(self, ):
          self._roiLoaded = False
          self._roi = None;

      def getRoi(self, current = None):
          self.errorIfUnloaded()
          return self._roi

      def setRoi(self, _roi, current = None):
          self.errorIfUnloaded()
          self._roi = _roi
          pass

      def unloadLocked(self, ):
          self._lockedLoaded = False
          self._locked = None;

      def getLocked(self, current = None):
          self.errorIfUnloaded()
          return self._locked

      def setLocked(self, _locked, current = None):
          self.errorIfUnloaded()
          self._locked = _locked
          pass

      def unloadG(self, ):
          self._gLoaded = False
          self._g = None;

      def getG(self, current = None):
          self.errorIfUnloaded()
          return self._g

      def setG(self, _g, current = None):
          self.errorIfUnloaded()
          self._g = _g
          pass

      def unloadTransform(self, ):
          self._transformLoaded = False
          self._transform = None;

      def getTransform(self, current = None):
          self.errorIfUnloaded()
          return self._transform

      def setTransform(self, _transform, current = None):
          self.errorIfUnloaded()
          self._transform = _transform
          pass

      def unloadVectorEffect(self, ):
          self._vectorEffectLoaded = False
          self._vectorEffect = None;

      def getVectorEffect(self, current = None):
          self.errorIfUnloaded()
          return self._vectorEffect

      def setVectorEffect(self, _vectorEffect, current = None):
          self.errorIfUnloaded()
          self._vectorEffect = _vectorEffect
          pass

      def unloadVisibility(self, ):
          self._visibilityLoaded = False
          self._visibility = None;

      def getVisibility(self, current = None):
          self.errorIfUnloaded()
          return self._visibility

      def setVisibility(self, _visibility, current = None):
          self.errorIfUnloaded()
          self._visibility = _visibility
          pass

      def unloadFillColor(self, ):
          self._fillColorLoaded = False
          self._fillColor = None;

      def getFillColor(self, current = None):
          self.errorIfUnloaded()
          return self._fillColor

      def setFillColor(self, _fillColor, current = None):
          self.errorIfUnloaded()
          self._fillColor = _fillColor
          pass

      def unloadFillRule(self, ):
          self._fillRuleLoaded = False
          self._fillRule = None;

      def getFillRule(self, current = None):
          self.errorIfUnloaded()
          return self._fillRule

      def setFillRule(self, _fillRule, current = None):
          self.errorIfUnloaded()
          self._fillRule = _fillRule
          pass

      def unloadStrokeColor(self, ):
          self._strokeColorLoaded = False
          self._strokeColor = None;

      def getStrokeColor(self, current = None):
          self.errorIfUnloaded()
          return self._strokeColor

      def setStrokeColor(self, _strokeColor, current = None):
          self.errorIfUnloaded()
          self._strokeColor = _strokeColor
          pass

      def unloadStrokeDashArray(self, ):
          self._strokeDashArrayLoaded = False
          self._strokeDashArray = None;

      def getStrokeDashArray(self, current = None):
          self.errorIfUnloaded()
          return self._strokeDashArray

      def setStrokeDashArray(self, _strokeDashArray, current = None):
          self.errorIfUnloaded()
          self._strokeDashArray = _strokeDashArray
          pass

      def unloadStrokeDashOffset(self, ):
          self._strokeDashOffsetLoaded = False
          self._strokeDashOffset = None;

      def getStrokeDashOffset(self, current = None):
          self.errorIfUnloaded()
          return self._strokeDashOffset

      def setStrokeDashOffset(self, _strokeDashOffset, current = None):
          self.errorIfUnloaded()
          self._strokeDashOffset = _strokeDashOffset
          pass

      def unloadStrokeLineCap(self, ):
          self._strokeLineCapLoaded = False
          self._strokeLineCap = None;

      def getStrokeLineCap(self, current = None):
          self.errorIfUnloaded()
          return self._strokeLineCap

      def setStrokeLineCap(self, _strokeLineCap, current = None):
          self.errorIfUnloaded()
          self._strokeLineCap = _strokeLineCap
          pass

      def unloadStrokeLineJoin(self, ):
          self._strokeLineJoinLoaded = False
          self._strokeLineJoin = None;

      def getStrokeLineJoin(self, current = None):
          self.errorIfUnloaded()
          return self._strokeLineJoin

      def setStrokeLineJoin(self, _strokeLineJoin, current = None):
          self.errorIfUnloaded()
          self._strokeLineJoin = _strokeLineJoin
          pass

      def unloadStrokeMiterLimit(self, ):
          self._strokeMiterLimitLoaded = False
          self._strokeMiterLimit = None;

      def getStrokeMiterLimit(self, current = None):
          self.errorIfUnloaded()
          return self._strokeMiterLimit

      def setStrokeMiterLimit(self, _strokeMiterLimit, current = None):
          self.errorIfUnloaded()
          self._strokeMiterLimit = _strokeMiterLimit
          pass

      def unloadStrokeWidth(self, ):
          self._strokeWidthLoaded = False
          self._strokeWidth = None;

      def getStrokeWidth(self, current = None):
          self.errorIfUnloaded()
          return self._strokeWidth

      def setStrokeWidth(self, _strokeWidth, current = None):
          self.errorIfUnloaded()
          self._strokeWidth = _strokeWidth
          pass

      def unloadFontFamily(self, ):
          self._fontFamilyLoaded = False
          self._fontFamily = None;

      def getFontFamily(self, current = None):
          self.errorIfUnloaded()
          return self._fontFamily

      def setFontFamily(self, _fontFamily, current = None):
          self.errorIfUnloaded()
          self._fontFamily = _fontFamily
          pass

      def unloadFontSize(self, ):
          self._fontSizeLoaded = False
          self._fontSize = None;

      def getFontSize(self, current = None):
          self.errorIfUnloaded()
          return self._fontSize

      def setFontSize(self, _fontSize, current = None):
          self.errorIfUnloaded()
          self._fontSize = _fontSize
          pass

      def unloadFontStretch(self, ):
          self._fontStretchLoaded = False
          self._fontStretch = None;

      def getFontStretch(self, current = None):
          self.errorIfUnloaded()
          return self._fontStretch

      def setFontStretch(self, _fontStretch, current = None):
          self.errorIfUnloaded()
          self._fontStretch = _fontStretch
          pass

      def unloadFontStyle(self, ):
          self._fontStyleLoaded = False
          self._fontStyle = None;

      def getFontStyle(self, current = None):
          self.errorIfUnloaded()
          return self._fontStyle

      def setFontStyle(self, _fontStyle, current = None):
          self.errorIfUnloaded()
          self._fontStyle = _fontStyle
          pass

      def unloadFontVariant(self, ):
          self._fontVariantLoaded = False
          self._fontVariant = None;

      def getFontVariant(self, current = None):
          self.errorIfUnloaded()
          return self._fontVariant

      def setFontVariant(self, _fontVariant, current = None):
          self.errorIfUnloaded()
          self._fontVariant = _fontVariant
          pass

      def unloadFontWeight(self, ):
          self._fontWeightLoaded = False
          self._fontWeight = None;

      def getFontWeight(self, current = None):
          self.errorIfUnloaded()
          return self._fontWeight

      def setFontWeight(self, _fontWeight, current = None):
          self.errorIfUnloaded()
          self._fontWeight = _fontWeight
          pass


      def ice_postUnmarshal(self):
          """
          Provides additional initialization once all data loaded
          """
          pass # Currently unused


      def ice_preMarshal(self):
          """
          Provides additional validation before data is sent
          """
          pass # Currently unused

      def __getattr__(self, name):
          import __builtin__
          """
          Reroutes all access to object.field through object.getField() or object.isField()
          """
          field  = "_" + name
          capitalized = name[0].capitalize() + name[1:]
          getter = "get" + capitalized
          questn = "is" + capitalized
          try:
              self.__dict__[field]
              if hasattr(self, getter):
                  method = getattr(self, getter)
                  return method()
              elif hasattr(self, questn):
                  method = getattr(self, questn)
                  return method()
          except:
              pass
          raise AttributeError("'%s' object has no attribute '%s' or '%s'" % (self.__class__.__name__, getter, questn))

      def __setattr__(self, name, value):
          """
          Reroutes all access to object.field through object.getField(), with the caveat
          that all sets on variables starting with "_" are permitted directly.
          """
          if name.startswith("_"):
              self.__dict__[name] = value
              return
          else:
              field  = "_" + name
              setter = "set" + name[0].capitalize() + name[1:]
              if hasattr(self, field) and hasattr(self, setter):
                  method = getattr(self, setter)
                  return method(value)
          raise AttributeError("'%s' object has no attribute '%s'" % (self.__class__.__name__, setter))

_omero_model.PolygonI = PolygonI
