"""
   /*
   **   Generated by blitz/templates/resouces/combined.vm
   **
   **   Copyright 2007, 2008 Glencoe Software, Inc. All rights reserved.
   **   Use is subject to license terms supplied in LICENSE.txt
   **
   */
"""
import Ice
import IceImport
import omero
IceImport.load("omero_model_DetailsI")
IceImport.load("omero_model_Laser_ice")
from omero.rtypes import rlong
_omero = Ice.openModule("omero")
_omero_model = Ice.openModule("omero.model")
__name__ = "omero.model"
class LaserI(_omero_model.Laser):

      TYPE =  "ome.model.acquisition.Laser_type"
      LASERMEDIUM =  "ome.model.acquisition.Laser_laserMedium"
      FREQUENCYMULTIPLICATION =  "ome.model.acquisition.Laser_frequencyMultiplication"
      TUNEABLE =  "ome.model.acquisition.Laser_tuneable"
      PULSE =  "ome.model.acquisition.Laser_pulse"
      WAVELENGTH =  "ome.model.acquisition.Laser_wavelength"
      POCKELCELL =  "ome.model.acquisition.Laser_pockelCell"
      PUMP =  "ome.model.acquisition.Laser_pump"
      REPETITIONRATE =  "ome.model.acquisition.Laser_repetitionRate"
      MANUFACTURER =  "ome.model.acquisition.Laser_manufacturer"
      MODEL =  "ome.model.acquisition.Laser_model"
      POWER =  "ome.model.acquisition.Laser_power"
      LOTNUMBER =  "ome.model.acquisition.Laser_lotNumber"
      SERIALNUMBER =  "ome.model.acquisition.Laser_serialNumber"
      INSTRUMENT =  "ome.model.acquisition.Laser_instrument"
      DETAILS =  "ome.model.acquisition.Laser_details"
      def errorIfUnloaded(self):
          if not self._loaded:
              raise _omero.UnloadedEntityException("Object unloaded:"+str(self))

      def throwNullCollectionException(self,propertyName):
          raise _omero.UnloadedEntityException(""+
          "Error updating collection:" + propertyName +"\n"+
          "Collection is currently null. This can be seen\n" +
          "by testing \""+ propertyName +"Loaded\". This implies\n"+
          "that this collection was unloaded. Please refresh this object\n"+
          "in order to update this collection.\n")

      def _toggleCollectionsLoaded(self,load):
          pass

      def __init__(self, id = None, loaded = True):
          super(LaserI, self).__init__()
          # Relying on omero.rtypes.rlong's error-handling
          self._id = rlong(id)
          self._loaded = loaded
          if self._loaded:
             self._details = _omero_model.DetailsI()
             self._toggleCollectionsLoaded(True)

      def unload(self, current = None):
          self._loaded = False
          self.unloadType( )
          self.unloadLaserMedium( )
          self.unloadFrequencyMultiplication( )
          self.unloadTuneable( )
          self.unloadPulse( )
          self.unloadWavelength( )
          self.unloadPockelCell( )
          self.unloadPump( )
          self.unloadRepetitionRate( )
          self.unloadManufacturer( )
          self.unloadModel( )
          self.unloadPower( )
          self.unloadLotNumber( )
          self.unloadSerialNumber( )
          self.unloadInstrument( )
          self.unloadDetails( )

      def isLoaded(self, current = None):
          return self._loaded
      def unloadCollections(self, current = None):
          self._toggleCollectionsLoaded( False )
      def isGlobal(self, current = None):
          return  False ;
      def isMutable(self, current = None):
          return  True ;
      def isAnnotated(self, current = None):
          return  False ;
      def isLink(self, current = None):
          return  False ;
      def shallowCopy(self, current = None):
            if not self._loaded: return self.proxy()
            copy = LaserI()
            copy._id = self._id;
            copy._version = self._version;
            copy._details = None  # Unloading for the moment.
            raise omero.ClientError("NYI")
      def proxy(self, current = None):
          if self._id is None: raise omero.ClientError("Proxies require an id")
          return LaserI( self._id.getValue(), False )

      def getDetails(self, current = None):
          self.errorIfUnloaded()
          return self._details

      def unloadDetails(self, current = None):
          self._details = None

      def getId(self, current = None):
          return self._id

      def setId(self, _id, current = None):
          self._id = _id

      def checkUnloadedProperty(self, value, loadedField):
          if value == None:
              self.__dict__[loadedField] = False
          else:
              self.__dict__[loadedField] = True

      def getVersion(self, current = None):
          self.errorIfUnloaded()
          return self._version

      def setVersion(self, version, current = None):
          self.errorIfUnloaded()
          self._version = version

      def unloadType(self, ):
          self._typeLoaded = False
          self._type = None;

      def getType(self, current = None):
          self.errorIfUnloaded()
          return self._type

      def setType(self, _type, current = None):
          self.errorIfUnloaded()
          self._type = _type
          pass

      def unloadLaserMedium(self, ):
          self._laserMediumLoaded = False
          self._laserMedium = None;

      def getLaserMedium(self, current = None):
          self.errorIfUnloaded()
          return self._laserMedium

      def setLaserMedium(self, _laserMedium, current = None):
          self.errorIfUnloaded()
          self._laserMedium = _laserMedium
          pass

      def unloadFrequencyMultiplication(self, ):
          self._frequencyMultiplicationLoaded = False
          self._frequencyMultiplication = None;

      def getFrequencyMultiplication(self, current = None):
          self.errorIfUnloaded()
          return self._frequencyMultiplication

      def setFrequencyMultiplication(self, _frequencyMultiplication, current = None):
          self.errorIfUnloaded()
          self._frequencyMultiplication = _frequencyMultiplication
          pass

      def unloadTuneable(self, ):
          self._tuneableLoaded = False
          self._tuneable = None;

      def getTuneable(self, current = None):
          self.errorIfUnloaded()
          return self._tuneable

      def setTuneable(self, _tuneable, current = None):
          self.errorIfUnloaded()
          self._tuneable = _tuneable
          pass

      def unloadPulse(self, ):
          self._pulseLoaded = False
          self._pulse = None;

      def getPulse(self, current = None):
          self.errorIfUnloaded()
          return self._pulse

      def setPulse(self, _pulse, current = None):
          self.errorIfUnloaded()
          self._pulse = _pulse
          pass

      def unloadWavelength(self, ):
          self._wavelengthLoaded = False
          self._wavelength = None;

      def getWavelength(self, current = None):
          self.errorIfUnloaded()
          return self._wavelength

      def setWavelength(self, _wavelength, current = None):
          self.errorIfUnloaded()
          self._wavelength = _wavelength
          pass

      def unloadPockelCell(self, ):
          self._pockelCellLoaded = False
          self._pockelCell = None;

      def getPockelCell(self, current = None):
          self.errorIfUnloaded()
          return self._pockelCell

      def setPockelCell(self, _pockelCell, current = None):
          self.errorIfUnloaded()
          self._pockelCell = _pockelCell
          pass

      def unloadPump(self, ):
          self._pumpLoaded = False
          self._pump = None;

      def getPump(self, current = None):
          self.errorIfUnloaded()
          return self._pump

      def setPump(self, _pump, current = None):
          self.errorIfUnloaded()
          self._pump = _pump
          pass

      def unloadRepetitionRate(self, ):
          self._repetitionRateLoaded = False
          self._repetitionRate = None;

      def getRepetitionRate(self, current = None):
          self.errorIfUnloaded()
          return self._repetitionRate

      def setRepetitionRate(self, _repetitionRate, current = None):
          self.errorIfUnloaded()
          self._repetitionRate = _repetitionRate
          pass

      def unloadManufacturer(self, ):
          self._manufacturerLoaded = False
          self._manufacturer = None;

      def getManufacturer(self, current = None):
          self.errorIfUnloaded()
          return self._manufacturer

      def setManufacturer(self, _manufacturer, current = None):
          self.errorIfUnloaded()
          self._manufacturer = _manufacturer
          pass

      def unloadModel(self, ):
          self._modelLoaded = False
          self._model = None;

      def getModel(self, current = None):
          self.errorIfUnloaded()
          return self._model

      def setModel(self, _model, current = None):
          self.errorIfUnloaded()
          self._model = _model
          pass

      def unloadPower(self, ):
          self._powerLoaded = False
          self._power = None;

      def getPower(self, current = None):
          self.errorIfUnloaded()
          return self._power

      def setPower(self, _power, current = None):
          self.errorIfUnloaded()
          self._power = _power
          pass

      def unloadLotNumber(self, ):
          self._lotNumberLoaded = False
          self._lotNumber = None;

      def getLotNumber(self, current = None):
          self.errorIfUnloaded()
          return self._lotNumber

      def setLotNumber(self, _lotNumber, current = None):
          self.errorIfUnloaded()
          self._lotNumber = _lotNumber
          pass

      def unloadSerialNumber(self, ):
          self._serialNumberLoaded = False
          self._serialNumber = None;

      def getSerialNumber(self, current = None):
          self.errorIfUnloaded()
          return self._serialNumber

      def setSerialNumber(self, _serialNumber, current = None):
          self.errorIfUnloaded()
          self._serialNumber = _serialNumber
          pass

      def unloadInstrument(self, ):
          self._instrumentLoaded = False
          self._instrument = None;

      def getInstrument(self, current = None):
          self.errorIfUnloaded()
          return self._instrument

      def setInstrument(self, _instrument, current = None):
          self.errorIfUnloaded()
          self._instrument = _instrument
          pass


      def ice_postUnmarshal(self):
          """
          Provides additional initialization once all data loaded
          """
          pass # Currently unused


      def ice_preMarshal(self):
          """
          Provides additional validation before data is sent
          """
          pass # Currently unused

      def __getattr__(self, name):
          import __builtin__
          """
          Reroutes all access to object.field through object.getField() or object.isField()
          """
          field  = "_" + name
          capitalized = name[0].capitalize() + name[1:]
          getter = "get" + capitalized
          questn = "is" + capitalized
          try:
              self.__dict__[field]
              if hasattr(self, getter):
                  method = getattr(self, getter)
                  return method()
              elif hasattr(self, questn):
                  method = getattr(self, questn)
                  return method()
          except:
              pass
          raise AttributeError("'%s' object has no attribute '%s' or '%s'" % (self.__class__.__name__, getter, questn))

      def __setattr__(self, name, value):
          """
          Reroutes all access to object.field through object.getField(), with the caveat
          that all sets on variables starting with "_" are permitted directly.
          """
          if name.startswith("_"):
              self.__dict__[name] = value
              return
          else:
              field  = "_" + name
              setter = "set" + name[0].capitalize() + name[1:]
              if hasattr(self, field) and hasattr(self, setter):
                  method = getattr(self, setter)
                  return method(value)
          raise AttributeError("'%s' object has no attribute '%s'" % (self.__class__.__name__, setter))

_omero_model.LaserI = LaserI
