# **********************************************************************
#
# Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.5.1
#
# <auto-generated>
#
# Generated from file `Gateway.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy
import omero_Collections_ice
import omero_ServicesF_ice
import omero_ServerErrors_ice

# Included module omero
_M_omero = Ice.openModule('omero')

# Included module omero.model
_M_omero.model = Ice.openModule('omero.model')

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Included module omero.sys
_M_omero.sys = Ice.openModule('omero.sys')

# Included module omero.api
_M_omero.api = Ice.openModule('omero.api')

# Included module Glacier2
_M_Glacier2 = Ice.openModule('Glacier2')

# Included module omero.grid
_M_omero.grid = Ice.openModule('omero.grid')

# Start of module omero
__name__ = 'omero'

# Start of module omero.api
__name__ = 'omero.api'

if 'BufferedImage' not in _M_omero.api.__dict__:
    _M_omero.api.BufferedImage = Ice.createTempClass()
    class BufferedImage(Ice.Object):
        '''Simple wrapper around an array of packed ints. Individual language
mappings may want to add a subclass to the ObjectFactory for working
with a visual representation of the ints.'''
        def __init__(self, packedInts=None):
            self.packedInts = packedInts

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::omero::api::BufferedImage')

        def ice_id(self, current=None):
            return '::omero::api::BufferedImage'

        def ice_staticId():
            return '::omero::api::BufferedImage'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_omero.api._t_BufferedImage)

        __repr__ = __str__

    _M_omero.api.BufferedImagePrx = Ice.createTempClass()
    class BufferedImagePrx(Ice.ObjectPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_omero.api.BufferedImagePrx.ice_checkedCast(proxy, '::omero::api::BufferedImage', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_omero.api.BufferedImagePrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_omero.api._t_BufferedImagePrx = IcePy.defineProxy('::omero::api::BufferedImage', BufferedImagePrx)

    _M_omero.api._t_BufferedImage = IcePy.defineClass('::omero::api::BufferedImage', BufferedImage, -1, (), False, False, None, (), (('packedInts', (), _M_omero.api._t_IntegerArray, False, 0),))
    BufferedImage._ice_type = _M_omero.api._t_BufferedImage

    _M_omero.api.BufferedImage = BufferedImage
    del BufferedImage

    _M_omero.api.BufferedImagePrx = BufferedImagePrx
    del BufferedImagePrx

if 'ContainerClass' not in _M_omero.api.__dict__:
    _M_omero.api.ContainerClass = Ice.createTempClass()
    class ContainerClass(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    ContainerClass.Category = ContainerClass("Category", 0)
    ContainerClass.CategoryGroup = ContainerClass("CategoryGroup", 1)
    ContainerClass.Project = ContainerClass("Project", 2)
    ContainerClass.Dataset = ContainerClass("Dataset", 3)
    ContainerClass.Image = ContainerClass("Image", 4)
    ContainerClass._enumerators = { 0:ContainerClass.Category, 1:ContainerClass.CategoryGroup, 2:ContainerClass.Project, 3:ContainerClass.Dataset, 4:ContainerClass.Image }

    _M_omero.api._t_ContainerClass = IcePy.defineEnum('::omero::api::ContainerClass', ContainerClass, (), ContainerClass._enumerators)

    _M_omero.api.ContainerClass = ContainerClass
    del ContainerClass

if 'Gateway' not in _M_omero.api.__dict__:
    _M_omero.api.Gateway = Ice.createTempClass()
    class Gateway(_M_omero.api.StatefulServiceInterface):
        '''High-level service which provides a single interface for most client
activities. Each stateful Gateway instance internally manages multiple
other stateful instances (RenderingEngine, ThumbnailStore, etc.) significantly
simplyifing usage.'''
        def __init__(self):
            if Ice.getType(self) == _M_omero.api.Gateway:
                raise RuntimeError('omero.api.Gateway is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::omero::api::Gateway', '::omero::api::ServiceInterface', '::omero::api::StatefulServiceInterface')

        def ice_id(self, current=None):
            return '::omero::api::Gateway'

        def ice_staticId():
            return '::omero::api::Gateway'
        ice_staticId = staticmethod(ice_staticId)

        def getProjects(self, ids, withLeaves, current=None):
            '''Get the projects, and datasets in the OMERO.Blitz server in the user
account.

Arguments:
    ids The ids of the projects from, if null will retrieve all
projects from the users account.
    withLeaves get the projects, images and pixels too.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
            pass

        def getDatasets(self, ids, withLeaves, current=None):
            '''Get the datasets in the OMERO.Blitz server with the given ids.

Arguments:
    ids of the datasets to retrieve, if null get all users datasets.
    withLeaves get the images and pixels too.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
            pass

        def getDataset(self, datasetId, leaves, current=None):
            '''Get the dataset in the OMERO.Blitz server with the given id.
Arguments:
    id of the dataset to retrieve
    withLeaves get the images and pixels too.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
            pass

        def getPixelsFromImage(self, imageId, current=None):
            '''Get the pixels associated with the image, this is normally one pixels per
image, but can be more.
Arguments:
    imageId
Returns:
    the list of pixels.
Exceptions:
    omero::ServerError'''
            pass

        def getImage(self, id, current=None):
            '''Get the image with id
Arguments:
    id see above
Returns:
    see above.
Exceptions:
    omero::ServerError'''
            pass

        def getImages(self, parentType, ids, current=None):
            '''Get the images in the OMERO.Blitz server from the object parentType with
id's in list ids.
Arguments:
    parentType see above.
    ids see above.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
            pass

        def findAllByQuery(self, myQuery, current=None):
            '''Run the query passed as a string in the iQuery interface. This method will
return list of objects.
Arguments:
    myQuery string containing the query.
Returns:
    the result.
Exceptions:
    omero::ServerError'''
            pass

        def findByQuery(self, myQuery, current=None):
            '''Run the query passed as a string in the iQuery interface.
The method expects to return only one result from the query, if more than
one result is to be returned the method will throw an exception.
Arguments:
    myQuery string containing the query.
Returns:
    the result.
Exceptions:
    omero::ServerError'''
            pass

        def getPlane(self, pixelsId, z, c, t, current=None):
            '''Get the raw plane for the pixels pixelsId, this returns a 2d array
representing the plane, it returns doubles but will not lose data.
Arguments:
    pixelsId id of the pixels to retrieve.
    c the channel of the pixels to retrieve.
    t the time point to retrieve.
    z the z section to retrieve.
Returns:
    The raw plane in as byte stream.
Exceptions:
    omero::ServerError'''
            pass

        def getPixels(self, pixelsId, current=None):
            '''Get the pixels information for an image, this method will also
attach the logical channels, channels, and other metadata in the pixels.
Arguments:
    pixelsId image id relating to the pixels.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
            pass

        def copyPixelsXYTZ(self, pixelsID, x, y, t, z, channelList, methodology, current=None):
            '''Copy the pixels to a new pixels, this is only the data object
and does not create a pixels object in the RawPixelsStore,
To load data into the plane the uploadPlane(long, int, int, int, DoubleArrayArray)
to add data to the pixels.
Arguments:
    pixelsID pixels id to copy.
    x width of plane.
    y height of plane.
    t num timepoints
    z num zsections.
    channelList the list of channels to copy, this is the channel index.
    methodology user supplied text, describing the methods that
created the pixels.
Returns:
    new id.
Exceptions:
    omero::ServerError'''
            pass

        def copyPixels(self, pixelsID, channelList, methodology, current=None):
            '''Copy the pixels to a new pixels, this is only the data object
and does not create a pixels object in the RawPixelsStore,
To load data into the plane the uploadPlane(long, DoubleArrayArray)
to add data to the pixels.
Arguments:
    pixelsID pixels id to copy.
    channelList the list of channels to copy, this is the channel index.
    methodology user supplied text, describing the methods that
created the pixels.
Returns:
    new id.
Exceptions:
    omero::ServerError'''
            pass

        def copyImage(self, imageId, x, y, t, z, channelList, imageName, current=None):
            '''Copy the image and it's attached pixels and
metadata to a new Image and return the id of the new image. The method
will not copy annotations or attachments.
Arguments:
    imageId image id to copy.
    x width of plane.
    y height of plane.
    t The number of time-points
    z The number of zSections.
    channelList the list of channels to copy, [0-(sizeC-1)].
    imageName The image name.
Returns:
    new id.
Exceptions:
    omero::ServerError'''
            pass

        def uploadPlane(self, pixelsId, z, c, t, data, current=None):
            '''Upload the plane to the server, on pixels id with channel and the
time, + z section. the data is the client 2d data values. This will
be converted to the raw server bytes.
Arguments:
    pixelsId pixels id to upload to .
    z z section.
    c channel.
    t time point.
    data plane data.
Exceptions:
    omero::ServerError'''
            pass

        def updatePixels(self, pixels, current=None):
            '''Update the pixels object on the server, updating appropriate tables in the
database and returning a new copy of the pixels.
Arguments:
    object see above.
Returns:
    the new updated pixels.
Exceptions:
    omero::ServerError'''
            pass

        def getPixelTypes(self, current=None):
            '''Get a list of all the possible pixelsTypes in the server.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
            pass

        def getPixelType(self, type, current=None):
            '''Get the pixelsType for type of name type.
Arguments:
    type see above.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
            pass

        def getRenderedImage(self, pixelsId, z, t, current=None):
            '''Render the pixels for the zSection z and timePoint t.
Arguments:
    pixelsId pixels id of the plane to render
    z z section to render
    t timepoint to render
Returns:
    The image as a buffered image.
Exceptions:
    omero::ServerError'''
            pass

        def renderAsPackedIntAsRGBA(self, pixelsId, z, t, current=None):
            '''Render the pixels for the zSection z and timePoint t.
Arguments:
    pixelsId pixels id of the plane to render
    z z section to render
    t timepoint to render
Returns:
    The image as a buffered image.
Exceptions:
    omero::ServerError'''
            pass

        def getRenderedImageMatrix(self, pixelsId, z, t, current=None):
            '''Render the pixels for the zSection z and timePoint t.
Arguments:
    pixelsId pixels id of the plane to render
    z z section to render
    t timepoint to render
Returns:
    The image as a 3d array where it represents the image as
[x][y][channel]
Exceptions:
    omero::ServerError'''
            pass

        def setActive(self, pixelsId, w, active, current=None):
            '''Set the active channels to be on or off in the rendering engine for
the pixels.
Arguments:
    pixelsId the pixels id.
    w the channel
    active set active?
Exceptions:
    omero::ServerError'''
            pass

        def getThumbnail(self, pixelsId, sizeX, sizeY, current=None):
            '''Get the thumbnail of the image.
Arguments:
    pixelsId for pixelsId
    sizeX size of thumbnail.
    sizeY size of thumbnail.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
            pass

        def getThumbnailSet(self, sizeX, sizeY, pixelsIds, current=None):
            '''Get a set of thumbnails, of size X, Y from the list of pixelId's supplied
in the list.
Arguments:
    sizeX size of thumbnail.
    sizeY size of thumbnail.
    pixelsIds list of ids.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
            pass

        def attachImageToDataset(self, dataset, image, current=None):
            '''Attach an image to a dataset.
Arguments:
    dataset see above.
    image see above.
Exceptions:
    omero::ServerError'''
            pass

        def createImage(self, sizeX, sizeY, sizeZ, sizeT, channelList, pixelsType, name, description, current=None):
            '''Create a new Image of X,Y, and zSections+time-points. The channelList is
the emission wavelength of the channel and the pixelsType.
Arguments:
    sizeX width of plane.
    sizeY height of plane.
    sizeZ num zSections.
    sizeT num time-points
    channelList the list of channels to copy.
    pixelsType the type of pixels in the image.
    name the image name.
    description the description of the image.
Returns:
    new id.
Exceptions:
    omero::ServerError'''
            pass

        def getImageFromDatasetByName(self, datasetId, imageName, current=None):
            '''Get the images from the dataset with name, this can use wild cards.
Arguments:
    datasetId see above.
    imageName see above.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
            pass

        def getImageByName(self, imageName, current=None):
            '''Get the list of images with name containing imageName.
Arguments:
    imageName see above.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
            pass

        def saveObject(self, obj, current=None):
            '''Save the object to the db .
Arguments:
    obj see above.
Exceptions:
    omero::ServerError'''
            pass

        def saveAndReturnObject(self, obj, current=None):
            '''Save and return the Object.
Arguments:
    obj see above.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
            pass

        def saveArray(self, graph, current=None):
            '''Save the array.
Arguments:
    graph see above.
Exceptions:
    omero::ServerError'''
            pass

        def saveAndReturnArray(self, graph, current=None):
            '''Save and return the array.
Arguments:
     The Type to return.
    graph the object
Returns:
    see above.
Exceptions:
    omero::ServerError'''
            pass

        def deleteObject(self, row, current=None):
            '''Delete the object.
Arguments:
    row the object.(commonly a row in db)
Exceptions:
    omero::ServerError'''
            pass

        def keepAlive(self, current=None):
            '''Keep service alive.
Exceptions:
    omero::ServerError'''
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_omero.api._t_Gateway)

        __repr__ = __str__

    _M_omero.api.GatewayPrx = Ice.createTempClass()
    class GatewayPrx(_M_omero.api.StatefulServiceInterfacePrx):

        '''Get the projects, and datasets in the OMERO.Blitz server in the user
account.

Arguments:
    ids The ids of the projects from, if null will retrieve all
projects from the users account.
    withLeaves get the projects, images and pixels too.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def getProjects(self, ids, withLeaves, _ctx=None):
            return _M_omero.api.Gateway._op_getProjects.invoke(self, ((ids, withLeaves), _ctx))

        '''Get the projects, and datasets in the OMERO.Blitz server in the user
account.

Arguments:
    ids The ids of the projects from, if null will retrieve all
projects from the users account.
    withLeaves get the projects, images and pixels too.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def begin_getProjects(self, ids, withLeaves, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.Gateway._op_getProjects.begin(self, ((ids, withLeaves), _response, _ex, _sent, _ctx))

        '''Get the projects, and datasets in the OMERO.Blitz server in the user
account.

Arguments:
    ids The ids of the projects from, if null will retrieve all
projects from the users account.
    withLeaves get the projects, images and pixels too.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def end_getProjects(self, _r):
            return _M_omero.api.Gateway._op_getProjects.end(self, _r)

        '''Get the projects, and datasets in the OMERO.Blitz server in the user
account.

Arguments:
    ids The ids of the projects from, if null will retrieve all
projects from the users account.
    withLeaves get the projects, images and pixels too.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def getProjects_async(self, _cb, ids, withLeaves, _ctx=None):
            return _M_omero.api.Gateway._op_getProjects.invokeAsync(self, (_cb, (ids, withLeaves), _ctx))

        '''Get the datasets in the OMERO.Blitz server with the given ids.

Arguments:
    ids of the datasets to retrieve, if null get all users datasets.
    withLeaves get the images and pixels too.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def getDatasets(self, ids, withLeaves, _ctx=None):
            return _M_omero.api.Gateway._op_getDatasets.invoke(self, ((ids, withLeaves), _ctx))

        '''Get the datasets in the OMERO.Blitz server with the given ids.

Arguments:
    ids of the datasets to retrieve, if null get all users datasets.
    withLeaves get the images and pixels too.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def begin_getDatasets(self, ids, withLeaves, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.Gateway._op_getDatasets.begin(self, ((ids, withLeaves), _response, _ex, _sent, _ctx))

        '''Get the datasets in the OMERO.Blitz server with the given ids.

Arguments:
    ids of the datasets to retrieve, if null get all users datasets.
    withLeaves get the images and pixels too.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def end_getDatasets(self, _r):
            return _M_omero.api.Gateway._op_getDatasets.end(self, _r)

        '''Get the datasets in the OMERO.Blitz server with the given ids.

Arguments:
    ids of the datasets to retrieve, if null get all users datasets.
    withLeaves get the images and pixels too.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def getDatasets_async(self, _cb, ids, withLeaves, _ctx=None):
            return _M_omero.api.Gateway._op_getDatasets.invokeAsync(self, (_cb, (ids, withLeaves), _ctx))

        '''Get the dataset in the OMERO.Blitz server with the given id.
Arguments:
    id of the dataset to retrieve
    withLeaves get the images and pixels too.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def getDataset(self, datasetId, leaves, _ctx=None):
            return _M_omero.api.Gateway._op_getDataset.invoke(self, ((datasetId, leaves), _ctx))

        '''Get the dataset in the OMERO.Blitz server with the given id.
Arguments:
    id of the dataset to retrieve
    withLeaves get the images and pixels too.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def begin_getDataset(self, datasetId, leaves, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.Gateway._op_getDataset.begin(self, ((datasetId, leaves), _response, _ex, _sent, _ctx))

        '''Get the dataset in the OMERO.Blitz server with the given id.
Arguments:
    id of the dataset to retrieve
    withLeaves get the images and pixels too.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def end_getDataset(self, _r):
            return _M_omero.api.Gateway._op_getDataset.end(self, _r)

        '''Get the dataset in the OMERO.Blitz server with the given id.
Arguments:
    id of the dataset to retrieve
    withLeaves get the images and pixels too.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def getDataset_async(self, _cb, datasetId, leaves, _ctx=None):
            return _M_omero.api.Gateway._op_getDataset.invokeAsync(self, (_cb, (datasetId, leaves), _ctx))

        '''Get the pixels associated with the image, this is normally one pixels per
image, but can be more.
Arguments:
    imageId
Returns:
    the list of pixels.
Exceptions:
    omero::ServerError'''
        def getPixelsFromImage(self, imageId, _ctx=None):
            return _M_omero.api.Gateway._op_getPixelsFromImage.invoke(self, ((imageId, ), _ctx))

        '''Get the pixels associated with the image, this is normally one pixels per
image, but can be more.
Arguments:
    imageId
Returns:
    the list of pixels.
Exceptions:
    omero::ServerError'''
        def begin_getPixelsFromImage(self, imageId, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.Gateway._op_getPixelsFromImage.begin(self, ((imageId, ), _response, _ex, _sent, _ctx))

        '''Get the pixels associated with the image, this is normally one pixels per
image, but can be more.
Arguments:
    imageId
Returns:
    the list of pixels.
Exceptions:
    omero::ServerError'''
        def end_getPixelsFromImage(self, _r):
            return _M_omero.api.Gateway._op_getPixelsFromImage.end(self, _r)

        '''Get the pixels associated with the image, this is normally one pixels per
image, but can be more.
Arguments:
    imageId
Returns:
    the list of pixels.
Exceptions:
    omero::ServerError'''
        def getPixelsFromImage_async(self, _cb, imageId, _ctx=None):
            return _M_omero.api.Gateway._op_getPixelsFromImage.invokeAsync(self, (_cb, (imageId, ), _ctx))

        '''Get the image with id
Arguments:
    id see above
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def getImage(self, id, _ctx=None):
            return _M_omero.api.Gateway._op_getImage.invoke(self, ((id, ), _ctx))

        '''Get the image with id
Arguments:
    id see above
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def begin_getImage(self, id, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.Gateway._op_getImage.begin(self, ((id, ), _response, _ex, _sent, _ctx))

        '''Get the image with id
Arguments:
    id see above
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def end_getImage(self, _r):
            return _M_omero.api.Gateway._op_getImage.end(self, _r)

        '''Get the image with id
Arguments:
    id see above
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def getImage_async(self, _cb, id, _ctx=None):
            return _M_omero.api.Gateway._op_getImage.invokeAsync(self, (_cb, (id, ), _ctx))

        '''Get the images in the OMERO.Blitz server from the object parentType with
id's in list ids.
Arguments:
    parentType see above.
    ids see above.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def getImages(self, parentType, ids, _ctx=None):
            return _M_omero.api.Gateway._op_getImages.invoke(self, ((parentType, ids), _ctx))

        '''Get the images in the OMERO.Blitz server from the object parentType with
id's in list ids.
Arguments:
    parentType see above.
    ids see above.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def begin_getImages(self, parentType, ids, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.Gateway._op_getImages.begin(self, ((parentType, ids), _response, _ex, _sent, _ctx))

        '''Get the images in the OMERO.Blitz server from the object parentType with
id's in list ids.
Arguments:
    parentType see above.
    ids see above.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def end_getImages(self, _r):
            return _M_omero.api.Gateway._op_getImages.end(self, _r)

        '''Get the images in the OMERO.Blitz server from the object parentType with
id's in list ids.
Arguments:
    parentType see above.
    ids see above.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def getImages_async(self, _cb, parentType, ids, _ctx=None):
            return _M_omero.api.Gateway._op_getImages.invokeAsync(self, (_cb, (parentType, ids), _ctx))

        '''Run the query passed as a string in the iQuery interface. This method will
return list of objects.
Arguments:
    myQuery string containing the query.
Returns:
    the result.
Exceptions:
    omero::ServerError'''
        def findAllByQuery(self, myQuery, _ctx=None):
            return _M_omero.api.Gateway._op_findAllByQuery.invoke(self, ((myQuery, ), _ctx))

        '''Run the query passed as a string in the iQuery interface. This method will
return list of objects.
Arguments:
    myQuery string containing the query.
Returns:
    the result.
Exceptions:
    omero::ServerError'''
        def begin_findAllByQuery(self, myQuery, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.Gateway._op_findAllByQuery.begin(self, ((myQuery, ), _response, _ex, _sent, _ctx))

        '''Run the query passed as a string in the iQuery interface. This method will
return list of objects.
Arguments:
    myQuery string containing the query.
Returns:
    the result.
Exceptions:
    omero::ServerError'''
        def end_findAllByQuery(self, _r):
            return _M_omero.api.Gateway._op_findAllByQuery.end(self, _r)

        '''Run the query passed as a string in the iQuery interface. This method will
return list of objects.
Arguments:
    myQuery string containing the query.
Returns:
    the result.
Exceptions:
    omero::ServerError'''
        def findAllByQuery_async(self, _cb, myQuery, _ctx=None):
            return _M_omero.api.Gateway._op_findAllByQuery.invokeAsync(self, (_cb, (myQuery, ), _ctx))

        '''Run the query passed as a string in the iQuery interface.
The method expects to return only one result from the query, if more than
one result is to be returned the method will throw an exception.
Arguments:
    myQuery string containing the query.
Returns:
    the result.
Exceptions:
    omero::ServerError'''
        def findByQuery(self, myQuery, _ctx=None):
            return _M_omero.api.Gateway._op_findByQuery.invoke(self, ((myQuery, ), _ctx))

        '''Run the query passed as a string in the iQuery interface.
The method expects to return only one result from the query, if more than
one result is to be returned the method will throw an exception.
Arguments:
    myQuery string containing the query.
Returns:
    the result.
Exceptions:
    omero::ServerError'''
        def begin_findByQuery(self, myQuery, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.Gateway._op_findByQuery.begin(self, ((myQuery, ), _response, _ex, _sent, _ctx))

        '''Run the query passed as a string in the iQuery interface.
The method expects to return only one result from the query, if more than
one result is to be returned the method will throw an exception.
Arguments:
    myQuery string containing the query.
Returns:
    the result.
Exceptions:
    omero::ServerError'''
        def end_findByQuery(self, _r):
            return _M_omero.api.Gateway._op_findByQuery.end(self, _r)

        '''Run the query passed as a string in the iQuery interface.
The method expects to return only one result from the query, if more than
one result is to be returned the method will throw an exception.
Arguments:
    myQuery string containing the query.
Returns:
    the result.
Exceptions:
    omero::ServerError'''
        def findByQuery_async(self, _cb, myQuery, _ctx=None):
            return _M_omero.api.Gateway._op_findByQuery.invokeAsync(self, (_cb, (myQuery, ), _ctx))

        '''Get the raw plane for the pixels pixelsId, this returns a 2d array
representing the plane, it returns doubles but will not lose data.
Arguments:
    pixelsId id of the pixels to retrieve.
    c the channel of the pixels to retrieve.
    t the time point to retrieve.
    z the z section to retrieve.
Returns:
    The raw plane in as byte stream.
Exceptions:
    omero::ServerError'''
        def getPlane(self, pixelsId, z, c, t, _ctx=None):
            return _M_omero.api.Gateway._op_getPlane.invoke(self, ((pixelsId, z, c, t), _ctx))

        '''Get the raw plane for the pixels pixelsId, this returns a 2d array
representing the plane, it returns doubles but will not lose data.
Arguments:
    pixelsId id of the pixels to retrieve.
    c the channel of the pixels to retrieve.
    t the time point to retrieve.
    z the z section to retrieve.
Returns:
    The raw plane in as byte stream.
Exceptions:
    omero::ServerError'''
        def begin_getPlane(self, pixelsId, z, c, t, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.Gateway._op_getPlane.begin(self, ((pixelsId, z, c, t), _response, _ex, _sent, _ctx))

        '''Get the raw plane for the pixels pixelsId, this returns a 2d array
representing the plane, it returns doubles but will not lose data.
Arguments:
    pixelsId id of the pixels to retrieve.
    c the channel of the pixels to retrieve.
    t the time point to retrieve.
    z the z section to retrieve.
Returns:
    The raw plane in as byte stream.
Exceptions:
    omero::ServerError'''
        def end_getPlane(self, _r):
            return _M_omero.api.Gateway._op_getPlane.end(self, _r)

        '''Get the raw plane for the pixels pixelsId, this returns a 2d array
representing the plane, it returns doubles but will not lose data.
Arguments:
    pixelsId id of the pixels to retrieve.
    c the channel of the pixels to retrieve.
    t the time point to retrieve.
    z the z section to retrieve.
Returns:
    The raw plane in as byte stream.
Exceptions:
    omero::ServerError'''
        def getPlane_async(self, _cb, pixelsId, z, c, t, _ctx=None):
            return _M_omero.api.Gateway._op_getPlane.invokeAsync(self, (_cb, (pixelsId, z, c, t), _ctx))

        '''Get the pixels information for an image, this method will also
attach the logical channels, channels, and other metadata in the pixels.
Arguments:
    pixelsId image id relating to the pixels.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def getPixels(self, pixelsId, _ctx=None):
            return _M_omero.api.Gateway._op_getPixels.invoke(self, ((pixelsId, ), _ctx))

        '''Get the pixels information for an image, this method will also
attach the logical channels, channels, and other metadata in the pixels.
Arguments:
    pixelsId image id relating to the pixels.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def begin_getPixels(self, pixelsId, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.Gateway._op_getPixels.begin(self, ((pixelsId, ), _response, _ex, _sent, _ctx))

        '''Get the pixels information for an image, this method will also
attach the logical channels, channels, and other metadata in the pixels.
Arguments:
    pixelsId image id relating to the pixels.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def end_getPixels(self, _r):
            return _M_omero.api.Gateway._op_getPixels.end(self, _r)

        '''Get the pixels information for an image, this method will also
attach the logical channels, channels, and other metadata in the pixels.
Arguments:
    pixelsId image id relating to the pixels.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def getPixels_async(self, _cb, pixelsId, _ctx=None):
            return _M_omero.api.Gateway._op_getPixels.invokeAsync(self, (_cb, (pixelsId, ), _ctx))

        '''Copy the pixels to a new pixels, this is only the data object
and does not create a pixels object in the RawPixelsStore,
To load data into the plane the uploadPlane(long, int, int, int, DoubleArrayArray)
to add data to the pixels.
Arguments:
    pixelsID pixels id to copy.
    x width of plane.
    y height of plane.
    t num timepoints
    z num zsections.
    channelList the list of channels to copy, this is the channel index.
    methodology user supplied text, describing the methods that
created the pixels.
Returns:
    new id.
Exceptions:
    omero::ServerError'''
        def copyPixelsXYTZ(self, pixelsID, x, y, t, z, channelList, methodology, _ctx=None):
            return _M_omero.api.Gateway._op_copyPixelsXYTZ.invoke(self, ((pixelsID, x, y, t, z, channelList, methodology), _ctx))

        '''Copy the pixels to a new pixels, this is only the data object
and does not create a pixels object in the RawPixelsStore,
To load data into the plane the uploadPlane(long, int, int, int, DoubleArrayArray)
to add data to the pixels.
Arguments:
    pixelsID pixels id to copy.
    x width of plane.
    y height of plane.
    t num timepoints
    z num zsections.
    channelList the list of channels to copy, this is the channel index.
    methodology user supplied text, describing the methods that
created the pixels.
Returns:
    new id.
Exceptions:
    omero::ServerError'''
        def begin_copyPixelsXYTZ(self, pixelsID, x, y, t, z, channelList, methodology, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.Gateway._op_copyPixelsXYTZ.begin(self, ((pixelsID, x, y, t, z, channelList, methodology), _response, _ex, _sent, _ctx))

        '''Copy the pixels to a new pixels, this is only the data object
and does not create a pixels object in the RawPixelsStore,
To load data into the plane the uploadPlane(long, int, int, int, DoubleArrayArray)
to add data to the pixels.
Arguments:
    pixelsID pixels id to copy.
    x width of plane.
    y height of plane.
    t num timepoints
    z num zsections.
    channelList the list of channels to copy, this is the channel index.
    methodology user supplied text, describing the methods that
created the pixels.
Returns:
    new id.
Exceptions:
    omero::ServerError'''
        def end_copyPixelsXYTZ(self, _r):
            return _M_omero.api.Gateway._op_copyPixelsXYTZ.end(self, _r)

        '''Copy the pixels to a new pixels, this is only the data object
and does not create a pixels object in the RawPixelsStore,
To load data into the plane the uploadPlane(long, int, int, int, DoubleArrayArray)
to add data to the pixels.
Arguments:
    pixelsID pixels id to copy.
    x width of plane.
    y height of plane.
    t num timepoints
    z num zsections.
    channelList the list of channels to copy, this is the channel index.
    methodology user supplied text, describing the methods that
created the pixels.
Returns:
    new id.
Exceptions:
    omero::ServerError'''
        def copyPixelsXYTZ_async(self, _cb, pixelsID, x, y, t, z, channelList, methodology, _ctx=None):
            return _M_omero.api.Gateway._op_copyPixelsXYTZ.invokeAsync(self, (_cb, (pixelsID, x, y, t, z, channelList, methodology), _ctx))

        '''Copy the pixels to a new pixels, this is only the data object
and does not create a pixels object in the RawPixelsStore,
To load data into the plane the uploadPlane(long, DoubleArrayArray)
to add data to the pixels.
Arguments:
    pixelsID pixels id to copy.
    channelList the list of channels to copy, this is the channel index.
    methodology user supplied text, describing the methods that
created the pixels.
Returns:
    new id.
Exceptions:
    omero::ServerError'''
        def copyPixels(self, pixelsID, channelList, methodology, _ctx=None):
            return _M_omero.api.Gateway._op_copyPixels.invoke(self, ((pixelsID, channelList, methodology), _ctx))

        '''Copy the pixels to a new pixels, this is only the data object
and does not create a pixels object in the RawPixelsStore,
To load data into the plane the uploadPlane(long, DoubleArrayArray)
to add data to the pixels.
Arguments:
    pixelsID pixels id to copy.
    channelList the list of channels to copy, this is the channel index.
    methodology user supplied text, describing the methods that
created the pixels.
Returns:
    new id.
Exceptions:
    omero::ServerError'''
        def begin_copyPixels(self, pixelsID, channelList, methodology, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.Gateway._op_copyPixels.begin(self, ((pixelsID, channelList, methodology), _response, _ex, _sent, _ctx))

        '''Copy the pixels to a new pixels, this is only the data object
and does not create a pixels object in the RawPixelsStore,
To load data into the plane the uploadPlane(long, DoubleArrayArray)
to add data to the pixels.
Arguments:
    pixelsID pixels id to copy.
    channelList the list of channels to copy, this is the channel index.
    methodology user supplied text, describing the methods that
created the pixels.
Returns:
    new id.
Exceptions:
    omero::ServerError'''
        def end_copyPixels(self, _r):
            return _M_omero.api.Gateway._op_copyPixels.end(self, _r)

        '''Copy the pixels to a new pixels, this is only the data object
and does not create a pixels object in the RawPixelsStore,
To load data into the plane the uploadPlane(long, DoubleArrayArray)
to add data to the pixels.
Arguments:
    pixelsID pixels id to copy.
    channelList the list of channels to copy, this is the channel index.
    methodology user supplied text, describing the methods that
created the pixels.
Returns:
    new id.
Exceptions:
    omero::ServerError'''
        def copyPixels_async(self, _cb, pixelsID, channelList, methodology, _ctx=None):
            return _M_omero.api.Gateway._op_copyPixels.invokeAsync(self, (_cb, (pixelsID, channelList, methodology), _ctx))

        '''Copy the image and it's attached pixels and
metadata to a new Image and return the id of the new image. The method
will not copy annotations or attachments.
Arguments:
    imageId image id to copy.
    x width of plane.
    y height of plane.
    t The number of time-points
    z The number of zSections.
    channelList the list of channels to copy, [0-(sizeC-1)].
    imageName The image name.
Returns:
    new id.
Exceptions:
    omero::ServerError'''
        def copyImage(self, imageId, x, y, t, z, channelList, imageName, _ctx=None):
            return _M_omero.api.Gateway._op_copyImage.invoke(self, ((imageId, x, y, t, z, channelList, imageName), _ctx))

        '''Copy the image and it's attached pixels and
metadata to a new Image and return the id of the new image. The method
will not copy annotations or attachments.
Arguments:
    imageId image id to copy.
    x width of plane.
    y height of plane.
    t The number of time-points
    z The number of zSections.
    channelList the list of channels to copy, [0-(sizeC-1)].
    imageName The image name.
Returns:
    new id.
Exceptions:
    omero::ServerError'''
        def begin_copyImage(self, imageId, x, y, t, z, channelList, imageName, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.Gateway._op_copyImage.begin(self, ((imageId, x, y, t, z, channelList, imageName), _response, _ex, _sent, _ctx))

        '''Copy the image and it's attached pixels and
metadata to a new Image and return the id of the new image. The method
will not copy annotations or attachments.
Arguments:
    imageId image id to copy.
    x width of plane.
    y height of plane.
    t The number of time-points
    z The number of zSections.
    channelList the list of channels to copy, [0-(sizeC-1)].
    imageName The image name.
Returns:
    new id.
Exceptions:
    omero::ServerError'''
        def end_copyImage(self, _r):
            return _M_omero.api.Gateway._op_copyImage.end(self, _r)

        '''Copy the image and it's attached pixels and
metadata to a new Image and return the id of the new image. The method
will not copy annotations or attachments.
Arguments:
    imageId image id to copy.
    x width of plane.
    y height of plane.
    t The number of time-points
    z The number of zSections.
    channelList the list of channels to copy, [0-(sizeC-1)].
    imageName The image name.
Returns:
    new id.
Exceptions:
    omero::ServerError'''
        def copyImage_async(self, _cb, imageId, x, y, t, z, channelList, imageName, _ctx=None):
            return _M_omero.api.Gateway._op_copyImage.invokeAsync(self, (_cb, (imageId, x, y, t, z, channelList, imageName), _ctx))

        '''Upload the plane to the server, on pixels id with channel and the
time, + z section. the data is the client 2d data values. This will
be converted to the raw server bytes.
Arguments:
    pixelsId pixels id to upload to .
    z z section.
    c channel.
    t time point.
    data plane data.
Exceptions:
    omero::ServerError'''
        def uploadPlane(self, pixelsId, z, c, t, data, _ctx=None):
            return _M_omero.api.Gateway._op_uploadPlane.invoke(self, ((pixelsId, z, c, t, data), _ctx))

        '''Upload the plane to the server, on pixels id with channel and the
time, + z section. the data is the client 2d data values. This will
be converted to the raw server bytes.
Arguments:
    pixelsId pixels id to upload to .
    z z section.
    c channel.
    t time point.
    data plane data.
Exceptions:
    omero::ServerError'''
        def begin_uploadPlane(self, pixelsId, z, c, t, data, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.Gateway._op_uploadPlane.begin(self, ((pixelsId, z, c, t, data), _response, _ex, _sent, _ctx))

        '''Upload the plane to the server, on pixels id with channel and the
time, + z section. the data is the client 2d data values. This will
be converted to the raw server bytes.
Arguments:
    pixelsId pixels id to upload to .
    z z section.
    c channel.
    t time point.
    data plane data.
Exceptions:
    omero::ServerError'''
        def end_uploadPlane(self, _r):
            return _M_omero.api.Gateway._op_uploadPlane.end(self, _r)

        '''Upload the plane to the server, on pixels id with channel and the
time, + z section. the data is the client 2d data values. This will
be converted to the raw server bytes.
Arguments:
    pixelsId pixels id to upload to .
    z z section.
    c channel.
    t time point.
    data plane data.
Exceptions:
    omero::ServerError'''
        def uploadPlane_async(self, _cb, pixelsId, z, c, t, data, _ctx=None):
            return _M_omero.api.Gateway._op_uploadPlane.invokeAsync(self, (_cb, (pixelsId, z, c, t, data), _ctx))

        '''Update the pixels object on the server, updating appropriate tables in the
database and returning a new copy of the pixels.
Arguments:
    object see above.
Returns:
    the new updated pixels.
Exceptions:
    omero::ServerError'''
        def updatePixels(self, pixels, _ctx=None):
            return _M_omero.api.Gateway._op_updatePixels.invoke(self, ((pixels, ), _ctx))

        '''Update the pixels object on the server, updating appropriate tables in the
database and returning a new copy of the pixels.
Arguments:
    object see above.
Returns:
    the new updated pixels.
Exceptions:
    omero::ServerError'''
        def begin_updatePixels(self, pixels, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.Gateway._op_updatePixels.begin(self, ((pixels, ), _response, _ex, _sent, _ctx))

        '''Update the pixels object on the server, updating appropriate tables in the
database and returning a new copy of the pixels.
Arguments:
    object see above.
Returns:
    the new updated pixels.
Exceptions:
    omero::ServerError'''
        def end_updatePixels(self, _r):
            return _M_omero.api.Gateway._op_updatePixels.end(self, _r)

        '''Update the pixels object on the server, updating appropriate tables in the
database and returning a new copy of the pixels.
Arguments:
    object see above.
Returns:
    the new updated pixels.
Exceptions:
    omero::ServerError'''
        def updatePixels_async(self, _cb, pixels, _ctx=None):
            return _M_omero.api.Gateway._op_updatePixels.invokeAsync(self, (_cb, (pixels, ), _ctx))

        '''Get a list of all the possible pixelsTypes in the server.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def getPixelTypes(self, _ctx=None):
            return _M_omero.api.Gateway._op_getPixelTypes.invoke(self, ((), _ctx))

        '''Get a list of all the possible pixelsTypes in the server.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def begin_getPixelTypes(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.Gateway._op_getPixelTypes.begin(self, ((), _response, _ex, _sent, _ctx))

        '''Get a list of all the possible pixelsTypes in the server.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def end_getPixelTypes(self, _r):
            return _M_omero.api.Gateway._op_getPixelTypes.end(self, _r)

        '''Get a list of all the possible pixelsTypes in the server.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def getPixelTypes_async(self, _cb, _ctx=None):
            return _M_omero.api.Gateway._op_getPixelTypes.invokeAsync(self, (_cb, (), _ctx))

        '''Get the pixelsType for type of name type.
Arguments:
    type see above.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def getPixelType(self, type, _ctx=None):
            return _M_omero.api.Gateway._op_getPixelType.invoke(self, ((type, ), _ctx))

        '''Get the pixelsType for type of name type.
Arguments:
    type see above.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def begin_getPixelType(self, type, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.Gateway._op_getPixelType.begin(self, ((type, ), _response, _ex, _sent, _ctx))

        '''Get the pixelsType for type of name type.
Arguments:
    type see above.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def end_getPixelType(self, _r):
            return _M_omero.api.Gateway._op_getPixelType.end(self, _r)

        '''Get the pixelsType for type of name type.
Arguments:
    type see above.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def getPixelType_async(self, _cb, type, _ctx=None):
            return _M_omero.api.Gateway._op_getPixelType.invokeAsync(self, (_cb, (type, ), _ctx))

        '''Render the pixels for the zSection z and timePoint t.
Arguments:
    pixelsId pixels id of the plane to render
    z z section to render
    t timepoint to render
Returns:
    The image as a buffered image.
Exceptions:
    omero::ServerError'''
        def getRenderedImage(self, pixelsId, z, t, _ctx=None):
            return _M_omero.api.Gateway._op_getRenderedImage.invoke(self, ((pixelsId, z, t), _ctx))

        '''Render the pixels for the zSection z and timePoint t.
Arguments:
    pixelsId pixels id of the plane to render
    z z section to render
    t timepoint to render
Returns:
    The image as a buffered image.
Exceptions:
    omero::ServerError'''
        def begin_getRenderedImage(self, pixelsId, z, t, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.Gateway._op_getRenderedImage.begin(self, ((pixelsId, z, t), _response, _ex, _sent, _ctx))

        '''Render the pixels for the zSection z and timePoint t.
Arguments:
    pixelsId pixels id of the plane to render
    z z section to render
    t timepoint to render
Returns:
    The image as a buffered image.
Exceptions:
    omero::ServerError'''
        def end_getRenderedImage(self, _r):
            return _M_omero.api.Gateway._op_getRenderedImage.end(self, _r)

        '''Render the pixels for the zSection z and timePoint t.
Arguments:
    pixelsId pixels id of the plane to render
    z z section to render
    t timepoint to render
Returns:
    The image as a buffered image.
Exceptions:
    omero::ServerError'''
        def getRenderedImage_async(self, _cb, pixelsId, z, t, _ctx=None):
            return _M_omero.api.Gateway._op_getRenderedImage.invokeAsync(self, (_cb, (pixelsId, z, t), _ctx))

        '''Render the pixels for the zSection z and timePoint t.
Arguments:
    pixelsId pixels id of the plane to render
    z z section to render
    t timepoint to render
Returns:
    The image as a buffered image.
Exceptions:
    omero::ServerError'''
        def renderAsPackedIntAsRGBA(self, pixelsId, z, t, _ctx=None):
            return _M_omero.api.Gateway._op_renderAsPackedIntAsRGBA.invoke(self, ((pixelsId, z, t), _ctx))

        '''Render the pixels for the zSection z and timePoint t.
Arguments:
    pixelsId pixels id of the plane to render
    z z section to render
    t timepoint to render
Returns:
    The image as a buffered image.
Exceptions:
    omero::ServerError'''
        def begin_renderAsPackedIntAsRGBA(self, pixelsId, z, t, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.Gateway._op_renderAsPackedIntAsRGBA.begin(self, ((pixelsId, z, t), _response, _ex, _sent, _ctx))

        '''Render the pixels for the zSection z and timePoint t.
Arguments:
    pixelsId pixels id of the plane to render
    z z section to render
    t timepoint to render
Returns:
    The image as a buffered image.
Exceptions:
    omero::ServerError'''
        def end_renderAsPackedIntAsRGBA(self, _r):
            return _M_omero.api.Gateway._op_renderAsPackedIntAsRGBA.end(self, _r)

        '''Render the pixels for the zSection z and timePoint t.
Arguments:
    pixelsId pixels id of the plane to render
    z z section to render
    t timepoint to render
Returns:
    The image as a buffered image.
Exceptions:
    omero::ServerError'''
        def renderAsPackedIntAsRGBA_async(self, _cb, pixelsId, z, t, _ctx=None):
            return _M_omero.api.Gateway._op_renderAsPackedIntAsRGBA.invokeAsync(self, (_cb, (pixelsId, z, t), _ctx))

        '''Render the pixels for the zSection z and timePoint t.
Arguments:
    pixelsId pixels id of the plane to render
    z z section to render
    t timepoint to render
Returns:
    The image as a 3d array where it represents the image as
[x][y][channel]
Exceptions:
    omero::ServerError'''
        def getRenderedImageMatrix(self, pixelsId, z, t, _ctx=None):
            return _M_omero.api.Gateway._op_getRenderedImageMatrix.invoke(self, ((pixelsId, z, t), _ctx))

        '''Render the pixels for the zSection z and timePoint t.
Arguments:
    pixelsId pixels id of the plane to render
    z z section to render
    t timepoint to render
Returns:
    The image as a 3d array where it represents the image as
[x][y][channel]
Exceptions:
    omero::ServerError'''
        def begin_getRenderedImageMatrix(self, pixelsId, z, t, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.Gateway._op_getRenderedImageMatrix.begin(self, ((pixelsId, z, t), _response, _ex, _sent, _ctx))

        '''Render the pixels for the zSection z and timePoint t.
Arguments:
    pixelsId pixels id of the plane to render
    z z section to render
    t timepoint to render
Returns:
    The image as a 3d array where it represents the image as
[x][y][channel]
Exceptions:
    omero::ServerError'''
        def end_getRenderedImageMatrix(self, _r):
            return _M_omero.api.Gateway._op_getRenderedImageMatrix.end(self, _r)

        '''Render the pixels for the zSection z and timePoint t.
Arguments:
    pixelsId pixels id of the plane to render
    z z section to render
    t timepoint to render
Returns:
    The image as a 3d array where it represents the image as
[x][y][channel]
Exceptions:
    omero::ServerError'''
        def getRenderedImageMatrix_async(self, _cb, pixelsId, z, t, _ctx=None):
            return _M_omero.api.Gateway._op_getRenderedImageMatrix.invokeAsync(self, (_cb, (pixelsId, z, t), _ctx))

        '''Set the active channels to be on or off in the rendering engine for
the pixels.
Arguments:
    pixelsId the pixels id.
    w the channel
    active set active?
Exceptions:
    omero::ServerError'''
        def setActive(self, pixelsId, w, active, _ctx=None):
            return _M_omero.api.Gateway._op_setActive.invoke(self, ((pixelsId, w, active), _ctx))

        '''Set the active channels to be on or off in the rendering engine for
the pixels.
Arguments:
    pixelsId the pixels id.
    w the channel
    active set active?
Exceptions:
    omero::ServerError'''
        def begin_setActive(self, pixelsId, w, active, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.Gateway._op_setActive.begin(self, ((pixelsId, w, active), _response, _ex, _sent, _ctx))

        '''Set the active channels to be on or off in the rendering engine for
the pixels.
Arguments:
    pixelsId the pixels id.
    w the channel
    active set active?
Exceptions:
    omero::ServerError'''
        def end_setActive(self, _r):
            return _M_omero.api.Gateway._op_setActive.end(self, _r)

        '''Set the active channels to be on or off in the rendering engine for
the pixels.
Arguments:
    pixelsId the pixels id.
    w the channel
    active set active?
Exceptions:
    omero::ServerError'''
        def setActive_async(self, _cb, pixelsId, w, active, _ctx=None):
            return _M_omero.api.Gateway._op_setActive.invokeAsync(self, (_cb, (pixelsId, w, active), _ctx))

        '''Get the thumbnail of the image.
Arguments:
    pixelsId for pixelsId
    sizeX size of thumbnail.
    sizeY size of thumbnail.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def getThumbnail(self, pixelsId, sizeX, sizeY, _ctx=None):
            return _M_omero.api.Gateway._op_getThumbnail.invoke(self, ((pixelsId, sizeX, sizeY), _ctx))

        '''Get the thumbnail of the image.
Arguments:
    pixelsId for pixelsId
    sizeX size of thumbnail.
    sizeY size of thumbnail.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def begin_getThumbnail(self, pixelsId, sizeX, sizeY, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.Gateway._op_getThumbnail.begin(self, ((pixelsId, sizeX, sizeY), _response, _ex, _sent, _ctx))

        '''Get the thumbnail of the image.
Arguments:
    pixelsId for pixelsId
    sizeX size of thumbnail.
    sizeY size of thumbnail.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def end_getThumbnail(self, _r):
            return _M_omero.api.Gateway._op_getThumbnail.end(self, _r)

        '''Get the thumbnail of the image.
Arguments:
    pixelsId for pixelsId
    sizeX size of thumbnail.
    sizeY size of thumbnail.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def getThumbnail_async(self, _cb, pixelsId, sizeX, sizeY, _ctx=None):
            return _M_omero.api.Gateway._op_getThumbnail.invokeAsync(self, (_cb, (pixelsId, sizeX, sizeY), _ctx))

        '''Get a set of thumbnails, of size X, Y from the list of pixelId's supplied
in the list.
Arguments:
    sizeX size of thumbnail.
    sizeY size of thumbnail.
    pixelsIds list of ids.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def getThumbnailSet(self, sizeX, sizeY, pixelsIds, _ctx=None):
            return _M_omero.api.Gateway._op_getThumbnailSet.invoke(self, ((sizeX, sizeY, pixelsIds), _ctx))

        '''Get a set of thumbnails, of size X, Y from the list of pixelId's supplied
in the list.
Arguments:
    sizeX size of thumbnail.
    sizeY size of thumbnail.
    pixelsIds list of ids.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def begin_getThumbnailSet(self, sizeX, sizeY, pixelsIds, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.Gateway._op_getThumbnailSet.begin(self, ((sizeX, sizeY, pixelsIds), _response, _ex, _sent, _ctx))

        '''Get a set of thumbnails, of size X, Y from the list of pixelId's supplied
in the list.
Arguments:
    sizeX size of thumbnail.
    sizeY size of thumbnail.
    pixelsIds list of ids.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def end_getThumbnailSet(self, _r):
            return _M_omero.api.Gateway._op_getThumbnailSet.end(self, _r)

        '''Get a set of thumbnails, of size X, Y from the list of pixelId's supplied
in the list.
Arguments:
    sizeX size of thumbnail.
    sizeY size of thumbnail.
    pixelsIds list of ids.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def getThumbnailSet_async(self, _cb, sizeX, sizeY, pixelsIds, _ctx=None):
            return _M_omero.api.Gateway._op_getThumbnailSet.invokeAsync(self, (_cb, (sizeX, sizeY, pixelsIds), _ctx))

        '''Attach an image to a dataset.
Arguments:
    dataset see above.
    image see above.
Exceptions:
    omero::ServerError'''
        def attachImageToDataset(self, dataset, image, _ctx=None):
            return _M_omero.api.Gateway._op_attachImageToDataset.invoke(self, ((dataset, image), _ctx))

        '''Attach an image to a dataset.
Arguments:
    dataset see above.
    image see above.
Exceptions:
    omero::ServerError'''
        def begin_attachImageToDataset(self, dataset, image, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.Gateway._op_attachImageToDataset.begin(self, ((dataset, image), _response, _ex, _sent, _ctx))

        '''Attach an image to a dataset.
Arguments:
    dataset see above.
    image see above.
Exceptions:
    omero::ServerError'''
        def end_attachImageToDataset(self, _r):
            return _M_omero.api.Gateway._op_attachImageToDataset.end(self, _r)

        '''Attach an image to a dataset.
Arguments:
    dataset see above.
    image see above.
Exceptions:
    omero::ServerError'''
        def attachImageToDataset_async(self, _cb, dataset, image, _ctx=None):
            return _M_omero.api.Gateway._op_attachImageToDataset.invokeAsync(self, (_cb, (dataset, image), _ctx))

        '''Create a new Image of X,Y, and zSections+time-points. The channelList is
the emission wavelength of the channel and the pixelsType.
Arguments:
    sizeX width of plane.
    sizeY height of plane.
    sizeZ num zSections.
    sizeT num time-points
    channelList the list of channels to copy.
    pixelsType the type of pixels in the image.
    name the image name.
    description the description of the image.
Returns:
    new id.
Exceptions:
    omero::ServerError'''
        def createImage(self, sizeX, sizeY, sizeZ, sizeT, channelList, pixelsType, name, description, _ctx=None):
            return _M_omero.api.Gateway._op_createImage.invoke(self, ((sizeX, sizeY, sizeZ, sizeT, channelList, pixelsType, name, description), _ctx))

        '''Create a new Image of X,Y, and zSections+time-points. The channelList is
the emission wavelength of the channel and the pixelsType.
Arguments:
    sizeX width of plane.
    sizeY height of plane.
    sizeZ num zSections.
    sizeT num time-points
    channelList the list of channels to copy.
    pixelsType the type of pixels in the image.
    name the image name.
    description the description of the image.
Returns:
    new id.
Exceptions:
    omero::ServerError'''
        def begin_createImage(self, sizeX, sizeY, sizeZ, sizeT, channelList, pixelsType, name, description, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.Gateway._op_createImage.begin(self, ((sizeX, sizeY, sizeZ, sizeT, channelList, pixelsType, name, description), _response, _ex, _sent, _ctx))

        '''Create a new Image of X,Y, and zSections+time-points. The channelList is
the emission wavelength of the channel and the pixelsType.
Arguments:
    sizeX width of plane.
    sizeY height of plane.
    sizeZ num zSections.
    sizeT num time-points
    channelList the list of channels to copy.
    pixelsType the type of pixels in the image.
    name the image name.
    description the description of the image.
Returns:
    new id.
Exceptions:
    omero::ServerError'''
        def end_createImage(self, _r):
            return _M_omero.api.Gateway._op_createImage.end(self, _r)

        '''Create a new Image of X,Y, and zSections+time-points. The channelList is
the emission wavelength of the channel and the pixelsType.
Arguments:
    sizeX width of plane.
    sizeY height of plane.
    sizeZ num zSections.
    sizeT num time-points
    channelList the list of channels to copy.
    pixelsType the type of pixels in the image.
    name the image name.
    description the description of the image.
Returns:
    new id.
Exceptions:
    omero::ServerError'''
        def createImage_async(self, _cb, sizeX, sizeY, sizeZ, sizeT, channelList, pixelsType, name, description, _ctx=None):
            return _M_omero.api.Gateway._op_createImage.invokeAsync(self, (_cb, (sizeX, sizeY, sizeZ, sizeT, channelList, pixelsType, name, description), _ctx))

        '''Get the images from the dataset with name, this can use wild cards.
Arguments:
    datasetId see above.
    imageName see above.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def getImageFromDatasetByName(self, datasetId, imageName, _ctx=None):
            return _M_omero.api.Gateway._op_getImageFromDatasetByName.invoke(self, ((datasetId, imageName), _ctx))

        '''Get the images from the dataset with name, this can use wild cards.
Arguments:
    datasetId see above.
    imageName see above.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def begin_getImageFromDatasetByName(self, datasetId, imageName, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.Gateway._op_getImageFromDatasetByName.begin(self, ((datasetId, imageName), _response, _ex, _sent, _ctx))

        '''Get the images from the dataset with name, this can use wild cards.
Arguments:
    datasetId see above.
    imageName see above.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def end_getImageFromDatasetByName(self, _r):
            return _M_omero.api.Gateway._op_getImageFromDatasetByName.end(self, _r)

        '''Get the images from the dataset with name, this can use wild cards.
Arguments:
    datasetId see above.
    imageName see above.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def getImageFromDatasetByName_async(self, _cb, datasetId, imageName, _ctx=None):
            return _M_omero.api.Gateway._op_getImageFromDatasetByName.invokeAsync(self, (_cb, (datasetId, imageName), _ctx))

        '''Get the list of images with name containing imageName.
Arguments:
    imageName see above.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def getImageByName(self, imageName, _ctx=None):
            return _M_omero.api.Gateway._op_getImageByName.invoke(self, ((imageName, ), _ctx))

        '''Get the list of images with name containing imageName.
Arguments:
    imageName see above.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def begin_getImageByName(self, imageName, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.Gateway._op_getImageByName.begin(self, ((imageName, ), _response, _ex, _sent, _ctx))

        '''Get the list of images with name containing imageName.
Arguments:
    imageName see above.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def end_getImageByName(self, _r):
            return _M_omero.api.Gateway._op_getImageByName.end(self, _r)

        '''Get the list of images with name containing imageName.
Arguments:
    imageName see above.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def getImageByName_async(self, _cb, imageName, _ctx=None):
            return _M_omero.api.Gateway._op_getImageByName.invokeAsync(self, (_cb, (imageName, ), _ctx))

        '''Save the object to the db .
Arguments:
    obj see above.
Exceptions:
    omero::ServerError'''
        def saveObject(self, obj, _ctx=None):
            return _M_omero.api.Gateway._op_saveObject.invoke(self, ((obj, ), _ctx))

        '''Save the object to the db .
Arguments:
    obj see above.
Exceptions:
    omero::ServerError'''
        def begin_saveObject(self, obj, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.Gateway._op_saveObject.begin(self, ((obj, ), _response, _ex, _sent, _ctx))

        '''Save the object to the db .
Arguments:
    obj see above.
Exceptions:
    omero::ServerError'''
        def end_saveObject(self, _r):
            return _M_omero.api.Gateway._op_saveObject.end(self, _r)

        '''Save the object to the db .
Arguments:
    obj see above.
Exceptions:
    omero::ServerError'''
        def saveObject_async(self, _cb, obj, _ctx=None):
            return _M_omero.api.Gateway._op_saveObject.invokeAsync(self, (_cb, (obj, ), _ctx))

        '''Save and return the Object.
Arguments:
    obj see above.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def saveAndReturnObject(self, obj, _ctx=None):
            return _M_omero.api.Gateway._op_saveAndReturnObject.invoke(self, ((obj, ), _ctx))

        '''Save and return the Object.
Arguments:
    obj see above.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def begin_saveAndReturnObject(self, obj, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.Gateway._op_saveAndReturnObject.begin(self, ((obj, ), _response, _ex, _sent, _ctx))

        '''Save and return the Object.
Arguments:
    obj see above.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def end_saveAndReturnObject(self, _r):
            return _M_omero.api.Gateway._op_saveAndReturnObject.end(self, _r)

        '''Save and return the Object.
Arguments:
    obj see above.
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def saveAndReturnObject_async(self, _cb, obj, _ctx=None):
            return _M_omero.api.Gateway._op_saveAndReturnObject.invokeAsync(self, (_cb, (obj, ), _ctx))

        '''Save the array.
Arguments:
    graph see above.
Exceptions:
    omero::ServerError'''
        def saveArray(self, graph, _ctx=None):
            return _M_omero.api.Gateway._op_saveArray.invoke(self, ((graph, ), _ctx))

        '''Save the array.
Arguments:
    graph see above.
Exceptions:
    omero::ServerError'''
        def begin_saveArray(self, graph, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.Gateway._op_saveArray.begin(self, ((graph, ), _response, _ex, _sent, _ctx))

        '''Save the array.
Arguments:
    graph see above.
Exceptions:
    omero::ServerError'''
        def end_saveArray(self, _r):
            return _M_omero.api.Gateway._op_saveArray.end(self, _r)

        '''Save the array.
Arguments:
    graph see above.
Exceptions:
    omero::ServerError'''
        def saveArray_async(self, _cb, graph, _ctx=None):
            return _M_omero.api.Gateway._op_saveArray.invokeAsync(self, (_cb, (graph, ), _ctx))

        '''Save and return the array.
Arguments:
     The Type to return.
    graph the object
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def saveAndReturnArray(self, graph, _ctx=None):
            return _M_omero.api.Gateway._op_saveAndReturnArray.invoke(self, ((graph, ), _ctx))

        '''Save and return the array.
Arguments:
     The Type to return.
    graph the object
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def begin_saveAndReturnArray(self, graph, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.Gateway._op_saveAndReturnArray.begin(self, ((graph, ), _response, _ex, _sent, _ctx))

        '''Save and return the array.
Arguments:
     The Type to return.
    graph the object
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def end_saveAndReturnArray(self, _r):
            return _M_omero.api.Gateway._op_saveAndReturnArray.end(self, _r)

        '''Save and return the array.
Arguments:
     The Type to return.
    graph the object
Returns:
    see above.
Exceptions:
    omero::ServerError'''
        def saveAndReturnArray_async(self, _cb, graph, _ctx=None):
            return _M_omero.api.Gateway._op_saveAndReturnArray.invokeAsync(self, (_cb, (graph, ), _ctx))

        '''Delete the object.
Arguments:
    row the object.(commonly a row in db)
Exceptions:
    omero::ServerError'''
        def deleteObject(self, row, _ctx=None):
            return _M_omero.api.Gateway._op_deleteObject.invoke(self, ((row, ), _ctx))

        '''Delete the object.
Arguments:
    row the object.(commonly a row in db)
Exceptions:
    omero::ServerError'''
        def begin_deleteObject(self, row, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.Gateway._op_deleteObject.begin(self, ((row, ), _response, _ex, _sent, _ctx))

        '''Delete the object.
Arguments:
    row the object.(commonly a row in db)
Exceptions:
    omero::ServerError'''
        def end_deleteObject(self, _r):
            return _M_omero.api.Gateway._op_deleteObject.end(self, _r)

        '''Delete the object.
Arguments:
    row the object.(commonly a row in db)
Exceptions:
    omero::ServerError'''
        def deleteObject_async(self, _cb, row, _ctx=None):
            return _M_omero.api.Gateway._op_deleteObject.invokeAsync(self, (_cb, (row, ), _ctx))

        '''Keep service alive.
Exceptions:
    omero::ServerError'''
        def keepAlive(self, _ctx=None):
            return _M_omero.api.Gateway._op_keepAlive.invoke(self, ((), _ctx))

        '''Keep service alive.
Exceptions:
    omero::ServerError'''
        def begin_keepAlive(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.api.Gateway._op_keepAlive.begin(self, ((), _response, _ex, _sent, _ctx))

        '''Keep service alive.
Exceptions:
    omero::ServerError'''
        def end_keepAlive(self, _r):
            return _M_omero.api.Gateway._op_keepAlive.end(self, _r)

        '''Keep service alive.
Exceptions:
    omero::ServerError'''
        def keepAlive_async(self, _cb, _ctx=None):
            return _M_omero.api.Gateway._op_keepAlive.invokeAsync(self, (_cb, (), _ctx))

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_omero.api.GatewayPrx.ice_checkedCast(proxy, '::omero::api::Gateway', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_omero.api.GatewayPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_omero.api._t_GatewayPrx = IcePy.defineProxy('::omero::api::Gateway', GatewayPrx)

    _M_omero.api._t_Gateway = IcePy.defineClass('::omero::api::Gateway', Gateway, -1, (), True, False, None, (_M_omero.api._t_StatefulServiceInterface,), ())
    Gateway._ice_type = _M_omero.api._t_Gateway

    Gateway._op_getProjects = IcePy.Operation('getProjects', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_omero.api._t_LongList, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), _M_omero.api._t_ProjectList, False, 0), (_M_omero._t_ServerError,))
    Gateway._op_getProjects.deprecate("The Gateway service is deprecated. use the native language gateways instead instead.")
    Gateway._op_getDatasets = IcePy.Operation('getDatasets', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_omero.api._t_LongList, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), _M_omero.api._t_DatasetList, False, 0), (_M_omero._t_ServerError,))
    Gateway._op_getDatasets.deprecate("The Gateway service is deprecated. use the native language gateways instead instead.")
    Gateway._op_getDataset = IcePy.Operation('getDataset', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_long, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), _M_omero.model._t_Dataset, False, 0), (_M_omero._t_ServerError,))
    Gateway._op_getDataset.deprecate("The Gateway service is deprecated. use the native language gateways instead instead.")
    Gateway._op_getPixelsFromImage = IcePy.Operation('getPixelsFromImage', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_long, False, 0),), (), ((), _M_omero.api._t_PixelsList, False, 0), (_M_omero._t_ServerError,))
    Gateway._op_getPixelsFromImage.deprecate("The Gateway service is deprecated. use the native language gateways instead instead.")
    Gateway._op_getImage = IcePy.Operation('getImage', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_long, False, 0),), (), ((), _M_omero.model._t_Image, False, 0), (_M_omero._t_ServerError,))
    Gateway._op_getImage.deprecate("The Gateway service is deprecated. use the native language gateways instead instead.")
    Gateway._op_getImages = IcePy.Operation('getImages', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_omero.api._t_ContainerClass, False, 0), ((), _M_omero.api._t_LongList, False, 0)), (), ((), _M_omero.api._t_ImageList, False, 0), (_M_omero._t_ServerError,))
    Gateway._op_getImages.deprecate("The Gateway service is deprecated. use the native language gateways instead instead.")
    Gateway._op_findAllByQuery = IcePy.Operation('findAllByQuery', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_omero.api._t_IObjectList, False, 0), (_M_omero._t_ServerError,))
    Gateway._op_findAllByQuery.deprecate("The Gateway service is deprecated. use the native language gateways instead instead.")
    Gateway._op_findByQuery = IcePy.Operation('findByQuery', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_omero.model._t_IObject, False, 0), (_M_omero._t_ServerError,))
    Gateway._op_findByQuery.deprecate("The Gateway service is deprecated. use the native language gateways instead instead.")
    Gateway._op_getPlane = IcePy.Operation('getPlane', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_long, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_Ice._t_ByteSeq, False, 0), (_M_omero._t_ServerError,))
    Gateway._op_getPlane.deprecate("The Gateway service is deprecated. use the native language gateways instead instead.")
    Gateway._op_getPixels = IcePy.Operation('getPixels', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_long, False, 0),), (), ((), _M_omero.model._t_Pixels, False, 0), (_M_omero._t_ServerError,))
    Gateway._op_getPixels.deprecate("The Gateway service is deprecated. use the native language gateways instead instead.")
    Gateway._op_copyPixelsXYTZ = IcePy.Operation('copyPixelsXYTZ', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_long, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), _M_omero.api._t_IntegerList, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_long, False, 0), (_M_omero._t_ServerError,))
    Gateway._op_copyPixelsXYTZ.deprecate("The Gateway service is deprecated. use the native language gateways instead instead.")
    Gateway._op_copyPixels = IcePy.Operation('copyPixels', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_long, False, 0), ((), _M_omero.api._t_IntegerList, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_long, False, 0), (_M_omero._t_ServerError,))
    Gateway._op_copyPixels.deprecate("The Gateway service is deprecated. use the native language gateways instead instead.")
    Gateway._op_copyImage = IcePy.Operation('copyImage', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_long, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), _M_omero.api._t_IntegerList, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_long, False, 0), (_M_omero._t_ServerError,))
    Gateway._op_copyImage.deprecate("The Gateway service is deprecated. use the native language gateways instead instead.")
    Gateway._op_uploadPlane = IcePy.Operation('uploadPlane', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_long, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), _M_Ice._t_ByteSeq, False, 0)), (), None, (_M_omero._t_ServerError,))
    Gateway._op_uploadPlane.deprecate("The Gateway service is deprecated. use the native language gateways instead instead.")
    Gateway._op_updatePixels = IcePy.Operation('updatePixels', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_omero.model._t_Pixels, False, 0),), (), ((), _M_omero.model._t_Pixels, False, 0), (_M_omero._t_ServerError,))
    Gateway._op_updatePixels.deprecate("The Gateway service is deprecated. use the native language gateways instead instead.")
    Gateway._op_getPixelTypes = IcePy.Operation('getPixelTypes', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_omero.api._t_PixelsTypeList, False, 0), (_M_omero._t_ServerError,))
    Gateway._op_getPixelTypes.deprecate("The Gateway service is deprecated. use the native language gateways instead instead.")
    Gateway._op_getPixelType = IcePy.Operation('getPixelType', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_omero.model._t_PixelsType, False, 0), (_M_omero._t_ServerError,))
    Gateway._op_getPixelType.deprecate("The Gateway service is deprecated. use the native language gateways instead instead.")
    Gateway._op_getRenderedImage = IcePy.Operation('getRenderedImage', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_long, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_omero.api._t_IntegerArray, False, 0), (_M_omero._t_ServerError,))
    Gateway._op_getRenderedImage.deprecate("The Gateway service is deprecated. use the native language gateways instead instead.")
    Gateway._op_renderAsPackedIntAsRGBA = IcePy.Operation('renderAsPackedIntAsRGBA', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_long, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_omero.api._t_IntegerArray, False, 0), (_M_omero._t_ServerError,))
    Gateway._op_renderAsPackedIntAsRGBA.deprecate("The Gateway service is deprecated. use the native language gateways instead instead.")
    Gateway._op_getRenderedImageMatrix = IcePy.Operation('getRenderedImageMatrix', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_long, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_omero.api._t_IntegerArrayArrayArray, False, 0), (_M_omero._t_ServerError,))
    Gateway._op_getRenderedImageMatrix.deprecate("The Gateway service is deprecated. use the native language gateways instead instead.")
    Gateway._op_setActive = IcePy.Operation('setActive', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_long, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0)), (), None, (_M_omero._t_ServerError,))
    Gateway._op_setActive.deprecate("The Gateway service is deprecated. use the native language gateways instead instead.")
    Gateway._op_getThumbnail = IcePy.Operation('getThumbnail', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_long, False, 0), ((), _M_omero._t_RInt, False, 0), ((), _M_omero._t_RInt, False, 0)), (), ((), _M_omero.api._t_ByteArray, False, 0), (_M_omero._t_ServerError,))
    Gateway._op_getThumbnail.deprecate("The Gateway service is deprecated. use the native language gateways instead instead.")
    Gateway._op_getThumbnailSet = IcePy.Operation('getThumbnailSet', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_omero._t_RInt, False, 0), ((), _M_omero._t_RInt, False, 0), ((), _M_omero.api._t_LongList, False, 0)), (), ((), _M_omero.api._t_LongByteArrayMap, False, 0), (_M_omero._t_ServerError,))
    Gateway._op_getThumbnailSet.deprecate("The Gateway service is deprecated. use the native language gateways instead instead.")
    Gateway._op_attachImageToDataset = IcePy.Operation('attachImageToDataset', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_omero.model._t_Dataset, False, 0), ((), _M_omero.model._t_Image, False, 0)), (), None, (_M_omero._t_ServerError,))
    Gateway._op_attachImageToDataset.deprecate("The Gateway service is deprecated. use the native language gateways instead instead.")
    Gateway._op_createImage = IcePy.Operation('createImage', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), _M_omero.api._t_IntegerList, False, 0), ((), _M_omero.model._t_PixelsType, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_long, False, 0), (_M_omero._t_ServerError,))
    Gateway._op_createImage.deprecate("The Gateway service is deprecated. use the native language gateways instead instead.")
    Gateway._op_getImageFromDatasetByName = IcePy.Operation('getImageFromDatasetByName', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_long, False, 0), ((), IcePy._t_string, False, 0)), (), ((), _M_omero.api._t_ImageList, False, 0), (_M_omero._t_ServerError,))
    Gateway._op_getImageFromDatasetByName.deprecate("The Gateway service is deprecated. use the native language gateways instead instead.")
    Gateway._op_getImageByName = IcePy.Operation('getImageByName', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_omero.api._t_ImageList, False, 0), (_M_omero._t_ServerError,))
    Gateway._op_getImageByName.deprecate("The Gateway service is deprecated. use the native language gateways instead instead.")
    Gateway._op_saveObject = IcePy.Operation('saveObject', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_omero.model._t_IObject, False, 0),), (), None, (_M_omero._t_ServerError,))
    Gateway._op_saveObject.deprecate("The Gateway service is deprecated. use the native language gateways instead instead.")
    Gateway._op_saveAndReturnObject = IcePy.Operation('saveAndReturnObject', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_omero.model._t_IObject, False, 0),), (), ((), _M_omero.model._t_IObject, False, 0), (_M_omero._t_ServerError,))
    Gateway._op_saveAndReturnObject.deprecate("The Gateway service is deprecated. use the native language gateways instead instead.")
    Gateway._op_saveArray = IcePy.Operation('saveArray', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_omero.api._t_IObjectList, False, 0),), (), None, (_M_omero._t_ServerError,))
    Gateway._op_saveArray.deprecate("The Gateway service is deprecated. use the native language gateways instead instead.")
    Gateway._op_saveAndReturnArray = IcePy.Operation('saveAndReturnArray', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_omero.api._t_IObjectList, False, 0),), (), ((), _M_omero.api._t_IObjectList, False, 0), (_M_omero._t_ServerError,))
    Gateway._op_saveAndReturnArray.deprecate("The Gateway service is deprecated. use the native language gateways instead instead.")
    Gateway._op_deleteObject = IcePy.Operation('deleteObject', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_omero.model._t_IObject, False, 0),), (), None, (_M_omero._t_ServerError,))
    Gateway._op_deleteObject.deprecate("The Gateway service is deprecated. use the native language gateways instead instead.")
    Gateway._op_keepAlive = IcePy.Operation('keepAlive', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), None, (_M_omero._t_ServerError,))
    Gateway._op_keepAlive.deprecate("The Gateway service is deprecated. use the native language gateways instead instead.")

    _M_omero.api.Gateway = Gateway
    del Gateway

    _M_omero.api.GatewayPrx = GatewayPrx
    del GatewayPrx

# End of module omero.api

__name__ = 'omero'

# End of module omero
